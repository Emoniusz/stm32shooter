
JAKUB_KURCZYNSKI_PROJEKT_CS_GO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d6c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b14  08006f1c  08006f1c  00016f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a30  08008a30  000474ec  2**0
                  CONTENTS
  4 .ARM          00000008  08008a30  08008a30  00018a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a38  08008a38  000474ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a38  08008a38  00018a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a3c  08008a3c  00018a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000274ec  20000000  08008a40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  200274ec  0802ff2c  000474ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20027994  0802ff2c  00047994  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000474ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164b1  00000000  00000000  0004751c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030fb  00000000  00000000  0005d9cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001360  00000000  00000000  00060ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e8  00000000  00000000  00061e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024bc9  00000000  00000000  00063010  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010cf8  00000000  00000000  00087bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dd7b9  00000000  00000000  000988d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017608a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005380  00000000  00000000  00176108  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200274ec 	.word	0x200274ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006f04 	.word	0x08006f04

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200274f0 	.word	0x200274f0
 80001ec:	08006f04 	.word	0x08006f04

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000594:	f000 fa5c 	bl	8000a50 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000598:	20ca      	movs	r0, #202	; 0xca
 800059a:	f000 f95d 	bl	8000858 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800059e:	20c3      	movs	r0, #195	; 0xc3
 80005a0:	f000 f967 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80005a4:	2008      	movs	r0, #8
 80005a6:	f000 f964 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80005aa:	2050      	movs	r0, #80	; 0x50
 80005ac:	f000 f961 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80005b0:	20cf      	movs	r0, #207	; 0xcf
 80005b2:	f000 f951 	bl	8000858 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f000 f95b 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80005bc:	20c1      	movs	r0, #193	; 0xc1
 80005be:	f000 f958 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80005c2:	2030      	movs	r0, #48	; 0x30
 80005c4:	f000 f955 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80005c8:	20ed      	movs	r0, #237	; 0xed
 80005ca:	f000 f945 	bl	8000858 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80005ce:	2064      	movs	r0, #100	; 0x64
 80005d0:	f000 f94f 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80005d4:	2003      	movs	r0, #3
 80005d6:	f000 f94c 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80005da:	2012      	movs	r0, #18
 80005dc:	f000 f949 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80005e0:	2081      	movs	r0, #129	; 0x81
 80005e2:	f000 f946 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80005e6:	20e8      	movs	r0, #232	; 0xe8
 80005e8:	f000 f936 	bl	8000858 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80005ec:	2085      	movs	r0, #133	; 0x85
 80005ee:	f000 f940 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80005f2:	2000      	movs	r0, #0
 80005f4:	f000 f93d 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80005f8:	2078      	movs	r0, #120	; 0x78
 80005fa:	f000 f93a 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80005fe:	20cb      	movs	r0, #203	; 0xcb
 8000600:	f000 f92a 	bl	8000858 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000604:	2039      	movs	r0, #57	; 0x39
 8000606:	f000 f934 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 800060a:	202c      	movs	r0, #44	; 0x2c
 800060c:	f000 f931 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000610:	2000      	movs	r0, #0
 8000612:	f000 f92e 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000616:	2034      	movs	r0, #52	; 0x34
 8000618:	f000 f92b 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800061c:	2002      	movs	r0, #2
 800061e:	f000 f928 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000622:	20f7      	movs	r0, #247	; 0xf7
 8000624:	f000 f918 	bl	8000858 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000628:	2020      	movs	r0, #32
 800062a:	f000 f922 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800062e:	20ea      	movs	r0, #234	; 0xea
 8000630:	f000 f912 	bl	8000858 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000634:	2000      	movs	r0, #0
 8000636:	f000 f91c 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800063a:	2000      	movs	r0, #0
 800063c:	f000 f919 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8000640:	20b1      	movs	r0, #177	; 0xb1
 8000642:	f000 f909 	bl	8000858 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000646:	2000      	movs	r0, #0
 8000648:	f000 f913 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800064c:	201b      	movs	r0, #27
 800064e:	f000 f910 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000652:	20b6      	movs	r0, #182	; 0xb6
 8000654:	f000 f900 	bl	8000858 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000658:	200a      	movs	r0, #10
 800065a:	f000 f90a 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 800065e:	20a2      	movs	r0, #162	; 0xa2
 8000660:	f000 f907 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000664:	20c0      	movs	r0, #192	; 0xc0
 8000666:	f000 f8f7 	bl	8000858 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800066a:	2010      	movs	r0, #16
 800066c:	f000 f901 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8000670:	20c1      	movs	r0, #193	; 0xc1
 8000672:	f000 f8f1 	bl	8000858 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000676:	2010      	movs	r0, #16
 8000678:	f000 f8fb 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800067c:	20c5      	movs	r0, #197	; 0xc5
 800067e:	f000 f8eb 	bl	8000858 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8000682:	2045      	movs	r0, #69	; 0x45
 8000684:	f000 f8f5 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8000688:	2015      	movs	r0, #21
 800068a:	f000 f8f2 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 800068e:	20c7      	movs	r0, #199	; 0xc7
 8000690:	f000 f8e2 	bl	8000858 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000694:	2090      	movs	r0, #144	; 0x90
 8000696:	f000 f8ec 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800069a:	2036      	movs	r0, #54	; 0x36
 800069c:	f000 f8dc 	bl	8000858 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80006a0:	20c8      	movs	r0, #200	; 0xc8
 80006a2:	f000 f8e6 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80006a6:	20f2      	movs	r0, #242	; 0xf2
 80006a8:	f000 f8d6 	bl	8000858 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f000 f8e0 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80006b2:	20b0      	movs	r0, #176	; 0xb0
 80006b4:	f000 f8d0 	bl	8000858 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80006b8:	20c2      	movs	r0, #194	; 0xc2
 80006ba:	f000 f8da 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80006be:	20b6      	movs	r0, #182	; 0xb6
 80006c0:	f000 f8ca 	bl	8000858 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80006c4:	200a      	movs	r0, #10
 80006c6:	f000 f8d4 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80006ca:	20a7      	movs	r0, #167	; 0xa7
 80006cc:	f000 f8d1 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80006d0:	2027      	movs	r0, #39	; 0x27
 80006d2:	f000 f8ce 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80006d6:	2004      	movs	r0, #4
 80006d8:	f000 f8cb 	bl	8000872 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80006dc:	202a      	movs	r0, #42	; 0x2a
 80006de:	f000 f8bb 	bl	8000858 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80006e2:	2000      	movs	r0, #0
 80006e4:	f000 f8c5 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f000 f8c2 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 f8bf 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80006f4:	20ef      	movs	r0, #239	; 0xef
 80006f6:	f000 f8bc 	bl	8000872 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80006fa:	202b      	movs	r0, #43	; 0x2b
 80006fc:	f000 f8ac 	bl	8000858 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000700:	2000      	movs	r0, #0
 8000702:	f000 f8b6 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000706:	2000      	movs	r0, #0
 8000708:	f000 f8b3 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800070c:	2001      	movs	r0, #1
 800070e:	f000 f8b0 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8000712:	203f      	movs	r0, #63	; 0x3f
 8000714:	f000 f8ad 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000718:	20f6      	movs	r0, #246	; 0xf6
 800071a:	f000 f89d 	bl	8000858 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800071e:	2001      	movs	r0, #1
 8000720:	f000 f8a7 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000724:	2000      	movs	r0, #0
 8000726:	f000 f8a4 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800072a:	2006      	movs	r0, #6
 800072c:	f000 f8a1 	bl	8000872 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8000730:	202c      	movs	r0, #44	; 0x2c
 8000732:	f000 f891 	bl	8000858 <ili9341_WriteReg>
  LCD_Delay(200);
 8000736:	20c8      	movs	r0, #200	; 0xc8
 8000738:	f000 fa78 	bl	8000c2c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800073c:	2026      	movs	r0, #38	; 0x26
 800073e:	f000 f88b 	bl	8000858 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000742:	2001      	movs	r0, #1
 8000744:	f000 f895 	bl	8000872 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8000748:	20e0      	movs	r0, #224	; 0xe0
 800074a:	f000 f885 	bl	8000858 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 800074e:	200f      	movs	r0, #15
 8000750:	f000 f88f 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8000754:	2029      	movs	r0, #41	; 0x29
 8000756:	f000 f88c 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 800075a:	2024      	movs	r0, #36	; 0x24
 800075c:	f000 f889 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000760:	200c      	movs	r0, #12
 8000762:	f000 f886 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8000766:	200e      	movs	r0, #14
 8000768:	f000 f883 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800076c:	2009      	movs	r0, #9
 800076e:	f000 f880 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8000772:	204e      	movs	r0, #78	; 0x4e
 8000774:	f000 f87d 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000778:	2078      	movs	r0, #120	; 0x78
 800077a:	f000 f87a 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 800077e:	203c      	movs	r0, #60	; 0x3c
 8000780:	f000 f877 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000784:	2009      	movs	r0, #9
 8000786:	f000 f874 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 800078a:	2013      	movs	r0, #19
 800078c:	f000 f871 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000790:	2005      	movs	r0, #5
 8000792:	f000 f86e 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8000796:	2017      	movs	r0, #23
 8000798:	f000 f86b 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800079c:	2011      	movs	r0, #17
 800079e:	f000 f868 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f000 f865 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80007a8:	20e1      	movs	r0, #225	; 0xe1
 80007aa:	f000 f855 	bl	8000858 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 f85f 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80007b4:	2016      	movs	r0, #22
 80007b6:	f000 f85c 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80007ba:	201b      	movs	r0, #27
 80007bc:	f000 f859 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80007c0:	2004      	movs	r0, #4
 80007c2:	f000 f856 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80007c6:	2011      	movs	r0, #17
 80007c8:	f000 f853 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80007cc:	2007      	movs	r0, #7
 80007ce:	f000 f850 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80007d2:	2031      	movs	r0, #49	; 0x31
 80007d4:	f000 f84d 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80007d8:	2033      	movs	r0, #51	; 0x33
 80007da:	f000 f84a 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80007de:	2042      	movs	r0, #66	; 0x42
 80007e0:	f000 f847 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80007e4:	2005      	movs	r0, #5
 80007e6:	f000 f844 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80007ea:	200c      	movs	r0, #12
 80007ec:	f000 f841 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80007f0:	200a      	movs	r0, #10
 80007f2:	f000 f83e 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80007f6:	2028      	movs	r0, #40	; 0x28
 80007f8:	f000 f83b 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80007fc:	202f      	movs	r0, #47	; 0x2f
 80007fe:	f000 f838 	bl	8000872 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8000802:	200f      	movs	r0, #15
 8000804:	f000 f835 	bl	8000872 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000808:	2011      	movs	r0, #17
 800080a:	f000 f825 	bl	8000858 <ili9341_WriteReg>
  LCD_Delay(200);
 800080e:	20c8      	movs	r0, #200	; 0xc8
 8000810:	f000 fa0c 	bl	8000c2c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000814:	2029      	movs	r0, #41	; 0x29
 8000816:	f000 f81f 	bl	8000858 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800081a:	202c      	movs	r0, #44	; 0x2c
 800081c:	f000 f81c 	bl	8000858 <ili9341_WriteReg>
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8000828:	f000 f912 	bl	8000a50 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800082c:	2103      	movs	r1, #3
 800082e:	20d3      	movs	r0, #211	; 0xd3
 8000830:	f000 f82c 	bl	800088c <ili9341_ReadData>
 8000834:	4603      	mov	r3, r0
 8000836:	b29b      	uxth	r3, r3
}
 8000838:	4618      	mov	r0, r3
 800083a:	bd80      	pop	{r7, pc}

0800083c <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000840:	2029      	movs	r0, #41	; 0x29
 8000842:	f000 f809 	bl	8000858 <ili9341_WriteReg>
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}

0800084a <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800084e:	2028      	movs	r0, #40	; 0x28
 8000850:	f000 f802 	bl	8000858 <ili9341_WriteReg>
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}

08000858 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	4618      	mov	r0, r3
 8000866:	f000 f98d 	bl	8000b84 <LCD_IO_WriteReg>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	4603      	mov	r3, r0
 800087a:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800087c:	88fb      	ldrh	r3, [r7, #6]
 800087e:	4618      	mov	r0, r3
 8000880:	f000 f95e 	bl	8000b40 <LCD_IO_WriteData>
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	460a      	mov	r2, r1
 8000896:	80fb      	strh	r3, [r7, #6]
 8000898:	4613      	mov	r3, r2
 800089a:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800089c:	797a      	ldrb	r2, [r7, #5]
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	4611      	mov	r1, r2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f990 	bl	8000bc8 <LCD_IO_ReadData>
 80008a8:	4603      	mov	r3, r0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80008b6:	23f0      	movs	r3, #240	; 0xf0
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80008c6:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80008d8:	4819      	ldr	r0, [pc, #100]	; (8000940 <SPIx_Init+0x6c>)
 80008da:	f004 f9bd 	bl	8004c58 <HAL_SPI_GetState>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d12b      	bne.n	800093c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <SPIx_Init+0x6c>)
 80008e6:	4a17      	ldr	r2, [pc, #92]	; (8000944 <SPIx_Init+0x70>)
 80008e8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <SPIx_Init+0x6c>)
 80008ec:	2218      	movs	r2, #24
 80008ee:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80008f0:	4b13      	ldr	r3, [pc, #76]	; (8000940 <SPIx_Init+0x6c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80008f6:	4b12      	ldr	r3, [pc, #72]	; (8000940 <SPIx_Init+0x6c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <SPIx_Init+0x6c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <SPIx_Init+0x6c>)
 8000904:	2200      	movs	r2, #0
 8000906:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <SPIx_Init+0x6c>)
 800090a:	2207      	movs	r2, #7
 800090c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <SPIx_Init+0x6c>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <SPIx_Init+0x6c>)
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <SPIx_Init+0x6c>)
 800091c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000920:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <SPIx_Init+0x6c>)
 8000924:	2200      	movs	r2, #0
 8000926:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <SPIx_Init+0x6c>)
 800092a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800092e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8000930:	4803      	ldr	r0, [pc, #12]	; (8000940 <SPIx_Init+0x6c>)
 8000932:	f000 f853 	bl	80009dc <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000936:	4802      	ldr	r0, [pc, #8]	; (8000940 <SPIx_Init+0x6c>)
 8000938:	f003 fd23 	bl	8004382 <HAL_SPI_Init>
  } 
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20027508 	.word	0x20027508
 8000944:	40015000 	.word	0x40015000

08000948 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8000952:	2300      	movs	r3, #0
 8000954:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	b29a      	uxth	r2, r3
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <SPIx_Read+0x38>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f107 0108 	add.w	r1, r7, #8
 8000962:	4808      	ldr	r0, [pc, #32]	; (8000984 <SPIx_Read+0x3c>)
 8000964:	f003 fecd 	bl	8004702 <HAL_SPI_Receive>
 8000968:	4603      	mov	r3, r0
 800096a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8000972:	f000 f827 	bl	80009c4 <SPIx_Error>
  }
  
  return readvalue;
 8000976:	68bb      	ldr	r3, [r7, #8]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000038 	.word	0x20000038
 8000984:	20027508 	.word	0x20027508

08000988 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000992:	2300      	movs	r3, #0
 8000994:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <SPIx_Write+0x34>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	1db9      	adds	r1, r7, #6
 800099c:	2201      	movs	r2, #1
 800099e:	4808      	ldr	r0, [pc, #32]	; (80009c0 <SPIx_Write+0x38>)
 80009a0:	f003 fd7b 	bl	800449a <HAL_SPI_Transmit>
 80009a4:	4603      	mov	r3, r0
 80009a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80009ae:	f000 f809 	bl	80009c4 <SPIx_Error>
  }
}
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000038 	.word	0x20000038
 80009c0:	20027508 	.word	0x20027508

080009c4 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80009c8:	4803      	ldr	r0, [pc, #12]	; (80009d8 <SPIx_Error+0x14>)
 80009ca:	f003 fd3e 	bl	800444a <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80009ce:	f7ff ff81 	bl	80008d4 <SPIx_Init>
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20027508 	.word	0x20027508

080009dc <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <SPIx_MspInit+0x6c>)
 80009ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ec:	4a16      	ldr	r2, [pc, #88]	; (8000a48 <SPIx_MspInit+0x6c>)
 80009ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009f2:	6453      	str	r3, [r2, #68]	; 0x44
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <SPIx_MspInit+0x6c>)
 80009f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <SPIx_MspInit+0x6c>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a08:	4a0f      	ldr	r2, [pc, #60]	; (8000a48 <SPIx_MspInit+0x6c>)
 8000a0a:	f043 0320 	orr.w	r3, r3, #32
 8000a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <SPIx_MspInit+0x6c>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a14:	f003 0320 	and.w	r3, r3, #32
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8000a1c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8000a2e:	2305      	movs	r3, #5
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <SPIx_MspInit+0x70>)
 8000a3a:	f001 fe1f 	bl	800267c <HAL_GPIO_Init>
}
 8000a3e:	bf00      	nop
 8000a40:	3728      	adds	r7, #40	; 0x28
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40021400 	.word	0x40021400

08000a50 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8000a56:	4b36      	ldr	r3, [pc, #216]	; (8000b30 <LCD_IO_Init+0xe0>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d164      	bne.n	8000b28 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8000a5e:	4b34      	ldr	r3, [pc, #208]	; (8000b30 <LCD_IO_Init+0xe0>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	4b32      	ldr	r3, [pc, #200]	; (8000b34 <LCD_IO_Init+0xe4>)
 8000a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6c:	4a31      	ldr	r2, [pc, #196]	; (8000b34 <LCD_IO_Init+0xe4>)
 8000a6e:	f043 0308 	orr.w	r3, r3, #8
 8000a72:	6313      	str	r3, [r2, #48]	; 0x30
 8000a74:	4b2f      	ldr	r3, [pc, #188]	; (8000b34 <LCD_IO_Init+0xe4>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	f003 0308 	and.w	r3, r3, #8
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8000a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a84:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	4619      	mov	r1, r3
 8000a98:	4827      	ldr	r0, [pc, #156]	; (8000b38 <LCD_IO_Init+0xe8>)
 8000a9a:	f001 fdef 	bl	800267c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <LCD_IO_Init+0xe4>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a23      	ldr	r2, [pc, #140]	; (8000b34 <LCD_IO_Init+0xe4>)
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <LCD_IO_Init+0xe4>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8000aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4819      	ldr	r0, [pc, #100]	; (8000b38 <LCD_IO_Init+0xe8>)
 8000ad4:	f001 fdd2 	bl	800267c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <LCD_IO_Init+0xe4>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <LCD_IO_Init+0xe4>)
 8000ae2:	f043 0304 	orr.w	r3, r3, #4
 8000ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <LCD_IO_Init+0xe4>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000af4:	2304      	movs	r3, #4
 8000af6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480c      	ldr	r0, [pc, #48]	; (8000b3c <LCD_IO_Init+0xec>)
 8000b0c:	f001 fdb6 	bl	800267c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8000b10:	2200      	movs	r2, #0
 8000b12:	2104      	movs	r1, #4
 8000b14:	4809      	ldr	r0, [pc, #36]	; (8000b3c <LCD_IO_Init+0xec>)
 8000b16:	f002 f865 	bl	8002be4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2104      	movs	r1, #4
 8000b1e:	4807      	ldr	r0, [pc, #28]	; (8000b3c <LCD_IO_Init+0xec>)
 8000b20:	f002 f860 	bl	8002be4 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8000b24:	f7ff fed6 	bl	80008d4 <SPIx_Init>
  }
}
 8000b28:	bf00      	nop
 8000b2a:	3720      	adds	r7, #32
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20027560 	.word	0x20027560
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020c00 	.word	0x40020c00
 8000b3c:	40020800 	.word	0x40020800

08000b40 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b50:	480a      	ldr	r0, [pc, #40]	; (8000b7c <LCD_IO_WriteData+0x3c>)
 8000b52:	f002 f847 	bl	8002be4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8000b56:	2200      	movs	r2, #0
 8000b58:	2104      	movs	r1, #4
 8000b5a:	4809      	ldr	r0, [pc, #36]	; (8000b80 <LCD_IO_WriteData+0x40>)
 8000b5c:	f002 f842 	bl	8002be4 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ff10 	bl	8000988 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <LCD_IO_WriteData+0x40>)
 8000b6e:	f002 f839 	bl	8002be4 <HAL_GPIO_WritePin>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40020c00 	.word	0x40020c00
 8000b80:	40020800 	.word	0x40020800

08000b84 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b94:	480a      	ldr	r0, [pc, #40]	; (8000bc0 <LCD_IO_WriteReg+0x3c>)
 8000b96:	f002 f825 	bl	8002be4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2104      	movs	r1, #4
 8000b9e:	4809      	ldr	r0, [pc, #36]	; (8000bc4 <LCD_IO_WriteReg+0x40>)
 8000ba0:	f002 f820 	bl	8002be4 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff feed 	bl	8000988 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <LCD_IO_WriteReg+0x40>)
 8000bb4:	f002 f816 	bl	8002be4 <HAL_GPIO_WritePin>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40020c00 	.word	0x40020c00
 8000bc4:	40020800 	.word	0x40020800

08000bc8 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	460a      	mov	r2, r1
 8000bd2:	80fb      	strh	r3, [r7, #6]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2104      	movs	r1, #4
 8000be0:	4810      	ldr	r0, [pc, #64]	; (8000c24 <LCD_IO_ReadData+0x5c>)
 8000be2:	f001 ffff 	bl	8002be4 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bec:	480e      	ldr	r0, [pc, #56]	; (8000c28 <LCD_IO_ReadData+0x60>)
 8000bee:	f001 fff9 	bl	8002be4 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fec7 	bl	8000988 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8000bfa:	797b      	ldrb	r3, [r7, #5]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fea3 	bl	8000948 <SPIx_Read>
 8000c02:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0a:	4807      	ldr	r0, [pc, #28]	; (8000c28 <LCD_IO_ReadData+0x60>)
 8000c0c:	f001 ffea 	bl	8002be4 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000c10:	2201      	movs	r2, #1
 8000c12:	2104      	movs	r1, #4
 8000c14:	4803      	ldr	r0, [pc, #12]	; (8000c24 <LCD_IO_ReadData+0x5c>)
 8000c16:	f001 ffe5 	bl	8002be4 <HAL_GPIO_WritePin>
  
  return readvalue;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40020800 	.word	0x40020800
 8000c28:	40020c00 	.word	0x40020c00

08000c2c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f000 ff87 	bl	8001b48 <HAL_Delay>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8000c48:	4b2d      	ldr	r3, [pc, #180]	; (8000d00 <BSP_LCD_Init+0xbc>)
 8000c4a:	4a2e      	ldr	r2, [pc, #184]	; (8000d04 <BSP_LCD_Init+0xc0>)
 8000c4c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8000c4e:	4b2c      	ldr	r3, [pc, #176]	; (8000d00 <BSP_LCD_Init+0xbc>)
 8000c50:	2209      	movs	r2, #9
 8000c52:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8000c54:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <BSP_LCD_Init+0xbc>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8000c5a:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <BSP_LCD_Init+0xbc>)
 8000c5c:	221d      	movs	r2, #29
 8000c5e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8000c60:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <BSP_LCD_Init+0xbc>)
 8000c62:	2203      	movs	r2, #3
 8000c64:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8000c66:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <BSP_LCD_Init+0xbc>)
 8000c68:	f240 120d 	movw	r2, #269	; 0x10d
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8000c6e:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <BSP_LCD_Init+0xbc>)
 8000c70:	f240 1243 	movw	r2, #323	; 0x143
 8000c74:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8000c76:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <BSP_LCD_Init+0xbc>)
 8000c78:	f240 1217 	movw	r2, #279	; 0x117
 8000c7c:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8000c7e:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <BSP_LCD_Init+0xbc>)
 8000c80:	f240 1247 	movw	r2, #327	; 0x147
 8000c84:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8000c86:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <BSP_LCD_Init+0xbc>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <BSP_LCD_Init+0xbc>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <BSP_LCD_Init+0xbc>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <BSP_LCD_Init+0xc4>)
 8000ca0:	2208      	movs	r2, #8
 8000ca2:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000ca4:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <BSP_LCD_Init+0xc4>)
 8000ca6:	22c0      	movs	r2, #192	; 0xc0
 8000ca8:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000caa:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <BSP_LCD_Init+0xc4>)
 8000cac:	2204      	movs	r2, #4
 8000cae:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <BSP_LCD_Init+0xc4>)
 8000cb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cb6:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8000cb8:	4813      	ldr	r0, [pc, #76]	; (8000d08 <BSP_LCD_Init+0xc4>)
 8000cba:	f003 f8b1 	bl	8003e20 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <BSP_LCD_Init+0xbc>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <BSP_LCD_Init+0xbc>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <BSP_LCD_Init+0xbc>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <BSP_LCD_Init+0xbc>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8000cd6:	f000 fac9 	bl	800126c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8000cda:	4809      	ldr	r0, [pc, #36]	; (8000d00 <BSP_LCD_Init+0xbc>)
 8000cdc:	f002 f964 	bl	8002fa8 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <BSP_LCD_Init+0xc8>)
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <BSP_LCD_Init+0xcc>)
 8000ce4:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <BSP_LCD_Init+0xc8>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8000cee:	f000 fcef 	bl	80016d0 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000cf2:	4808      	ldr	r0, [pc, #32]	; (8000d14 <BSP_LCD_Init+0xd0>)
 8000cf4:	f000 f89c 	bl	8000e30 <BSP_LCD_SetFont>

  return LCD_OK;
 8000cf8:	2300      	movs	r3, #0
}  
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200276cc 	.word	0x200276cc
 8000d04:	40016800 	.word	0x40016800
 8000d08:	200275a4 	.word	0x200275a4
 8000d0c:	20027774 	.word	0x20027774
 8000d10:	20000000 	.word	0x20000000
 8000d14:	2000003c 	.word	0x2000003c

08000d18 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <BSP_LCD_GetXSize+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d22:	4798      	blx	r3
 8000d24:	4603      	mov	r3, r0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20027774 	.word	0x20027774

08000d30 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <BSP_LCD_GetYSize+0x14>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3a:	4798      	blx	r3
 8000d3c:	4603      	mov	r3, r0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20027774 	.word	0x20027774

08000d48 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b090      	sub	sp, #64	; 0x40
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000d58:	f7ff ffde 	bl	8000d18 <BSP_LCD_GetXSize>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000d64:	f7ff ffe4 	bl	8000d30 <BSP_LCD_GetYSize>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8000d74:	23ff      	movs	r3, #255	; 0xff
 8000d76:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000d8e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000d94:	2307      	movs	r3, #7
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8000d98:	f7ff ffbe 	bl	8000d18 <BSP_LCD_GetXSize>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000da0:	f7ff ffc6 	bl	8000d30 <BSP_LCD_GetYSize>
 8000da4:	4603      	mov	r3, r0
 8000da6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8000da8:	88fa      	ldrh	r2, [r7, #6]
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4619      	mov	r1, r3
 8000db0:	4814      	ldr	r0, [pc, #80]	; (8000e04 <BSP_LCD_LayerDefaultInit+0xbc>)
 8000db2:	f002 f9c9 	bl	8003148 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000db6:	88fa      	ldrh	r2, [r7, #6]
 8000db8:	4913      	ldr	r1, [pc, #76]	; (8000e08 <BSP_LCD_LayerDefaultInit+0xc0>)
 8000dba:	4613      	mov	r3, r2
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	4413      	add	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8000dca:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000dcc:	88fa      	ldrh	r2, [r7, #6]
 8000dce:	490e      	ldr	r1, [pc, #56]	; (8000e08 <BSP_LCD_LayerDefaultInit+0xc0>)
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4413      	add	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	440b      	add	r3, r1
 8000dda:	3308      	adds	r3, #8
 8000ddc:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <BSP_LCD_LayerDefaultInit+0xc4>)
 8000dde:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8000de0:	88fa      	ldrh	r2, [r7, #6]
 8000de2:	4909      	ldr	r1, [pc, #36]	; (8000e08 <BSP_LCD_LayerDefaultInit+0xc0>)
 8000de4:	4613      	mov	r3, r2
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	4413      	add	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	440b      	add	r3, r1
 8000dee:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000df2:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8000df4:	4803      	ldr	r0, [pc, #12]	; (8000e04 <BSP_LCD_LayerDefaultInit+0xbc>)
 8000df6:	f002 f9e5 	bl	80031c4 <HAL_LTDC_EnableDither>
}
 8000dfa:	bf00      	nop
 8000dfc:	3740      	adds	r7, #64	; 0x40
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200276cc 	.word	0x200276cc
 8000e08:	200275d8 	.word	0x200275d8
 8000e0c:	2000003c 	.word	0x2000003c

08000e10 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <BSP_LCD_SelectLayer+0x1c>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6013      	str	r3, [r2, #0]
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	200275d4 	.word	0x200275d4

08000e30 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <BSP_LCD_SetFont+0x2c>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4908      	ldr	r1, [pc, #32]	; (8000e60 <BSP_LCD_SetFont+0x30>)
 8000e3e:	4613      	mov	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4413      	add	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	440b      	add	r3, r1
 8000e48:	3308      	adds	r3, #8
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	601a      	str	r2, [r3, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	200275d4 	.word	0x200275d4
 8000e60:	200275d8 	.word	0x200275d8

08000e64 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <BSP_LCD_GetFont+0x24>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4907      	ldr	r1, [pc, #28]	; (8000e8c <BSP_LCD_GetFont+0x28>)
 8000e6e:	4613      	mov	r3, r2
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	4413      	add	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	440b      	add	r3, r1
 8000e78:	3308      	adds	r3, #8
 8000e7a:	681b      	ldr	r3, [r3, #0]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	200275d4 	.word	0x200275d4
 8000e8c:	200275d8 	.word	0x200275d8

08000e90 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8000e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af02      	add	r7, sp, #8
 8000e96:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <BSP_LCD_Clear+0x48>)
 8000e9a:	681c      	ldr	r4, [r3, #0]
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <BSP_LCD_Clear+0x48>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <BSP_LCD_Clear+0x4c>)
 8000ea2:	2134      	movs	r1, #52	; 0x34
 8000ea4:	fb01 f303 	mul.w	r3, r1, r3
 8000ea8:	4413      	add	r3, r2
 8000eaa:	335c      	adds	r3, #92	; 0x5c
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	461d      	mov	r5, r3
 8000eb0:	f7ff ff32 	bl	8000d18 <BSP_LCD_GetXSize>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	f7ff ff3b 	bl	8000d30 <BSP_LCD_GetYSize>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	4632      	mov	r2, r6
 8000ec8:	4629      	mov	r1, r5
 8000eca:	4620      	mov	r0, r4
 8000ecc:	f000 fb84 	bl	80015d8 <FillBuffer>
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ed8:	200275d4 	.word	0x200275d4
 8000edc:	200276cc 	.word	0x200276cc

08000ee0 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80fb      	strh	r3, [r7, #6]
 8000eea:	460b      	mov	r3, r1
 8000eec:	80bb      	strh	r3, [r7, #4]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000ef2:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <BSP_LCD_DisplayChar+0x80>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	491b      	ldr	r1, [pc, #108]	; (8000f64 <BSP_LCD_DisplayChar+0x84>)
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	440b      	add	r3, r1
 8000f02:	3308      	adds	r3, #8
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6819      	ldr	r1, [r3, #0]
 8000f08:	78fb      	ldrb	r3, [r7, #3]
 8000f0a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000f0e:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <BSP_LCD_DisplayChar+0x80>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	4c14      	ldr	r4, [pc, #80]	; (8000f64 <BSP_LCD_DisplayChar+0x84>)
 8000f14:	4613      	mov	r3, r2
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	4413      	add	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4423      	add	r3, r4
 8000f1e:	3308      	adds	r3, #8
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000f24:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <BSP_LCD_DisplayChar+0x80>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4c0d      	ldr	r4, [pc, #52]	; (8000f64 <BSP_LCD_DisplayChar+0x84>)
 8000f2e:	4613      	mov	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4423      	add	r3, r4
 8000f38:	3308      	adds	r3, #8
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	889b      	ldrh	r3, [r3, #4]
 8000f3e:	3307      	adds	r3, #7
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	da00      	bge.n	8000f46 <BSP_LCD_DisplayChar+0x66>
 8000f44:	3307      	adds	r3, #7
 8000f46:	10db      	asrs	r3, r3, #3
 8000f48:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000f4c:	18ca      	adds	r2, r1, r3
 8000f4e:	88b9      	ldrh	r1, [r7, #4]
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 fa86 	bl	8001464 <DrawChar>
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd90      	pop	{r4, r7, pc}
 8000f60:	200275d4 	.word	0x200275d4
 8000f64:	200275d8 	.word	0x200275d8

08000f68 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8000f68:	b5b0      	push	{r4, r5, r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60ba      	str	r2, [r7, #8]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4603      	mov	r3, r0
 8000f74:	81fb      	strh	r3, [r7, #14]
 8000f76:	460b      	mov	r3, r1
 8000f78:	81bb      	strh	r3, [r7, #12]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	83fb      	strh	r3, [r7, #30]
 8000f82:	2300      	movs	r3, #0
 8000f84:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8000f92:	e002      	b.n	8000f9a <BSP_LCD_DisplayStringAt+0x32>
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	3301      	adds	r3, #1
 8000f98:	61bb      	str	r3, [r7, #24]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	1c5a      	adds	r2, r3, #1
 8000f9e:	617a      	str	r2, [r7, #20]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1f6      	bne.n	8000f94 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000fa6:	f7ff feb7 	bl	8000d18 <BSP_LCD_GetXSize>
 8000faa:	4b4a      	ldr	r3, [pc, #296]	; (80010d4 <BSP_LCD_DisplayStringAt+0x16c>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	494a      	ldr	r1, [pc, #296]	; (80010d8 <BSP_LCD_DisplayStringAt+0x170>)
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	440b      	add	r3, r1
 8000fba:	3308      	adds	r3, #8
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	889b      	ldrh	r3, [r3, #4]
 8000fc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fc4:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d01c      	beq.n	8001006 <BSP_LCD_DisplayStringAt+0x9e>
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d017      	beq.n	8001000 <BSP_LCD_DisplayStringAt+0x98>
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d12e      	bne.n	8001032 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	1ad1      	subs	r1, r2, r3
 8000fda:	4b3e      	ldr	r3, [pc, #248]	; (80010d4 <BSP_LCD_DisplayStringAt+0x16c>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	483e      	ldr	r0, [pc, #248]	; (80010d8 <BSP_LCD_DisplayStringAt+0x170>)
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	4413      	add	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4403      	add	r3, r0
 8000fea:	3308      	adds	r3, #8
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	889b      	ldrh	r3, [r3, #4]
 8000ff0:	fb03 f301 	mul.w	r3, r3, r1
 8000ff4:	085b      	lsrs	r3, r3, #1
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	89fb      	ldrh	r3, [r7, #14]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	83fb      	strh	r3, [r7, #30]
      break;
 8000ffe:	e01b      	b.n	8001038 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8001000:	89fb      	ldrh	r3, [r7, #14]
 8001002:	83fb      	strh	r3, [r7, #30]
      break;
 8001004:	e018      	b.n	8001038 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	b299      	uxth	r1, r3
 800100e:	4b31      	ldr	r3, [pc, #196]	; (80010d4 <BSP_LCD_DisplayStringAt+0x16c>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4831      	ldr	r0, [pc, #196]	; (80010d8 <BSP_LCD_DisplayStringAt+0x170>)
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4403      	add	r3, r0
 800101e:	3308      	adds	r3, #8
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	889b      	ldrh	r3, [r3, #4]
 8001024:	fb11 f303 	smulbb	r3, r1, r3
 8001028:	b29a      	uxth	r2, r3
 800102a:	89fb      	ldrh	r3, [r7, #14]
 800102c:	4413      	add	r3, r2
 800102e:	83fb      	strh	r3, [r7, #30]
      break;
 8001030:	e002      	b.n	8001038 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 8001032:	89fb      	ldrh	r3, [r7, #14]
 8001034:	83fb      	strh	r3, [r7, #30]
      break;
 8001036:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001038:	e01a      	b.n	8001070 <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	781a      	ldrb	r2, [r3, #0]
 800103e:	89b9      	ldrh	r1, [r7, #12]
 8001040:	8bfb      	ldrh	r3, [r7, #30]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff4c 	bl	8000ee0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <BSP_LCD_DisplayStringAt+0x16c>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4922      	ldr	r1, [pc, #136]	; (80010d8 <BSP_LCD_DisplayStringAt+0x170>)
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	3308      	adds	r3, #8
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	889a      	ldrh	r2, [r3, #4]
 800105e:	8bfb      	ldrh	r3, [r7, #30]
 8001060:	4413      	add	r3, r2
 8001062:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	3301      	adds	r3, #1
 8001068:	60bb      	str	r3, [r7, #8]
    i++;
 800106a:	8bbb      	ldrh	r3, [r7, #28]
 800106c:	3301      	adds	r3, #1
 800106e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	bf14      	ite	ne
 8001078:	2301      	movne	r3, #1
 800107a:	2300      	moveq	r3, #0
 800107c:	b2dc      	uxtb	r4, r3
 800107e:	f7ff fe4b 	bl	8000d18 <BSP_LCD_GetXSize>
 8001082:	4605      	mov	r5, r0
 8001084:	8bb9      	ldrh	r1, [r7, #28]
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <BSP_LCD_DisplayStringAt+0x16c>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4813      	ldr	r0, [pc, #76]	; (80010d8 <BSP_LCD_DisplayStringAt+0x170>)
 800108c:	4613      	mov	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4403      	add	r3, r0
 8001096:	3308      	adds	r3, #8
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	889b      	ldrh	r3, [r3, #4]
 800109c:	fb03 f301 	mul.w	r3, r3, r1
 80010a0:	1aeb      	subs	r3, r5, r3
 80010a2:	b299      	uxth	r1, r3
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <BSP_LCD_DisplayStringAt+0x16c>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	480b      	ldr	r0, [pc, #44]	; (80010d8 <BSP_LCD_DisplayStringAt+0x170>)
 80010aa:	4613      	mov	r3, r2
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4403      	add	r3, r0
 80010b4:	3308      	adds	r3, #8
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	889b      	ldrh	r3, [r3, #4]
 80010ba:	4299      	cmp	r1, r3
 80010bc:	bf2c      	ite	cs
 80010be:	2301      	movcs	r3, #1
 80010c0:	2300      	movcc	r3, #0
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	4023      	ands	r3, r4
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1b6      	bne.n	800103a <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 80010cc:	bf00      	nop
 80010ce:	3720      	adds	r7, #32
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bdb0      	pop	{r4, r5, r7, pc}
 80010d4:	200275d4 	.word	0x200275d4
 80010d8:	200275d8 	.word	0x200275d8

080010dc <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80010e8:	f7ff febc 	bl	8000e64 <BSP_LCD_GetFont>
 80010ec:	4603      	mov	r3, r0
 80010ee:	88db      	ldrh	r3, [r3, #6]
 80010f0:	88fa      	ldrh	r2, [r7, #6]
 80010f2:	fb12 f303 	smulbb	r3, r2, r3
 80010f6:	b299      	uxth	r1, r3
 80010f8:	2303      	movs	r3, #3
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	2000      	movs	r0, #0
 80010fe:	f7ff ff33 	bl	8000f68 <BSP_LCD_DisplayStringAt>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <BSP_LCD_DrawBitmap>:
  * @param  X: the bmp x position in the LCD
  * @param  Y: the bmp Y position in the LCD
  * @param  pBmp: Bmp picture address in the internal Flash
  */
void BSP_LCD_DrawBitmap(uint32_t X, uint32_t Y, uint8_t *pBmp)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b08b      	sub	sp, #44	; 0x2c
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bitpixel = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t inputcolormode = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pBmp[10] + (pBmp[11] << 8) + (pBmp[12] << 16)  + (pBmp[13] << 24);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	330a      	adds	r3, #10
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	330b      	adds	r3, #11
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	441a      	add	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	330c      	adds	r3, #12
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	041b      	lsls	r3, r3, #16
 8001146:	441a      	add	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	330d      	adds	r3, #13
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	061b      	lsls	r3, r3, #24
 8001150:	4413      	add	r3, r2
 8001152:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3312      	adds	r3, #18
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3313      	adds	r3, #19
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	441a      	add	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3314      	adds	r3, #20
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	041b      	lsls	r3, r3, #16
 800116e:	441a      	add	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3315      	adds	r3, #21
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	061b      	lsls	r3, r3, #24
 8001178:	4413      	add	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3316      	adds	r3, #22
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3317      	adds	r3, #23
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	441a      	add	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3318      	adds	r3, #24
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	041b      	lsls	r3, r3, #16
 8001196:	441a      	add	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3319      	adds	r3, #25
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	061b      	lsls	r3, r3, #24
 80011a0:	4413      	add	r3, r2
 80011a2:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bitpixel = pBmp[28] + (pBmp[29] << 8);   
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	331c      	adds	r3, #28
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	331d      	adds	r3, #29
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	4413      	add	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
 
  /* Set Address */
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 80011b8:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <BSP_LCD_DrawBitmap+0x158>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a2a      	ldr	r2, [pc, #168]	; (8001268 <BSP_LCD_DrawBitmap+0x15c>)
 80011be:	2134      	movs	r1, #52	; 0x34
 80011c0:	fb01 f303 	mul.w	r3, r1, r3
 80011c4:	4413      	add	r3, r2
 80011c6:	335c      	adds	r3, #92	; 0x5c
 80011c8:	681c      	ldr	r4, [r3, #0]
 80011ca:	f7ff fda5 	bl	8000d18 <BSP_LCD_GetXSize>
 80011ce:	4602      	mov	r2, r0
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	fb03 f202 	mul.w	r2, r3, r2
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4413      	add	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4423      	add	r3, r4
 80011de:	623b      	str	r3, [r7, #32]

  /* Get the Layer pixel format */    
  if ((bitpixel/8) == 4)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	3b20      	subs	r3, #32
 80011e4:	2b07      	cmp	r3, #7
 80011e6:	d802      	bhi.n	80011ee <BSP_LCD_DrawBitmap+0xe2>
  {
    inputcolormode = CM_ARGB8888;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	e008      	b.n	8001200 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bitpixel/8) == 2)
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	3b10      	subs	r3, #16
 80011f2:	2b07      	cmp	r3, #7
 80011f4:	d802      	bhi.n	80011fc <BSP_LCD_DrawBitmap+0xf0>
  {
    inputcolormode = CM_RGB565;
 80011f6:	2302      	movs	r3, #2
 80011f8:	61fb      	str	r3, [r7, #28]
 80011fa:	e001      	b.n	8001200 <BSP_LCD_DrawBitmap+0xf4>
  }
  else
  {
    inputcolormode = CM_RGB888;
 80011fc:	2301      	movs	r3, #1
 80011fe:	61fb      	str	r3, [r7, #28]
  }
 
  /* bypass the bitmap header */
  pBmp += (index + (width * (height - 1) * (bitpixel/8)));
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	3b01      	subs	r3, #1
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	fb02 f303 	mul.w	r3, r2, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	08d2      	lsrs	r2, r2, #3
 800120e:	fb02 f203 	mul.w	r2, r2, r3
 8001212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001214:	4413      	add	r3, r2
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	607b      	str	r3, [r7, #4]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 800121c:	2300      	movs	r3, #0
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
 8001220:	e018      	b.n	8001254 <BSP_LCD_DrawBitmap+0x148>
  {
  /* Pixel format conversion */
  ConvertLineToARGB8888((uint32_t *)pBmp, (uint32_t *)address, width, inputcolormode);
 8001222:	6a39      	ldr	r1, [r7, #32]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 fa0d 	bl	8001648 <ConvertLineToARGB8888>

  /* Increment the source and destination buffers */
  address+=  ((BSP_LCD_GetXSize() - width + width)*4);
 800122e:	f7ff fd73 	bl	8000d18 <BSP_LCD_GetXSize>
 8001232:	4603      	mov	r3, r0
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	6a3a      	ldr	r2, [r7, #32]
 8001238:	4413      	add	r3, r2
 800123a:	623b      	str	r3, [r7, #32]
  pBmp -= width*(bitpixel/8);
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	08db      	lsrs	r3, r3, #3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	fb02 f303 	mul.w	r3, r2, r3
 8001246:	425b      	negs	r3, r3
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	3301      	adds	r3, #1
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
 8001254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	429a      	cmp	r2, r3
 800125a:	d3e2      	bcc.n	8001222 <BSP_LCD_DrawBitmap+0x116>
  }
}
 800125c:	bf00      	nop
 800125e:	372c      	adds	r7, #44	; 0x2c
 8001260:	46bd      	mov	sp, r7
 8001262:	bd90      	pop	{r4, r7, pc}
 8001264:	200275d4 	.word	0x200275d4
 8001268:	200276cc 	.word	0x200276cc

0800126c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08e      	sub	sp, #56	; 0x38
 8001270:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
 8001276:	4b61      	ldr	r3, [pc, #388]	; (80013fc <BSP_LCD_MspInit+0x190>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	4a60      	ldr	r2, [pc, #384]	; (80013fc <BSP_LCD_MspInit+0x190>)
 800127c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001280:	6453      	str	r3, [r2, #68]	; 0x44
 8001282:	4b5e      	ldr	r3, [pc, #376]	; (80013fc <BSP_LCD_MspInit+0x190>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800128a:	623b      	str	r3, [r7, #32]
 800128c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
 8001292:	4b5a      	ldr	r3, [pc, #360]	; (80013fc <BSP_LCD_MspInit+0x190>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a59      	ldr	r2, [pc, #356]	; (80013fc <BSP_LCD_MspInit+0x190>)
 8001298:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b57      	ldr	r3, [pc, #348]	; (80013fc <BSP_LCD_MspInit+0x190>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
 80012ae:	4b53      	ldr	r3, [pc, #332]	; (80013fc <BSP_LCD_MspInit+0x190>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a52      	ldr	r2, [pc, #328]	; (80013fc <BSP_LCD_MspInit+0x190>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b50      	ldr	r3, [pc, #320]	; (80013fc <BSP_LCD_MspInit+0x190>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	61bb      	str	r3, [r7, #24]
 80012c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	4b4c      	ldr	r3, [pc, #304]	; (80013fc <BSP_LCD_MspInit+0x190>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a4b      	ldr	r2, [pc, #300]	; (80013fc <BSP_LCD_MspInit+0x190>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b49      	ldr	r3, [pc, #292]	; (80013fc <BSP_LCD_MspInit+0x190>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	4b45      	ldr	r3, [pc, #276]	; (80013fc <BSP_LCD_MspInit+0x190>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a44      	ldr	r2, [pc, #272]	; (80013fc <BSP_LCD_MspInit+0x190>)
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b42      	ldr	r3, [pc, #264]	; (80013fc <BSP_LCD_MspInit+0x190>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	4b3e      	ldr	r3, [pc, #248]	; (80013fc <BSP_LCD_MspInit+0x190>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a3d      	ldr	r2, [pc, #244]	; (80013fc <BSP_LCD_MspInit+0x190>)
 8001308:	f043 0308 	orr.w	r3, r3, #8
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b3b      	ldr	r3, [pc, #236]	; (80013fc <BSP_LCD_MspInit+0x190>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	4b37      	ldr	r3, [pc, #220]	; (80013fc <BSP_LCD_MspInit+0x190>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a36      	ldr	r2, [pc, #216]	; (80013fc <BSP_LCD_MspInit+0x190>)
 8001324:	f043 0320 	orr.w	r3, r3, #32
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b34      	ldr	r3, [pc, #208]	; (80013fc <BSP_LCD_MspInit+0x190>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0320 	and.w	r3, r3, #32
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b30      	ldr	r3, [pc, #192]	; (80013fc <BSP_LCD_MspInit+0x190>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a2f      	ldr	r2, [pc, #188]	; (80013fc <BSP_LCD_MspInit+0x190>)
 8001340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <BSP_LCD_MspInit+0x190>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001352:	f641 0358 	movw	r3, #6232	; 0x1858
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001360:	2302      	movs	r3, #2
 8001362:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001364:	230e      	movs	r3, #14
 8001366:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136c:	4619      	mov	r1, r3
 800136e:	4824      	ldr	r0, [pc, #144]	; (8001400 <BSP_LCD_MspInit+0x194>)
 8001370:	f001 f984 	bl	800267c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001374:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800137a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137e:	4619      	mov	r1, r3
 8001380:	4820      	ldr	r0, [pc, #128]	; (8001404 <BSP_LCD_MspInit+0x198>)
 8001382:	f001 f97b 	bl	800267c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001386:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800138c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001390:	4619      	mov	r1, r3
 8001392:	481d      	ldr	r0, [pc, #116]	; (8001408 <BSP_LCD_MspInit+0x19c>)
 8001394:	f001 f972 	bl	800267c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001398:	2348      	movs	r3, #72	; 0x48
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800139c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a0:	4619      	mov	r1, r3
 80013a2:	481a      	ldr	r0, [pc, #104]	; (800140c <BSP_LCD_MspInit+0x1a0>)
 80013a4:	f001 f96a 	bl	800267c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80013a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80013ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b2:	4619      	mov	r1, r3
 80013b4:	4816      	ldr	r0, [pc, #88]	; (8001410 <BSP_LCD_MspInit+0x1a4>)
 80013b6:	f001 f961 	bl	800267c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80013ba:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80013c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c4:	4619      	mov	r1, r3
 80013c6:	4813      	ldr	r0, [pc, #76]	; (8001414 <BSP_LCD_MspInit+0x1a8>)
 80013c8:	f001 f958 	bl	800267c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80013cc:	2303      	movs	r3, #3
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80013d0:	2309      	movs	r3, #9
 80013d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80013d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d8:	4619      	mov	r1, r3
 80013da:	480a      	ldr	r0, [pc, #40]	; (8001404 <BSP_LCD_MspInit+0x198>)
 80013dc:	f001 f94e 	bl	800267c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80013e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80013e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ea:	4619      	mov	r1, r3
 80013ec:	4809      	ldr	r0, [pc, #36]	; (8001414 <BSP_LCD_MspInit+0x1a8>)
 80013ee:	f001 f945 	bl	800267c <HAL_GPIO_Init>
}
 80013f2:	bf00      	nop
 80013f4:	3738      	adds	r7, #56	; 0x38
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020000 	.word	0x40020000
 8001404:	40020400 	.word	0x40020400
 8001408:	40020800 	.word	0x40020800
 800140c:	40020c00 	.word	0x40020c00
 8001410:	40021400 	.word	0x40021400
 8001414:	40021800 	.word	0x40021800

08001418 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001418:	b5b0      	push	{r4, r5, r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	603a      	str	r2, [r7, #0]
 8001422:	80fb      	strh	r3, [r7, #6]
 8001424:	460b      	mov	r3, r1
 8001426:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <BSP_LCD_DrawPixel+0x44>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0c      	ldr	r2, [pc, #48]	; (8001460 <BSP_LCD_DrawPixel+0x48>)
 800142e:	2134      	movs	r1, #52	; 0x34
 8001430:	fb01 f303 	mul.w	r3, r1, r3
 8001434:	4413      	add	r3, r2
 8001436:	335c      	adds	r3, #92	; 0x5c
 8001438:	681c      	ldr	r4, [r3, #0]
 800143a:	88bd      	ldrh	r5, [r7, #4]
 800143c:	f7ff fc6c 	bl	8000d18 <BSP_LCD_GetXSize>
 8001440:	4603      	mov	r3, r0
 8001442:	fb03 f205 	mul.w	r2, r3, r5
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4423      	add	r3, r4
 800144e:	461a      	mov	r2, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bdb0      	pop	{r4, r5, r7, pc}
 800145c:	200275d4 	.word	0x200275d4
 8001460:	200276cc 	.word	0x200276cc

08001464 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	603a      	str	r2, [r7, #0]
 800146e:	80fb      	strh	r3, [r7, #6]
 8001470:	460b      	mov	r3, r1
 8001472:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8001480:	4b53      	ldr	r3, [pc, #332]	; (80015d0 <DrawChar+0x16c>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4953      	ldr	r1, [pc, #332]	; (80015d4 <DrawChar+0x170>)
 8001486:	4613      	mov	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	440b      	add	r3, r1
 8001490:	3308      	adds	r3, #8
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	88db      	ldrh	r3, [r3, #6]
 8001496:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001498:	4b4d      	ldr	r3, [pc, #308]	; (80015d0 <DrawChar+0x16c>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	494d      	ldr	r1, [pc, #308]	; (80015d4 <DrawChar+0x170>)
 800149e:	4613      	mov	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	440b      	add	r3, r1
 80014a8:	3308      	adds	r3, #8
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	889b      	ldrh	r3, [r3, #4]
 80014ae:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80014b0:	8a3b      	ldrh	r3, [r7, #16]
 80014b2:	3307      	adds	r3, #7
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	da00      	bge.n	80014ba <DrawChar+0x56>
 80014b8:	3307      	adds	r3, #7
 80014ba:	10db      	asrs	r3, r3, #3
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	8a3b      	ldrh	r3, [r7, #16]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
 80014ce:	e076      	b.n	80015be <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80014d0:	8a3b      	ldrh	r3, [r7, #16]
 80014d2:	3307      	adds	r3, #7
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	da00      	bge.n	80014da <DrawChar+0x76>
 80014d8:	3307      	adds	r3, #7
 80014da:	10db      	asrs	r3, r3, #3
 80014dc:	461a      	mov	r2, r3
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	fb03 f302 	mul.w	r3, r3, r2
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80014ea:	8a3b      	ldrh	r3, [r7, #16]
 80014ec:	3307      	adds	r3, #7
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	da00      	bge.n	80014f4 <DrawChar+0x90>
 80014f2:	3307      	adds	r3, #7
 80014f4:	10db      	asrs	r3, r3, #3
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d002      	beq.n	8001500 <DrawChar+0x9c>
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d004      	beq.n	8001508 <DrawChar+0xa4>
 80014fe:	e00c      	b.n	800151a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	617b      	str	r3, [r7, #20]
      break;
 8001506:	e016      	b.n	8001536 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	3201      	adds	r2, #1
 8001512:	7812      	ldrb	r2, [r2, #0]
 8001514:	4313      	orrs	r3, r2
 8001516:	617b      	str	r3, [r7, #20]
      break;
 8001518:	e00d      	b.n	8001536 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	041a      	lsls	r2, r3, #16
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	3301      	adds	r3, #1
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	4313      	orrs	r3, r2
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	3202      	adds	r2, #2
 800152e:	7812      	ldrb	r2, [r2, #0]
 8001530:	4313      	orrs	r3, r2
 8001532:	617b      	str	r3, [r7, #20]
      break;
 8001534:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	e036      	b.n	80015aa <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800153c:	8a3a      	ldrh	r2, [r7, #16]
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	1ad2      	subs	r2, r2, r3
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	4413      	add	r3, r2
 8001546:	3b01      	subs	r3, #1
 8001548:	2201      	movs	r2, #1
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	461a      	mov	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	4013      	ands	r3, r2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d012      	beq.n	800157e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	b29a      	uxth	r2, r3
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	4413      	add	r3, r2
 8001560:	b298      	uxth	r0, r3
 8001562:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <DrawChar+0x16c>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	491b      	ldr	r1, [pc, #108]	; (80015d4 <DrawChar+0x170>)
 8001568:	4613      	mov	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4413      	add	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	88bb      	ldrh	r3, [r7, #4]
 8001576:	4619      	mov	r1, r3
 8001578:	f7ff ff4e 	bl	8001418 <BSP_LCD_DrawPixel>
 800157c:	e012      	b.n	80015a4 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	b29a      	uxth	r2, r3
 8001582:	88fb      	ldrh	r3, [r7, #6]
 8001584:	4413      	add	r3, r2
 8001586:	b298      	uxth	r0, r3
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <DrawChar+0x16c>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4911      	ldr	r1, [pc, #68]	; (80015d4 <DrawChar+0x170>)
 800158e:	4613      	mov	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	440b      	add	r3, r1
 8001598:	3304      	adds	r3, #4
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	88bb      	ldrh	r3, [r7, #4]
 800159e:	4619      	mov	r1, r3
 80015a0:	f7ff ff3a 	bl	8001418 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	3301      	adds	r3, #1
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	8a3b      	ldrh	r3, [r7, #16]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d3c4      	bcc.n	800153c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80015b2:	88bb      	ldrh	r3, [r7, #4]
 80015b4:	3301      	adds	r3, #1
 80015b6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	3301      	adds	r3, #1
 80015bc:	61fb      	str	r3, [r7, #28]
 80015be:	8a7b      	ldrh	r3, [r7, #18]
 80015c0:	69fa      	ldr	r2, [r7, #28]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d384      	bcc.n	80014d0 <DrawChar+0x6c>
  }
}
 80015c6:	bf00      	nop
 80015c8:	3720      	adds	r7, #32
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200275d4 	.word	0x200275d4
 80015d4:	200275d8 	.word	0x200275d8

080015d8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af02      	add	r7, sp, #8
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <FillBuffer+0x68>)
 80015e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80015ec:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80015ee:	4b14      	ldr	r3, [pc, #80]	; (8001640 <FillBuffer+0x68>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80015f4:	4a12      	ldr	r2, [pc, #72]	; (8001640 <FillBuffer+0x68>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <FillBuffer+0x68>)
 80015fc:	4a11      	ldr	r2, [pc, #68]	; (8001644 <FillBuffer+0x6c>)
 80015fe:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001600:	480f      	ldr	r0, [pc, #60]	; (8001640 <FillBuffer+0x68>)
 8001602:	f000 fdaf 	bl	8002164 <HAL_DMA2D_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d115      	bne.n	8001638 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 800160c:	68f9      	ldr	r1, [r7, #12]
 800160e:	480c      	ldr	r0, [pc, #48]	; (8001640 <FillBuffer+0x68>)
 8001610:	f000 ff06 	bl	8002420 <HAL_DMA2D_ConfigLayer>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10e      	bne.n	8001638 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69f9      	ldr	r1, [r7, #28]
 8001624:	4806      	ldr	r0, [pc, #24]	; (8001640 <FillBuffer+0x68>)
 8001626:	f000 fde6 	bl	80021f6 <HAL_DMA2D_Start>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d103      	bne.n	8001638 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001630:	210a      	movs	r1, #10
 8001632:	4803      	ldr	r0, [pc, #12]	; (8001640 <FillBuffer+0x68>)
 8001634:	f000 fe0a 	bl	800224c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001638:	bf00      	nop
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20027564 	.word	0x20027564
 8001644:	4002b000 	.word	0x4002b000

08001648 <ConvertLineToARGB8888>:
  * @param  pDst: output color
  * @param  xSize: buffer width
  * @param  ColorMode: input color mode   
  */
static void ConvertLineToARGB8888(void * pSrc, void * pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af02      	add	r7, sp, #8
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
 8001654:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  Dma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8001656:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <ConvertLineToARGB8888+0x80>)
 8001658:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800165c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800165e:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <ConvertLineToARGB8888+0x80>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = 0;     
 8001664:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <ConvertLineToARGB8888+0x80>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  Dma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800166a:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <ConvertLineToARGB8888+0x80>)
 800166c:	2200      	movs	r2, #0
 800166e:	631a      	str	r2, [r3, #48]	; 0x30
  Dma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <ConvertLineToARGB8888+0x80>)
 8001672:	22ff      	movs	r2, #255	; 0xff
 8001674:	635a      	str	r2, [r3, #52]	; 0x34
  Dma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8001676:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <ConvertLineToARGB8888+0x80>)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	62d3      	str	r3, [r2, #44]	; 0x2c
  Dma2dHandler.LayerCfg[1].InputOffset = 0;
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <ConvertLineToARGB8888+0x80>)
 800167e:	2200      	movs	r2, #0
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
  
  Dma2dHandler.Instance = DMA2D; 
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <ConvertLineToARGB8888+0x80>)
 8001684:	4a11      	ldr	r2, [pc, #68]	; (80016cc <ConvertLineToARGB8888+0x84>)
 8001686:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001688:	480f      	ldr	r0, [pc, #60]	; (80016c8 <ConvertLineToARGB8888+0x80>)
 800168a:	f000 fd6b 	bl	8002164 <HAL_DMA2D_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d115      	bne.n	80016c0 <ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, 1) == HAL_OK) 
 8001694:	2101      	movs	r1, #1
 8001696:	480c      	ldr	r0, [pc, #48]	; (80016c8 <ConvertLineToARGB8888+0x80>)
 8001698:	f000 fec2 	bl	8002420 <HAL_DMA2D_ConfigLayer>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10e      	bne.n	80016c0 <ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80016a2:	68f9      	ldr	r1, [r7, #12]
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	2301      	movs	r3, #1
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4806      	ldr	r0, [pc, #24]	; (80016c8 <ConvertLineToARGB8888+0x80>)
 80016ae:	f000 fda2 	bl	80021f6 <HAL_DMA2D_Start>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d103      	bne.n	80016c0 <ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80016b8:	210a      	movs	r1, #10
 80016ba:	4803      	ldr	r0, [pc, #12]	; (80016c8 <ConvertLineToARGB8888+0x80>)
 80016bc:	f000 fdc6 	bl	800224c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80016c0:	bf00      	nop
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20027564 	.word	0x20027564
 80016cc:	4002b000 	.word	0x4002b000

080016d0 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80016d4:	4b29      	ldr	r3, [pc, #164]	; (800177c <BSP_SDRAM_Init+0xac>)
 80016d6:	4a2a      	ldr	r2, [pc, #168]	; (8001780 <BSP_SDRAM_Init+0xb0>)
 80016d8:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80016da:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <BSP_SDRAM_Init+0xb4>)
 80016dc:	2202      	movs	r2, #2
 80016de:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80016e0:	4b28      	ldr	r3, [pc, #160]	; (8001784 <BSP_SDRAM_Init+0xb4>)
 80016e2:	2207      	movs	r2, #7
 80016e4:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80016e6:	4b27      	ldr	r3, [pc, #156]	; (8001784 <BSP_SDRAM_Init+0xb4>)
 80016e8:	2204      	movs	r2, #4
 80016ea:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80016ec:	4b25      	ldr	r3, [pc, #148]	; (8001784 <BSP_SDRAM_Init+0xb4>)
 80016ee:	2207      	movs	r2, #7
 80016f0:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80016f2:	4b24      	ldr	r3, [pc, #144]	; (8001784 <BSP_SDRAM_Init+0xb4>)
 80016f4:	2202      	movs	r2, #2
 80016f6:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80016f8:	4b22      	ldr	r3, [pc, #136]	; (8001784 <BSP_SDRAM_Init+0xb4>)
 80016fa:	2202      	movs	r2, #2
 80016fc:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80016fe:	4b21      	ldr	r3, [pc, #132]	; (8001784 <BSP_SDRAM_Init+0xb4>)
 8001700:	2202      	movs	r2, #2
 8001702:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8001704:	4b1d      	ldr	r3, [pc, #116]	; (800177c <BSP_SDRAM_Init+0xac>)
 8001706:	2201      	movs	r2, #1
 8001708:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800170a:	4b1c      	ldr	r3, [pc, #112]	; (800177c <BSP_SDRAM_Init+0xac>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001710:	4b1a      	ldr	r3, [pc, #104]	; (800177c <BSP_SDRAM_Init+0xac>)
 8001712:	2204      	movs	r2, #4
 8001714:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <BSP_SDRAM_Init+0xac>)
 8001718:	2210      	movs	r2, #16
 800171a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800171c:	4b17      	ldr	r3, [pc, #92]	; (800177c <BSP_SDRAM_Init+0xac>)
 800171e:	2240      	movs	r2, #64	; 0x40
 8001720:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8001722:	4b16      	ldr	r3, [pc, #88]	; (800177c <BSP_SDRAM_Init+0xac>)
 8001724:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001728:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <BSP_SDRAM_Init+0xac>)
 800172c:	2200      	movs	r2, #0
 800172e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <BSP_SDRAM_Init+0xac>)
 8001732:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001736:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8001738:	4b10      	ldr	r3, [pc, #64]	; (800177c <BSP_SDRAM_Init+0xac>)
 800173a:	2200      	movs	r2, #0
 800173c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <BSP_SDRAM_Init+0xac>)
 8001740:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001744:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8001746:	2100      	movs	r1, #0
 8001748:	480c      	ldr	r0, [pc, #48]	; (800177c <BSP_SDRAM_Init+0xac>)
 800174a:	f000 f87f 	bl	800184c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800174e:	490d      	ldr	r1, [pc, #52]	; (8001784 <BSP_SDRAM_Init+0xb4>)
 8001750:	480a      	ldr	r0, [pc, #40]	; (800177c <BSP_SDRAM_Init+0xac>)
 8001752:	f002 fd97 	bl	8004284 <HAL_SDRAM_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <BSP_SDRAM_Init+0xb8>)
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]
 8001762:	e002      	b.n	800176a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <BSP_SDRAM_Init+0xb8>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800176a:	f240 506a 	movw	r0, #1386	; 0x56a
 800176e:	f000 f80d 	bl	800178c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001772:	4b05      	ldr	r3, [pc, #20]	; (8001788 <BSP_SDRAM_Init+0xb8>)
 8001774:	781b      	ldrb	r3, [r3, #0]
}
 8001776:	4618      	mov	r0, r3
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200275f0 	.word	0x200275f0
 8001780:	a0000140 	.word	0xa0000140
 8001784:	20027624 	.word	0x20027624
 8001788:	20000044 	.word	0x20000044

0800178c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8001798:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800179a:	2201      	movs	r2, #1
 800179c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800179e:	4b29      	ldr	r3, [pc, #164]	; (8001844 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80017a0:	2208      	movs	r2, #8
 80017a2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80017a4:	4b27      	ldr	r3, [pc, #156]	; (8001844 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80017aa:	4b26      	ldr	r3, [pc, #152]	; (8001844 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80017b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017b4:	4923      	ldr	r1, [pc, #140]	; (8001844 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80017b6:	4824      	ldr	r0, [pc, #144]	; (8001848 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80017b8:	f002 fd98 	bl	80042ec <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80017bc:	2001      	movs	r0, #1
 80017be:	f000 f9c3 	bl	8001b48 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80017c4:	2202      	movs	r2, #2
 80017c6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80017c8:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80017ca:	2208      	movs	r2, #8
 80017cc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80017ce:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80017da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017de:	4919      	ldr	r1, [pc, #100]	; (8001844 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80017e0:	4819      	ldr	r0, [pc, #100]	; (8001848 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80017e2:	f002 fd83 	bl	80042ec <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80017e8:	2203      	movs	r2, #3
 80017ea:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80017ec:	4b15      	ldr	r3, [pc, #84]	; (8001844 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80017ee:	2208      	movs	r2, #8
 80017f0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80017f4:	2204      	movs	r2, #4
 80017f6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80017fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001802:	4910      	ldr	r1, [pc, #64]	; (8001844 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001804:	4810      	ldr	r0, [pc, #64]	; (8001848 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001806:	f002 fd71 	bl	80042ec <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800180a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800180e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001812:	2204      	movs	r2, #4
 8001814:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001818:	2208      	movs	r2, #8
 800181a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800181e:	2201      	movs	r2, #1
 8001820:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4a07      	ldr	r2, [pc, #28]	; (8001844 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001826:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800182c:	4905      	ldr	r1, [pc, #20]	; (8001844 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800182e:	4806      	ldr	r0, [pc, #24]	; (8001848 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001830:	f002 fd5c 	bl	80042ec <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	4804      	ldr	r0, [pc, #16]	; (8001848 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001838:	f002 fd83 	bl	8004342 <HAL_SDRAM_ProgramRefreshRate>
}
 800183c:	bf00      	nop
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20027640 	.word	0x20027640
 8001848:	200275f0 	.word	0x200275f0

0800184c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b090      	sub	sp, #64	; 0x40
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80ec 	beq.w	8001a36 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28
 8001862:	4b77      	ldr	r3, [pc, #476]	; (8001a40 <BSP_SDRAM_MspInit+0x1f4>)
 8001864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001866:	4a76      	ldr	r2, [pc, #472]	; (8001a40 <BSP_SDRAM_MspInit+0x1f4>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6393      	str	r3, [r2, #56]	; 0x38
 800186e:	4b74      	ldr	r3, [pc, #464]	; (8001a40 <BSP_SDRAM_MspInit+0x1f4>)
 8001870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
 8001878:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
 800187e:	4b70      	ldr	r3, [pc, #448]	; (8001a40 <BSP_SDRAM_MspInit+0x1f4>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a6f      	ldr	r2, [pc, #444]	; (8001a40 <BSP_SDRAM_MspInit+0x1f4>)
 8001884:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b6d      	ldr	r3, [pc, #436]	; (8001a40 <BSP_SDRAM_MspInit+0x1f4>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
 800189a:	4b69      	ldr	r3, [pc, #420]	; (8001a40 <BSP_SDRAM_MspInit+0x1f4>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a68      	ldr	r2, [pc, #416]	; (8001a40 <BSP_SDRAM_MspInit+0x1f4>)
 80018a0:	f043 0302 	orr.w	r3, r3, #2
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b66      	ldr	r3, [pc, #408]	; (8001a40 <BSP_SDRAM_MspInit+0x1f4>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	623b      	str	r3, [r7, #32]
 80018b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
 80018b6:	4b62      	ldr	r3, [pc, #392]	; (8001a40 <BSP_SDRAM_MspInit+0x1f4>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a61      	ldr	r2, [pc, #388]	; (8001a40 <BSP_SDRAM_MspInit+0x1f4>)
 80018bc:	f043 0304 	orr.w	r3, r3, #4
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b5f      	ldr	r3, [pc, #380]	; (8001a40 <BSP_SDRAM_MspInit+0x1f4>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	61fb      	str	r3, [r7, #28]
 80018cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	4b5b      	ldr	r3, [pc, #364]	; (8001a40 <BSP_SDRAM_MspInit+0x1f4>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a5a      	ldr	r2, [pc, #360]	; (8001a40 <BSP_SDRAM_MspInit+0x1f4>)
 80018d8:	f043 0308 	orr.w	r3, r3, #8
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b58      	ldr	r3, [pc, #352]	; (8001a40 <BSP_SDRAM_MspInit+0x1f4>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	61bb      	str	r3, [r7, #24]
 80018e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	4b54      	ldr	r3, [pc, #336]	; (8001a40 <BSP_SDRAM_MspInit+0x1f4>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a53      	ldr	r2, [pc, #332]	; (8001a40 <BSP_SDRAM_MspInit+0x1f4>)
 80018f4:	f043 0310 	orr.w	r3, r3, #16
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b51      	ldr	r3, [pc, #324]	; (8001a40 <BSP_SDRAM_MspInit+0x1f4>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	4b4d      	ldr	r3, [pc, #308]	; (8001a40 <BSP_SDRAM_MspInit+0x1f4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a4c      	ldr	r2, [pc, #304]	; (8001a40 <BSP_SDRAM_MspInit+0x1f4>)
 8001910:	f043 0320 	orr.w	r3, r3, #32
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b4a      	ldr	r3, [pc, #296]	; (8001a40 <BSP_SDRAM_MspInit+0x1f4>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0320 	and.w	r3, r3, #32
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b46      	ldr	r3, [pc, #280]	; (8001a40 <BSP_SDRAM_MspInit+0x1f4>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a45      	ldr	r2, [pc, #276]	; (8001a40 <BSP_SDRAM_MspInit+0x1f4>)
 800192c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b43      	ldr	r3, [pc, #268]	; (8001a40 <BSP_SDRAM_MspInit+0x1f4>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001942:	2302      	movs	r3, #2
 8001944:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800194a:	230c      	movs	r3, #12
 800194c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800194e:	2360      	movs	r3, #96	; 0x60
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8001952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001956:	4619      	mov	r1, r3
 8001958:	483a      	ldr	r0, [pc, #232]	; (8001a44 <BSP_SDRAM_MspInit+0x1f8>)
 800195a:	f000 fe8f 	bl	800267c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800195e:	2301      	movs	r3, #1
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8001962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001966:	4619      	mov	r1, r3
 8001968:	4837      	ldr	r0, [pc, #220]	; (8001a48 <BSP_SDRAM_MspInit+0x1fc>)
 800196a:	f000 fe87 	bl	800267c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800196e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001978:	4619      	mov	r1, r3
 800197a:	4834      	ldr	r0, [pc, #208]	; (8001a4c <BSP_SDRAM_MspInit+0x200>)
 800197c:	f000 fe7e 	bl	800267c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8001980:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001986:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198a:	4619      	mov	r1, r3
 800198c:	4830      	ldr	r0, [pc, #192]	; (8001a50 <BSP_SDRAM_MspInit+0x204>)
 800198e:	f000 fe75 	bl	800267c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8001992:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001998:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800199c:	4619      	mov	r1, r3
 800199e:	482d      	ldr	r0, [pc, #180]	; (8001a54 <BSP_SDRAM_MspInit+0x208>)
 80019a0:	f000 fe6c 	bl	800267c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80019a4:	f248 1333 	movw	r3, #33075	; 0x8133
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80019aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ae:	4619      	mov	r1, r3
 80019b0:	4829      	ldr	r0, [pc, #164]	; (8001a58 <BSP_SDRAM_MspInit+0x20c>)
 80019b2:	f000 fe63 	bl	800267c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80019b6:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <BSP_SDRAM_MspInit+0x210>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <BSP_SDRAM_MspInit+0x210>)
 80019be:	2280      	movs	r2, #128	; 0x80
 80019c0:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80019c2:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <BSP_SDRAM_MspInit+0x210>)
 80019c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c8:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80019ca:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <BSP_SDRAM_MspInit+0x210>)
 80019cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019d0:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019d2:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <BSP_SDRAM_MspInit+0x210>)
 80019d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019d8:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <BSP_SDRAM_MspInit+0x210>)
 80019dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019e0:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80019e2:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <BSP_SDRAM_MspInit+0x210>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80019e8:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <BSP_SDRAM_MspInit+0x210>)
 80019ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019ee:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80019f0:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <BSP_SDRAM_MspInit+0x210>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80019f6:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <BSP_SDRAM_MspInit+0x210>)
 80019f8:	2203      	movs	r2, #3
 80019fa:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80019fc:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <BSP_SDRAM_MspInit+0x210>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001a02:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <BSP_SDRAM_MspInit+0x210>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8001a08:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <BSP_SDRAM_MspInit+0x210>)
 8001a0a:	4a15      	ldr	r2, [pc, #84]	; (8001a60 <BSP_SDRAM_MspInit+0x214>)
 8001a0c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a12      	ldr	r2, [pc, #72]	; (8001a5c <BSP_SDRAM_MspInit+0x210>)
 8001a12:	631a      	str	r2, [r3, #48]	; 0x30
 8001a14:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <BSP_SDRAM_MspInit+0x210>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8001a1a:	4810      	ldr	r0, [pc, #64]	; (8001a5c <BSP_SDRAM_MspInit+0x210>)
 8001a1c:	f000 fa94 	bl	8001f48 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8001a20:	480e      	ldr	r0, [pc, #56]	; (8001a5c <BSP_SDRAM_MspInit+0x210>)
 8001a22:	f000 f9e3 	bl	8001dec <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	210f      	movs	r1, #15
 8001a2a:	2038      	movs	r0, #56	; 0x38
 8001a2c:	f000 f989 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001a30:	2038      	movs	r0, #56	; 0x38
 8001a32:	f000 f9a2 	bl	8001d7a <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8001a36:	bf00      	nop
 8001a38:	3740      	adds	r7, #64	; 0x40
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40020400 	.word	0x40020400
 8001a48:	40020800 	.word	0x40020800
 8001a4c:	40020c00 	.word	0x40020c00
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40021400 	.word	0x40021400
 8001a58:	40021800 	.word	0x40021800
 8001a5c:	20027650 	.word	0x20027650
 8001a60:	40026410 	.word	0x40026410

08001a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_Init+0x40>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <HAL_Init+0x40>)
 8001a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_Init+0x40>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_Init+0x40>)
 8001a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_Init+0x40>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <HAL_Init+0x40>)
 8001a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f000 f94d 	bl	8001d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a92:	2000      	movs	r0, #0
 8001a94:	f000 f808 	bl	8001aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a98:	f003 ffcc 	bl	8005a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023c00 	.word	0x40023c00

08001aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_InitTick+0x54>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_InitTick+0x58>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f965 	bl	8001d96 <HAL_SYSTICK_Config>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00e      	b.n	8001af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b0f      	cmp	r3, #15
 8001ada:	d80a      	bhi.n	8001af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001adc:	2200      	movs	r2, #0
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f000 f92d 	bl	8001d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae8:	4a06      	ldr	r2, [pc, #24]	; (8001b04 <HAL_InitTick+0x5c>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e000      	b.n	8001af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20027484 	.word	0x20027484
 8001b00:	2000004c 	.word	0x2000004c
 8001b04:	20000048 	.word	0x20000048

08001b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_IncTick+0x20>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_IncTick+0x24>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <HAL_IncTick+0x24>)
 8001b1a:	6013      	str	r3, [r2, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	2000004c 	.word	0x2000004c
 8001b2c:	20027778 	.word	0x20027778

08001b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return uwTick;
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <HAL_GetTick+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20027778 	.word	0x20027778

08001b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b50:	f7ff ffee 	bl	8001b30 <HAL_GetTick>
 8001b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b60:	d005      	beq.n	8001b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <HAL_Delay+0x40>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b6e:	bf00      	nop
 8001b70:	f7ff ffde 	bl	8001b30 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d8f7      	bhi.n	8001b70 <HAL_Delay+0x28>
  {
  }
}
 8001b80:	bf00      	nop
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	2000004c 	.word	0x2000004c

08001b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bbe:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	60d3      	str	r3, [r2, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <__NVIC_GetPriorityGrouping+0x18>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	f003 0307 	and.w	r3, r3, #7
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	db0b      	blt.n	8001c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	f003 021f 	and.w	r2, r3, #31
 8001c08:	4907      	ldr	r1, [pc, #28]	; (8001c28 <__NVIC_EnableIRQ+0x38>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	2001      	movs	r0, #1
 8001c12:	fa00 f202 	lsl.w	r2, r0, r2
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000e100 	.word	0xe000e100

08001c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	6039      	str	r1, [r7, #0]
 8001c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	db0a      	blt.n	8001c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	490c      	ldr	r1, [pc, #48]	; (8001c78 <__NVIC_SetPriority+0x4c>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	0112      	lsls	r2, r2, #4
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	440b      	add	r3, r1
 8001c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c54:	e00a      	b.n	8001c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4908      	ldr	r1, [pc, #32]	; (8001c7c <__NVIC_SetPriority+0x50>)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	3b04      	subs	r3, #4
 8001c64:	0112      	lsls	r2, r2, #4
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	440b      	add	r3, r1
 8001c6a:	761a      	strb	r2, [r3, #24]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000e100 	.word	0xe000e100
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f1c3 0307 	rsb	r3, r3, #7
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	bf28      	it	cs
 8001c9e:	2304      	movcs	r3, #4
 8001ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d902      	bls.n	8001cb0 <NVIC_EncodePriority+0x30>
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3b03      	subs	r3, #3
 8001cae:	e000      	b.n	8001cb2 <NVIC_EncodePriority+0x32>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	43d9      	mvns	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	4313      	orrs	r3, r2
         );
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf8:	d301      	bcc.n	8001cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00f      	b.n	8001d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <SysTick_Config+0x40>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d06:	210f      	movs	r1, #15
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	f7ff ff8e 	bl	8001c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <SysTick_Config+0x40>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <SysTick_Config+0x40>)
 8001d18:	2207      	movs	r2, #7
 8001d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	e000e010 	.word	0xe000e010

08001d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff29 	bl	8001b8c <__NVIC_SetPriorityGrouping>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d54:	f7ff ff3e 	bl	8001bd4 <__NVIC_GetPriorityGrouping>
 8001d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	6978      	ldr	r0, [r7, #20]
 8001d60:	f7ff ff8e 	bl	8001c80 <NVIC_EncodePriority>
 8001d64:	4602      	mov	r2, r0
 8001d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff5d 	bl	8001c2c <__NVIC_SetPriority>
}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff31 	bl	8001bf0 <__NVIC_EnableIRQ>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff ffa2 	bl	8001ce8 <SysTick_Config>
 8001da4:	4603      	mov	r3, r0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e011      	b.n	8001de4 <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	795b      	ldrb	r3, [r3, #5]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d105      	bne.n	8001dd6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f003 fe57 	bl	8005a84 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001df8:	f7ff fe9a 	bl	8001b30 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e099      	b.n	8001f3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2202      	movs	r2, #2
 8001e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0201 	bic.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e28:	e00f      	b.n	8001e4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e2a:	f7ff fe81 	bl	8001b30 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	d908      	bls.n	8001e4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2203      	movs	r2, #3
 8001e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e078      	b.n	8001f3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1e8      	bne.n	8001e2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <HAL_DMA_Init+0x158>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d107      	bne.n	8001eb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	4313      	orrs	r3, r2
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f023 0307 	bic.w	r3, r3, #7
 8001eca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d117      	bne.n	8001f0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00e      	beq.n	8001f0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f8bd 	bl	8002070 <DMA_CheckFifoParam>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2240      	movs	r2, #64	; 0x40
 8001f00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e016      	b.n	8001f3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f874 	bl	8002004 <DMA_CalcBaseAndBitshift>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f24:	223f      	movs	r2, #63	; 0x3f
 8001f26:	409a      	lsls	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	f010803f 	.word	0xf010803f

08001f48 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e050      	b.n	8001ffc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d101      	bne.n	8001f6a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001f66:	2302      	movs	r3, #2
 8001f68:	e048      	b.n	8001ffc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0201 	bic.w	r2, r2, #1
 8001f78:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2200      	movs	r2, #0
 8001f88:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2200      	movs	r2, #0
 8001f98:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2221      	movs	r2, #33	; 0x21
 8001fa8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f82a 	bl	8002004 <DMA_CalcBaseAndBitshift>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fdc:	223f      	movs	r2, #63	; 0x3f
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	3b10      	subs	r3, #16
 8002014:	4a14      	ldr	r2, [pc, #80]	; (8002068 <DMA_CalcBaseAndBitshift+0x64>)
 8002016:	fba2 2303 	umull	r2, r3, r2, r3
 800201a:	091b      	lsrs	r3, r3, #4
 800201c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800201e:	4a13      	ldr	r2, [pc, #76]	; (800206c <DMA_CalcBaseAndBitshift+0x68>)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b03      	cmp	r3, #3
 8002030:	d909      	bls.n	8002046 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800203a:	f023 0303 	bic.w	r3, r3, #3
 800203e:	1d1a      	adds	r2, r3, #4
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	659a      	str	r2, [r3, #88]	; 0x58
 8002044:	e007      	b.n	8002056 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800204e:	f023 0303 	bic.w	r3, r3, #3
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800205a:	4618      	mov	r0, r3
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	aaaaaaab 	.word	0xaaaaaaab
 800206c:	080089dc 	.word	0x080089dc

08002070 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d11f      	bne.n	80020ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2b03      	cmp	r3, #3
 800208e:	d855      	bhi.n	800213c <DMA_CheckFifoParam+0xcc>
 8002090:	a201      	add	r2, pc, #4	; (adr r2, 8002098 <DMA_CheckFifoParam+0x28>)
 8002092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002096:	bf00      	nop
 8002098:	080020a9 	.word	0x080020a9
 800209c:	080020bb 	.word	0x080020bb
 80020a0:	080020a9 	.word	0x080020a9
 80020a4:	0800213d 	.word	0x0800213d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d045      	beq.n	8002140 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020b8:	e042      	b.n	8002140 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020c2:	d13f      	bne.n	8002144 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020c8:	e03c      	b.n	8002144 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020d2:	d121      	bne.n	8002118 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d836      	bhi.n	8002148 <DMA_CheckFifoParam+0xd8>
 80020da:	a201      	add	r2, pc, #4	; (adr r2, 80020e0 <DMA_CheckFifoParam+0x70>)
 80020dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e0:	080020f1 	.word	0x080020f1
 80020e4:	080020f7 	.word	0x080020f7
 80020e8:	080020f1 	.word	0x080020f1
 80020ec:	08002109 	.word	0x08002109
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	73fb      	strb	r3, [r7, #15]
      break;
 80020f4:	e02f      	b.n	8002156 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d024      	beq.n	800214c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002106:	e021      	b.n	800214c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002110:	d11e      	bne.n	8002150 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002116:	e01b      	b.n	8002150 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d902      	bls.n	8002124 <DMA_CheckFifoParam+0xb4>
 800211e:	2b03      	cmp	r3, #3
 8002120:	d003      	beq.n	800212a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002122:	e018      	b.n	8002156 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
      break;
 8002128:	e015      	b.n	8002156 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00e      	beq.n	8002154 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
      break;
 800213a:	e00b      	b.n	8002154 <DMA_CheckFifoParam+0xe4>
      break;
 800213c:	bf00      	nop
 800213e:	e00a      	b.n	8002156 <DMA_CheckFifoParam+0xe6>
      break;
 8002140:	bf00      	nop
 8002142:	e008      	b.n	8002156 <DMA_CheckFifoParam+0xe6>
      break;
 8002144:	bf00      	nop
 8002146:	e006      	b.n	8002156 <DMA_CheckFifoParam+0xe6>
      break;
 8002148:	bf00      	nop
 800214a:	e004      	b.n	8002156 <DMA_CheckFifoParam+0xe6>
      break;
 800214c:	bf00      	nop
 800214e:	e002      	b.n	8002156 <DMA_CheckFifoParam+0xe6>
      break;   
 8002150:	bf00      	nop
 8002152:	e000      	b.n	8002156 <DMA_CheckFifoParam+0xe6>
      break;
 8002154:	bf00      	nop
    }
  } 
  
  return status; 
 8002156:	7bfb      	ldrb	r3, [r7, #15]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e03b      	b.n	80021ee <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f003 fc9c 	bl	8005ac8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2202      	movs	r2, #2
 8002194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b4:	f023 0107 	bic.w	r1, r3, #7
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80021ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68d1      	ldr	r1, [r2, #12]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	430b      	orrs	r3, r1
 80021dc:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b086      	sub	sp, #24
 80021fa:	af02      	add	r7, sp, #8
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_DMA2D_Start+0x1c>
 800220e:	2302      	movs	r3, #2
 8002210:	e018      	b.n	8002244 <HAL_DMA2D_Start+0x4e>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2202      	movs	r2, #2
 800221e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	68b9      	ldr	r1, [r7, #8]
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 f989 	bl	8002544 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 0201 	orr.w	r2, r2, #1
 8002240:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d056      	beq.n	8002316 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002268:	f7ff fc62 	bl	8001b30 <HAL_GetTick>
 800226c:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800226e:	e04b      	b.n	8002308 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800227e:	2b00      	cmp	r3, #0
 8002280:	d023      	beq.n	80022ca <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f003 0320 	and.w	r3, r3, #32
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002290:	f043 0202 	orr.w	r2, r3, #2
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a6:	f043 0201 	orr.w	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2221      	movs	r2, #33	; 0x21
 80022b4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2204      	movs	r2, #4
 80022ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e0a5      	b.n	8002416 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d0:	d01a      	beq.n	8002308 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80022d2:	f7ff fc2d 	bl	8001b30 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d302      	bcc.n	80022e8 <HAL_DMA2D_PollForTransfer+0x9c>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10f      	bne.n	8002308 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ec:	f043 0220 	orr.w	r2, r3, #32
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2203      	movs	r2, #3
 80022f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e086      	b.n	8002416 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0ac      	beq.n	8002270 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	f003 0320 	and.w	r3, r3, #32
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d061      	beq.n	80023fc <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002338:	f7ff fbfa 	bl	8001b30 <HAL_GetTick>
 800233c:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800233e:	e056      	b.n	80023ee <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800234e:	2b00      	cmp	r3, #0
 8002350:	d02e      	beq.n	80023b0 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002360:	f043 0204 	orr.w	r2, r3, #4
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002376:	f043 0202 	orr.w	r2, r3, #2
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238c:	f043 0201 	orr.w	r2, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2229      	movs	r2, #41	; 0x29
 800239a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2204      	movs	r2, #4
 80023a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e032      	b.n	8002416 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b6:	d01a      	beq.n	80023ee <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80023b8:	f7ff fbba 	bl	8001b30 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d302      	bcc.n	80023ce <HAL_DMA2D_PollForTransfer+0x182>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10f      	bne.n	80023ee <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d2:	f043 0220 	orr.w	r2, r3, #32
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2203      	movs	r2, #3
 80023de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e013      	b.n	8002416 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0310 	and.w	r3, r3, #16
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0a1      	beq.n	8002340 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2212      	movs	r2, #18
 8002402:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002420:	b480      	push	{r7}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_DMA2D_ConfigLayer+0x20>
 800243c:	2302      	movs	r3, #2
 800243e:	e079      	b.n	8002534 <HAL_DMA2D_ConfigLayer+0x114>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	3318      	adds	r3, #24
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	041b      	lsls	r3, r3, #16
 8002466:	4313      	orrs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800246a:	4b35      	ldr	r3, [pc, #212]	; (8002540 <HAL_DMA2D_ConfigLayer+0x120>)
 800246c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b0a      	cmp	r3, #10
 8002474:	d003      	beq.n	800247e <HAL_DMA2D_ConfigLayer+0x5e>
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b09      	cmp	r3, #9
 800247c:	d107      	bne.n	800248e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4313      	orrs	r3, r2
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	e005      	b.n	800249a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	061b      	lsls	r3, r3, #24
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	4313      	orrs	r3, r2
 8002498:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d120      	bne.n	80024e2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	ea02 0103 	and.w	r1, r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b0a      	cmp	r3, #10
 80024c8:	d003      	beq.n	80024d2 <HAL_DMA2D_ConfigLayer+0xb2>
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b09      	cmp	r3, #9
 80024d0:	d127      	bne.n	8002522 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80024de:	629a      	str	r2, [r3, #40]	; 0x28
 80024e0:	e01f      	b.n	8002522 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	69da      	ldr	r2, [r3, #28]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	ea02 0103 	and.w	r1, r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b0a      	cmp	r3, #10
 800250a:	d003      	beq.n	8002514 <HAL_DMA2D_ConfigLayer+0xf4>
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b09      	cmp	r3, #9
 8002512:	d106      	bne.n	8002522 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002520:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	371c      	adds	r7, #28
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	ff03000f 	.word	0xff03000f

08002544 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002544:	b480      	push	{r7}
 8002546:	b08b      	sub	sp, #44	; 0x2c
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002558:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	041a      	lsls	r2, r3, #16
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002562:	431a      	orrs	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800257c:	d174      	bne.n	8002668 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002584:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800258c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002594:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d108      	bne.n	80025b6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	431a      	orrs	r2, r3
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24
 80025b4:	e053      	b.n	800265e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d106      	bne.n	80025cc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ca:	e048      	b.n	800265e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d111      	bne.n	80025f8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	0cdb      	lsrs	r3, r3, #19
 80025d8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	0a9b      	lsrs	r3, r3, #10
 80025de:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	08db      	lsrs	r3, r3, #3
 80025e4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	02db      	lsls	r3, r3, #11
 80025ee:	4313      	orrs	r3, r2
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
 80025f6:	e032      	b.n	800265e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d117      	bne.n	8002630 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	0fdb      	lsrs	r3, r3, #31
 8002604:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	0cdb      	lsrs	r3, r3, #19
 800260a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	0adb      	lsrs	r3, r3, #11
 8002610:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	08db      	lsrs	r3, r3, #3
 8002616:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	029b      	lsls	r3, r3, #10
 8002620:	431a      	orrs	r2, r3
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	03db      	lsls	r3, r3, #15
 8002626:	4313      	orrs	r3, r2
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	4313      	orrs	r3, r2
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
 800262e:	e016      	b.n	800265e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	0f1b      	lsrs	r3, r3, #28
 8002634:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	0d1b      	lsrs	r3, r3, #20
 800263a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	0b1b      	lsrs	r3, r3, #12
 8002640:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	011a      	lsls	r2, r3, #4
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	021b      	lsls	r3, r3, #8
 8002650:	431a      	orrs	r2, r3
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	031b      	lsls	r3, r3, #12
 8002656:	4313      	orrs	r3, r2
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	4313      	orrs	r3, r2
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002664:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002666:	e003      	b.n	8002670 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	60da      	str	r2, [r3, #12]
}
 8002670:	bf00      	nop
 8002672:	372c      	adds	r7, #44	; 0x2c
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800267c:	b480      	push	{r7}
 800267e:	b089      	sub	sp, #36	; 0x24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800268e:	2300      	movs	r3, #0
 8002690:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
 8002696:	e177      	b.n	8002988 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002698:	2201      	movs	r2, #1
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	f040 8166 	bne.w	8002982 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x4a>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b12      	cmp	r3, #18
 80026c4:	d123      	bne.n	800270e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	08da      	lsrs	r2, r3, #3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3208      	adds	r2, #8
 80026ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	220f      	movs	r2, #15
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	08da      	lsrs	r2, r3, #3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3208      	adds	r2, #8
 8002708:	69b9      	ldr	r1, [r7, #24]
 800270a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	2203      	movs	r2, #3
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 0203 	and.w	r2, r3, #3
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d00b      	beq.n	8002762 <HAL_GPIO_Init+0xe6>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d007      	beq.n	8002762 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002756:	2b11      	cmp	r3, #17
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b12      	cmp	r3, #18
 8002760:	d130      	bne.n	80027c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	2203      	movs	r2, #3
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4013      	ands	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002798:	2201      	movs	r2, #1
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	f003 0201 	and.w	r2, r3, #1
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	2203      	movs	r2, #3
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80c0 	beq.w	8002982 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	4b65      	ldr	r3, [pc, #404]	; (800299c <HAL_GPIO_Init+0x320>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	4a64      	ldr	r2, [pc, #400]	; (800299c <HAL_GPIO_Init+0x320>)
 800280c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002810:	6453      	str	r3, [r2, #68]	; 0x44
 8002812:	4b62      	ldr	r3, [pc, #392]	; (800299c <HAL_GPIO_Init+0x320>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800281e:	4a60      	ldr	r2, [pc, #384]	; (80029a0 <HAL_GPIO_Init+0x324>)
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	089b      	lsrs	r3, r3, #2
 8002824:	3302      	adds	r3, #2
 8002826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	220f      	movs	r2, #15
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a57      	ldr	r2, [pc, #348]	; (80029a4 <HAL_GPIO_Init+0x328>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d037      	beq.n	80028ba <HAL_GPIO_Init+0x23e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a56      	ldr	r2, [pc, #344]	; (80029a8 <HAL_GPIO_Init+0x32c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d031      	beq.n	80028b6 <HAL_GPIO_Init+0x23a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a55      	ldr	r2, [pc, #340]	; (80029ac <HAL_GPIO_Init+0x330>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d02b      	beq.n	80028b2 <HAL_GPIO_Init+0x236>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a54      	ldr	r2, [pc, #336]	; (80029b0 <HAL_GPIO_Init+0x334>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d025      	beq.n	80028ae <HAL_GPIO_Init+0x232>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a53      	ldr	r2, [pc, #332]	; (80029b4 <HAL_GPIO_Init+0x338>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d01f      	beq.n	80028aa <HAL_GPIO_Init+0x22e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a52      	ldr	r2, [pc, #328]	; (80029b8 <HAL_GPIO_Init+0x33c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d019      	beq.n	80028a6 <HAL_GPIO_Init+0x22a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a51      	ldr	r2, [pc, #324]	; (80029bc <HAL_GPIO_Init+0x340>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d013      	beq.n	80028a2 <HAL_GPIO_Init+0x226>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a50      	ldr	r2, [pc, #320]	; (80029c0 <HAL_GPIO_Init+0x344>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00d      	beq.n	800289e <HAL_GPIO_Init+0x222>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4f      	ldr	r2, [pc, #316]	; (80029c4 <HAL_GPIO_Init+0x348>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d007      	beq.n	800289a <HAL_GPIO_Init+0x21e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4e      	ldr	r2, [pc, #312]	; (80029c8 <HAL_GPIO_Init+0x34c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d101      	bne.n	8002896 <HAL_GPIO_Init+0x21a>
 8002892:	2309      	movs	r3, #9
 8002894:	e012      	b.n	80028bc <HAL_GPIO_Init+0x240>
 8002896:	230a      	movs	r3, #10
 8002898:	e010      	b.n	80028bc <HAL_GPIO_Init+0x240>
 800289a:	2308      	movs	r3, #8
 800289c:	e00e      	b.n	80028bc <HAL_GPIO_Init+0x240>
 800289e:	2307      	movs	r3, #7
 80028a0:	e00c      	b.n	80028bc <HAL_GPIO_Init+0x240>
 80028a2:	2306      	movs	r3, #6
 80028a4:	e00a      	b.n	80028bc <HAL_GPIO_Init+0x240>
 80028a6:	2305      	movs	r3, #5
 80028a8:	e008      	b.n	80028bc <HAL_GPIO_Init+0x240>
 80028aa:	2304      	movs	r3, #4
 80028ac:	e006      	b.n	80028bc <HAL_GPIO_Init+0x240>
 80028ae:	2303      	movs	r3, #3
 80028b0:	e004      	b.n	80028bc <HAL_GPIO_Init+0x240>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e002      	b.n	80028bc <HAL_GPIO_Init+0x240>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <HAL_GPIO_Init+0x240>
 80028ba:	2300      	movs	r3, #0
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	f002 0203 	and.w	r2, r2, #3
 80028c2:	0092      	lsls	r2, r2, #2
 80028c4:	4093      	lsls	r3, r2
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028cc:	4934      	ldr	r1, [pc, #208]	; (80029a0 <HAL_GPIO_Init+0x324>)
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	089b      	lsrs	r3, r3, #2
 80028d2:	3302      	adds	r3, #2
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028da:	4b3c      	ldr	r3, [pc, #240]	; (80029cc <HAL_GPIO_Init+0x350>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028fe:	4a33      	ldr	r2, [pc, #204]	; (80029cc <HAL_GPIO_Init+0x350>)
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002904:	4b31      	ldr	r3, [pc, #196]	; (80029cc <HAL_GPIO_Init+0x350>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002928:	4a28      	ldr	r2, [pc, #160]	; (80029cc <HAL_GPIO_Init+0x350>)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800292e:	4b27      	ldr	r3, [pc, #156]	; (80029cc <HAL_GPIO_Init+0x350>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002952:	4a1e      	ldr	r2, [pc, #120]	; (80029cc <HAL_GPIO_Init+0x350>)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002958:	4b1c      	ldr	r3, [pc, #112]	; (80029cc <HAL_GPIO_Init+0x350>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800297c:	4a13      	ldr	r2, [pc, #76]	; (80029cc <HAL_GPIO_Init+0x350>)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3301      	adds	r3, #1
 8002986:	61fb      	str	r3, [r7, #28]
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	2b0f      	cmp	r3, #15
 800298c:	f67f ae84 	bls.w	8002698 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002990:	bf00      	nop
 8002992:	3724      	adds	r7, #36	; 0x24
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	40023800 	.word	0x40023800
 80029a0:	40013800 	.word	0x40013800
 80029a4:	40020000 	.word	0x40020000
 80029a8:	40020400 	.word	0x40020400
 80029ac:	40020800 	.word	0x40020800
 80029b0:	40020c00 	.word	0x40020c00
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40021400 	.word	0x40021400
 80029bc:	40021800 	.word	0x40021800
 80029c0:	40021c00 	.word	0x40021c00
 80029c4:	40022000 	.word	0x40022000
 80029c8:	40022400 	.word	0x40022400
 80029cc:	40013c00 	.word	0x40013c00

080029d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	e0d9      	b.n	8002ba0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029ec:	2201      	movs	r2, #1
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4013      	ands	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	f040 80c9 	bne.w	8002b9a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002a08:	4a6a      	ldr	r2, [pc, #424]	; (8002bb4 <HAL_GPIO_DeInit+0x1e4>)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	089b      	lsrs	r3, r3, #2
 8002a0e:	3302      	adds	r3, #2
 8002a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a14:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	220f      	movs	r2, #15
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	4013      	ands	r3, r2
 8002a28:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a62      	ldr	r2, [pc, #392]	; (8002bb8 <HAL_GPIO_DeInit+0x1e8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d037      	beq.n	8002aa2 <HAL_GPIO_DeInit+0xd2>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a61      	ldr	r2, [pc, #388]	; (8002bbc <HAL_GPIO_DeInit+0x1ec>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d031      	beq.n	8002a9e <HAL_GPIO_DeInit+0xce>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a60      	ldr	r2, [pc, #384]	; (8002bc0 <HAL_GPIO_DeInit+0x1f0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d02b      	beq.n	8002a9a <HAL_GPIO_DeInit+0xca>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a5f      	ldr	r2, [pc, #380]	; (8002bc4 <HAL_GPIO_DeInit+0x1f4>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d025      	beq.n	8002a96 <HAL_GPIO_DeInit+0xc6>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a5e      	ldr	r2, [pc, #376]	; (8002bc8 <HAL_GPIO_DeInit+0x1f8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d01f      	beq.n	8002a92 <HAL_GPIO_DeInit+0xc2>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a5d      	ldr	r2, [pc, #372]	; (8002bcc <HAL_GPIO_DeInit+0x1fc>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d019      	beq.n	8002a8e <HAL_GPIO_DeInit+0xbe>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a5c      	ldr	r2, [pc, #368]	; (8002bd0 <HAL_GPIO_DeInit+0x200>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d013      	beq.n	8002a8a <HAL_GPIO_DeInit+0xba>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a5b      	ldr	r2, [pc, #364]	; (8002bd4 <HAL_GPIO_DeInit+0x204>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d00d      	beq.n	8002a86 <HAL_GPIO_DeInit+0xb6>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a5a      	ldr	r2, [pc, #360]	; (8002bd8 <HAL_GPIO_DeInit+0x208>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d007      	beq.n	8002a82 <HAL_GPIO_DeInit+0xb2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a59      	ldr	r2, [pc, #356]	; (8002bdc <HAL_GPIO_DeInit+0x20c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d101      	bne.n	8002a7e <HAL_GPIO_DeInit+0xae>
 8002a7a:	2309      	movs	r3, #9
 8002a7c:	e012      	b.n	8002aa4 <HAL_GPIO_DeInit+0xd4>
 8002a7e:	230a      	movs	r3, #10
 8002a80:	e010      	b.n	8002aa4 <HAL_GPIO_DeInit+0xd4>
 8002a82:	2308      	movs	r3, #8
 8002a84:	e00e      	b.n	8002aa4 <HAL_GPIO_DeInit+0xd4>
 8002a86:	2307      	movs	r3, #7
 8002a88:	e00c      	b.n	8002aa4 <HAL_GPIO_DeInit+0xd4>
 8002a8a:	2306      	movs	r3, #6
 8002a8c:	e00a      	b.n	8002aa4 <HAL_GPIO_DeInit+0xd4>
 8002a8e:	2305      	movs	r3, #5
 8002a90:	e008      	b.n	8002aa4 <HAL_GPIO_DeInit+0xd4>
 8002a92:	2304      	movs	r3, #4
 8002a94:	e006      	b.n	8002aa4 <HAL_GPIO_DeInit+0xd4>
 8002a96:	2303      	movs	r3, #3
 8002a98:	e004      	b.n	8002aa4 <HAL_GPIO_DeInit+0xd4>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e002      	b.n	8002aa4 <HAL_GPIO_DeInit+0xd4>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <HAL_GPIO_DeInit+0xd4>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	f002 0203 	and.w	r2, r2, #3
 8002aaa:	0092      	lsls	r2, r2, #2
 8002aac:	4093      	lsls	r3, r2
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d132      	bne.n	8002b1a <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	220f      	movs	r2, #15
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002ac4:	4a3b      	ldr	r2, [pc, #236]	; (8002bb4 <HAL_GPIO_DeInit+0x1e4>)
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	089b      	lsrs	r3, r3, #2
 8002aca:	3302      	adds	r3, #2
 8002acc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	4837      	ldr	r0, [pc, #220]	; (8002bb4 <HAL_GPIO_DeInit+0x1e4>)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	089b      	lsrs	r3, r3, #2
 8002ada:	400a      	ands	r2, r1
 8002adc:	3302      	adds	r3, #2
 8002ade:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002ae2:	4b3f      	ldr	r3, [pc, #252]	; (8002be0 <HAL_GPIO_DeInit+0x210>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	493d      	ldr	r1, [pc, #244]	; (8002be0 <HAL_GPIO_DeInit+0x210>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002af0:	4b3b      	ldr	r3, [pc, #236]	; (8002be0 <HAL_GPIO_DeInit+0x210>)
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	43db      	mvns	r3, r3
 8002af8:	4939      	ldr	r1, [pc, #228]	; (8002be0 <HAL_GPIO_DeInit+0x210>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002afe:	4b38      	ldr	r3, [pc, #224]	; (8002be0 <HAL_GPIO_DeInit+0x210>)
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	4936      	ldr	r1, [pc, #216]	; (8002be0 <HAL_GPIO_DeInit+0x210>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002b0c:	4b34      	ldr	r3, [pc, #208]	; (8002be0 <HAL_GPIO_DeInit+0x210>)
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	4932      	ldr	r1, [pc, #200]	; (8002be0 <HAL_GPIO_DeInit+0x210>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	2103      	movs	r1, #3
 8002b24:	fa01 f303 	lsl.w	r3, r1, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	08da      	lsrs	r2, r3, #3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3208      	adds	r2, #8
 8002b38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	220f      	movs	r2, #15
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	08d2      	lsrs	r2, r2, #3
 8002b50:	4019      	ands	r1, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3208      	adds	r2, #8
 8002b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	2103      	movs	r1, #3
 8002b64:	fa01 f303 	lsl.w	r3, r1, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	2101      	movs	r1, #1
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	401a      	ands	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	2103      	movs	r1, #3
 8002b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	401a      	ands	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2b0f      	cmp	r3, #15
 8002ba4:	f67f af22 	bls.w	80029ec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002ba8:	bf00      	nop
 8002baa:	371c      	adds	r7, #28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	40013800 	.word	0x40013800
 8002bb8:	40020000 	.word	0x40020000
 8002bbc:	40020400 	.word	0x40020400
 8002bc0:	40020800 	.word	0x40020800
 8002bc4:	40020c00 	.word	0x40020c00
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40021400 	.word	0x40021400
 8002bd0:	40021800 	.word	0x40021800
 8002bd4:	40021c00 	.word	0x40021c00
 8002bd8:	40022000 	.word	0x40022000
 8002bdc:	40022400 	.word	0x40022400
 8002be0:	40013c00 	.word	0x40013c00

08002be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	807b      	strh	r3, [r7, #2]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bf4:	787b      	ldrb	r3, [r7, #1]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bfa:	887a      	ldrh	r2, [r7, #2]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c00:	e003      	b.n	8002c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c02:	887b      	ldrh	r3, [r7, #2]
 8002c04:	041a      	lsls	r2, r3, #16
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	619a      	str	r2, [r3, #24]
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d006      	beq.n	8002c3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c2e:	4a05      	ldr	r2, [pc, #20]	; (8002c44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c34:	88fb      	ldrh	r3, [r7, #6]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 f806 	bl	8002c48 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40013c00 	.word	0x40013c00

08002c48 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e10f      	b.n	8002e92 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f002 ff40 	bl	8005b0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2224      	movs	r2, #36	; 0x24
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0201 	bic.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ca4:	f001 f8a8 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 8002ca8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4a7b      	ldr	r2, [pc, #492]	; (8002e9c <HAL_I2C_Init+0x23c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d807      	bhi.n	8002cc4 <HAL_I2C_Init+0x64>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a7a      	ldr	r2, [pc, #488]	; (8002ea0 <HAL_I2C_Init+0x240>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	bf94      	ite	ls
 8002cbc:	2301      	movls	r3, #1
 8002cbe:	2300      	movhi	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	e006      	b.n	8002cd2 <HAL_I2C_Init+0x72>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4a77      	ldr	r2, [pc, #476]	; (8002ea4 <HAL_I2C_Init+0x244>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	bf94      	ite	ls
 8002ccc:	2301      	movls	r3, #1
 8002cce:	2300      	movhi	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e0db      	b.n	8002e92 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4a72      	ldr	r2, [pc, #456]	; (8002ea8 <HAL_I2C_Init+0x248>)
 8002cde:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce2:	0c9b      	lsrs	r3, r3, #18
 8002ce4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	4a64      	ldr	r2, [pc, #400]	; (8002e9c <HAL_I2C_Init+0x23c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d802      	bhi.n	8002d14 <HAL_I2C_Init+0xb4>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	3301      	adds	r3, #1
 8002d12:	e009      	b.n	8002d28 <HAL_I2C_Init+0xc8>
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d1a:	fb02 f303 	mul.w	r3, r2, r3
 8002d1e:	4a63      	ldr	r2, [pc, #396]	; (8002eac <HAL_I2C_Init+0x24c>)
 8002d20:	fba2 2303 	umull	r2, r3, r2, r3
 8002d24:	099b      	lsrs	r3, r3, #6
 8002d26:	3301      	adds	r3, #1
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	4956      	ldr	r1, [pc, #344]	; (8002e9c <HAL_I2C_Init+0x23c>)
 8002d44:	428b      	cmp	r3, r1
 8002d46:	d80d      	bhi.n	8002d64 <HAL_I2C_Init+0x104>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1e59      	subs	r1, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d56:	3301      	adds	r3, #1
 8002d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	bf38      	it	cc
 8002d60:	2304      	movcc	r3, #4
 8002d62:	e04f      	b.n	8002e04 <HAL_I2C_Init+0x1a4>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d111      	bne.n	8002d90 <HAL_I2C_Init+0x130>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	1e58      	subs	r0, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6859      	ldr	r1, [r3, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	440b      	add	r3, r1
 8002d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d7e:	3301      	adds	r3, #1
 8002d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bf0c      	ite	eq
 8002d88:	2301      	moveq	r3, #1
 8002d8a:	2300      	movne	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	e012      	b.n	8002db6 <HAL_I2C_Init+0x156>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	1e58      	subs	r0, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6859      	ldr	r1, [r3, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	0099      	lsls	r1, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da6:	3301      	adds	r3, #1
 8002da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	bf0c      	ite	eq
 8002db0:	2301      	moveq	r3, #1
 8002db2:	2300      	movne	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_I2C_Init+0x15e>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e022      	b.n	8002e04 <HAL_I2C_Init+0x1a4>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10e      	bne.n	8002de4 <HAL_I2C_Init+0x184>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	1e58      	subs	r0, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6859      	ldr	r1, [r3, #4]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	440b      	add	r3, r1
 8002dd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd8:	3301      	adds	r3, #1
 8002dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002de2:	e00f      	b.n	8002e04 <HAL_I2C_Init+0x1a4>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1e58      	subs	r0, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	0099      	lsls	r1, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	6809      	ldr	r1, [r1, #0]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69da      	ldr	r2, [r3, #28]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6911      	ldr	r1, [r2, #16]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68d2      	ldr	r2, [r2, #12]
 8002e3e:	4311      	orrs	r1, r2
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	430b      	orrs	r3, r1
 8002e46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	000186a0 	.word	0x000186a0
 8002ea0:	001e847f 	.word	0x001e847f
 8002ea4:	003d08ff 	.word	0x003d08ff
 8002ea8:	431bde83 	.word	0x431bde83
 8002eac:	10624dd3 	.word	0x10624dd3

08002eb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b20      	cmp	r3, #32
 8002ec4:	d129      	bne.n	8002f1a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2224      	movs	r2, #36	; 0x24
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0201 	bic.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0210 	bic.w	r2, r2, #16
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f042 0201 	orr.w	r2, r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2220      	movs	r2, #32
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	e000      	b.n	8002f1c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002f1a:	2302      	movs	r3, #2
  }
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	d12a      	bne.n	8002f98 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2224      	movs	r2, #36	; 0x24
 8002f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0201 	bic.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002f62:	89fb      	ldrh	r3, [r7, #14]
 8002f64:	f023 030f 	bic.w	r3, r3, #15
 8002f68:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	89fb      	ldrh	r3, [r7, #14]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	89fa      	ldrh	r2, [r7, #14]
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	e000      	b.n	8002f9a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002f98:	2302      	movs	r3, #2
  }
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e0bf      	b.n	800313a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f002 fe06 	bl	8005be0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699a      	ldr	r2, [r3, #24]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002fea:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6999      	ldr	r1, [r3, #24]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003000:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6899      	ldr	r1, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	4b4a      	ldr	r3, [pc, #296]	; (8003144 <HAL_LTDC_Init+0x19c>)
 800301c:	400b      	ands	r3, r1
 800301e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	041b      	lsls	r3, r3, #16
 8003026:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6899      	ldr	r1, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699a      	ldr	r2, [r3, #24]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68d9      	ldr	r1, [r3, #12]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	4b3e      	ldr	r3, [pc, #248]	; (8003144 <HAL_LTDC_Init+0x19c>)
 800304a:	400b      	ands	r3, r1
 800304c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	041b      	lsls	r3, r3, #16
 8003054:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68d9      	ldr	r1, [r3, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1a      	ldr	r2, [r3, #32]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6919      	ldr	r1, [r3, #16]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	4b33      	ldr	r3, [pc, #204]	; (8003144 <HAL_LTDC_Init+0x19c>)
 8003078:	400b      	ands	r3, r1
 800307a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	041b      	lsls	r3, r3, #16
 8003082:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6919      	ldr	r1, [r3, #16]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6959      	ldr	r1, [r3, #20]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	4b27      	ldr	r3, [pc, #156]	; (8003144 <HAL_LTDC_Init+0x19c>)
 80030a6:	400b      	ands	r3, r1
 80030a8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	041b      	lsls	r3, r3, #16
 80030b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6959      	ldr	r1, [r3, #20]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ce:	021b      	lsls	r3, r3, #8
 80030d0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80030d8:	041b      	lsls	r3, r3, #16
 80030da:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80030ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0206 	orr.w	r2, r2, #6
 8003116:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699a      	ldr	r2, [r3, #24]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	f000f800 	.word	0xf000f800

08003148 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003148:	b5b0      	push	{r4, r5, r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_LTDC_ConfigLayer+0x1a>
 800315e:	2302      	movs	r3, #2
 8003160:	e02c      	b.n	80031bc <HAL_LTDC_ConfigLayer+0x74>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2202      	movs	r2, #2
 800316e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2134      	movs	r1, #52	; 0x34
 8003178:	fb01 f303 	mul.w	r3, r1, r3
 800317c:	4413      	add	r3, r2
 800317e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	4614      	mov	r4, r2
 8003186:	461d      	mov	r5, r3
 8003188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800318a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800318c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800318e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003194:	682b      	ldr	r3, [r5, #0]
 8003196:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	68b9      	ldr	r1, [r7, #8]
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f83b 	bl	8003218 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2201      	movs	r2, #1
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bdb0      	pop	{r4, r5, r7, pc}

080031c4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <HAL_LTDC_EnableDither+0x16>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e016      	b.n	8003208 <HAL_LTDC_EnableDither+0x44>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2202      	movs	r2, #2
 80031e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80031ea:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <HAL_LTDC_EnableDither+0x50>)
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	4a09      	ldr	r2, [pc, #36]	; (8003214 <HAL_LTDC_EnableDither+0x50>)
 80031f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	40016800 	.word	0x40016800

08003218 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003218:	b480      	push	{r7}
 800321a:	b089      	sub	sp, #36	; 0x24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	0c1b      	lsrs	r3, r3, #16
 8003230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003234:	4413      	add	r3, r2
 8003236:	041b      	lsls	r3, r3, #16
 8003238:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	461a      	mov	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	01db      	lsls	r3, r3, #7
 8003244:	4413      	add	r3, r2
 8003246:	3384      	adds	r3, #132	; 0x84
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	6812      	ldr	r2, [r2, #0]
 800324e:	4611      	mov	r1, r2
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	01d2      	lsls	r2, r2, #7
 8003254:	440a      	add	r2, r1
 8003256:	3284      	adds	r2, #132	; 0x84
 8003258:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800325c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	0c1b      	lsrs	r3, r3, #16
 800326a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800326e:	4413      	add	r3, r2
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4619      	mov	r1, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	01db      	lsls	r3, r3, #7
 800327c:	440b      	add	r3, r1
 800327e:	3384      	adds	r3, #132	; 0x84
 8003280:	4619      	mov	r1, r3
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	4313      	orrs	r3, r2
 8003286:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003296:	4413      	add	r3, r2
 8003298:	041b      	lsls	r3, r3, #16
 800329a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	01db      	lsls	r3, r3, #7
 80032a6:	4413      	add	r3, r2
 80032a8:	3384      	adds	r3, #132	; 0x84
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	4611      	mov	r1, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	01d2      	lsls	r2, r2, #7
 80032b6:	440a      	add	r2, r1
 80032b8:	3284      	adds	r2, #132	; 0x84
 80032ba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80032be:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032ce:	4413      	add	r3, r2
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4619      	mov	r1, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	01db      	lsls	r3, r3, #7
 80032dc:	440b      	add	r3, r1
 80032de:	3384      	adds	r3, #132	; 0x84
 80032e0:	4619      	mov	r1, r3
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	461a      	mov	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	01db      	lsls	r3, r3, #7
 80032f2:	4413      	add	r3, r2
 80032f4:	3384      	adds	r3, #132	; 0x84
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	4611      	mov	r1, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	01d2      	lsls	r2, r2, #7
 8003302:	440a      	add	r2, r1
 8003304:	3284      	adds	r2, #132	; 0x84
 8003306:	f023 0307 	bic.w	r3, r3, #7
 800330a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	461a      	mov	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	01db      	lsls	r3, r3, #7
 8003316:	4413      	add	r3, r2
 8003318:	3384      	adds	r3, #132	; 0x84
 800331a:	461a      	mov	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003328:	021b      	lsls	r3, r3, #8
 800332a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003332:	041b      	lsls	r3, r3, #16
 8003334:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	061b      	lsls	r3, r3, #24
 800333c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	01db      	lsls	r3, r3, #7
 8003348:	4413      	add	r3, r2
 800334a:	3384      	adds	r3, #132	; 0x84
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	01db      	lsls	r3, r3, #7
 8003358:	4413      	add	r3, r2
 800335a:	3384      	adds	r3, #132	; 0x84
 800335c:	461a      	mov	r2, r3
 800335e:	2300      	movs	r3, #0
 8003360:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003368:	461a      	mov	r2, r3
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	431a      	orrs	r2, r3
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	431a      	orrs	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4619      	mov	r1, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	01db      	lsls	r3, r3, #7
 800337c:	440b      	add	r3, r1
 800337e:	3384      	adds	r3, #132	; 0x84
 8003380:	4619      	mov	r1, r3
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	4313      	orrs	r3, r2
 8003386:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	461a      	mov	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	01db      	lsls	r3, r3, #7
 8003392:	4413      	add	r3, r2
 8003394:	3384      	adds	r3, #132	; 0x84
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	4611      	mov	r1, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	01d2      	lsls	r2, r2, #7
 80033a2:	440a      	add	r2, r1
 80033a4:	3284      	adds	r2, #132	; 0x84
 80033a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033aa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	01db      	lsls	r3, r3, #7
 80033b6:	4413      	add	r3, r2
 80033b8:	3384      	adds	r3, #132	; 0x84
 80033ba:	461a      	mov	r2, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	01db      	lsls	r3, r3, #7
 80033cc:	4413      	add	r3, r2
 80033ce:	3384      	adds	r3, #132	; 0x84
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	6812      	ldr	r2, [r2, #0]
 80033d6:	4611      	mov	r1, r2
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	01d2      	lsls	r2, r2, #7
 80033dc:	440a      	add	r2, r1
 80033de:	3284      	adds	r2, #132	; 0x84
 80033e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033e4:	f023 0307 	bic.w	r3, r3, #7
 80033e8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	69da      	ldr	r2, [r3, #28]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	68f9      	ldr	r1, [r7, #12]
 80033f4:	6809      	ldr	r1, [r1, #0]
 80033f6:	4608      	mov	r0, r1
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	01c9      	lsls	r1, r1, #7
 80033fc:	4401      	add	r1, r0
 80033fe:	3184      	adds	r1, #132	; 0x84
 8003400:	4313      	orrs	r3, r2
 8003402:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	461a      	mov	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	01db      	lsls	r3, r3, #7
 800340e:	4413      	add	r3, r2
 8003410:	3384      	adds	r3, #132	; 0x84
 8003412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	01db      	lsls	r3, r3, #7
 800341e:	4413      	add	r3, r2
 8003420:	3384      	adds	r3, #132	; 0x84
 8003422:	461a      	mov	r2, r3
 8003424:	2300      	movs	r3, #0
 8003426:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	01db      	lsls	r3, r3, #7
 8003432:	4413      	add	r3, r2
 8003434:	3384      	adds	r3, #132	; 0x84
 8003436:	461a      	mov	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d102      	bne.n	800344c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003446:	2304      	movs	r3, #4
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	e01b      	b.n	8003484 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d102      	bne.n	800345a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003454:	2303      	movs	r3, #3
 8003456:	61fb      	str	r3, [r7, #28]
 8003458:	e014      	b.n	8003484 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	2b04      	cmp	r3, #4
 8003460:	d00b      	beq.n	800347a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003466:	2b02      	cmp	r3, #2
 8003468:	d007      	beq.n	800347a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800346e:	2b03      	cmp	r3, #3
 8003470:	d003      	beq.n	800347a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003476:	2b07      	cmp	r3, #7
 8003478:	d102      	bne.n	8003480 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800347a:	2302      	movs	r3, #2
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	e001      	b.n	8003484 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003480:	2301      	movs	r3, #1
 8003482:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	01db      	lsls	r3, r3, #7
 800348e:	4413      	add	r3, r2
 8003490:	3384      	adds	r3, #132	; 0x84
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	6812      	ldr	r2, [r2, #0]
 8003498:	4611      	mov	r1, r2
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	01d2      	lsls	r2, r2, #7
 800349e:	440a      	add	r2, r1
 80034a0:	3284      	adds	r2, #132	; 0x84
 80034a2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80034a6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	69fa      	ldr	r2, [r7, #28]
 80034ae:	fb02 f303 	mul.w	r3, r2, r3
 80034b2:	041a      	lsls	r2, r3, #16
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	6859      	ldr	r1, [r3, #4]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	1acb      	subs	r3, r1, r3
 80034be:	69f9      	ldr	r1, [r7, #28]
 80034c0:	fb01 f303 	mul.w	r3, r1, r3
 80034c4:	3303      	adds	r3, #3
 80034c6:	68f9      	ldr	r1, [r7, #12]
 80034c8:	6809      	ldr	r1, [r1, #0]
 80034ca:	4608      	mov	r0, r1
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	01c9      	lsls	r1, r1, #7
 80034d0:	4401      	add	r1, r0
 80034d2:	3184      	adds	r1, #132	; 0x84
 80034d4:	4313      	orrs	r3, r2
 80034d6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	461a      	mov	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	01db      	lsls	r3, r3, #7
 80034e2:	4413      	add	r3, r2
 80034e4:	3384      	adds	r3, #132	; 0x84
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	6812      	ldr	r2, [r2, #0]
 80034ec:	4611      	mov	r1, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	01d2      	lsls	r2, r2, #7
 80034f2:	440a      	add	r2, r1
 80034f4:	3284      	adds	r2, #132	; 0x84
 80034f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80034fa:	f023 0307 	bic.w	r3, r3, #7
 80034fe:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	461a      	mov	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	01db      	lsls	r3, r3, #7
 800350a:	4413      	add	r3, r2
 800350c:	3384      	adds	r3, #132	; 0x84
 800350e:	461a      	mov	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	01db      	lsls	r3, r3, #7
 8003520:	4413      	add	r3, r2
 8003522:	3384      	adds	r3, #132	; 0x84
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	4611      	mov	r1, r2
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	01d2      	lsls	r2, r2, #7
 8003530:	440a      	add	r2, r1
 8003532:	3284      	adds	r2, #132	; 0x84
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	6013      	str	r3, [r2, #0]
}
 800353a:	bf00      	nop
 800353c:	3724      	adds	r7, #36	; 0x24
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
	...

08003548 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	4a1f      	ldr	r2, [pc, #124]	; (80035d8 <HAL_PWREx_EnableOverDrive+0x90>)
 800355c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003560:	6413      	str	r3, [r2, #64]	; 0x40
 8003562:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800356e:	4b1b      	ldr	r3, [pc, #108]	; (80035dc <HAL_PWREx_EnableOverDrive+0x94>)
 8003570:	2201      	movs	r2, #1
 8003572:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003574:	f7fe fadc 	bl	8001b30 <HAL_GetTick>
 8003578:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800357a:	e009      	b.n	8003590 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800357c:	f7fe fad8 	bl	8001b30 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800358a:	d901      	bls.n	8003590 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e01f      	b.n	80035d0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003590:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800359c:	d1ee      	bne.n	800357c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800359e:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035a4:	f7fe fac4 	bl	8001b30 <HAL_GetTick>
 80035a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035aa:	e009      	b.n	80035c0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035ac:	f7fe fac0 	bl	8001b30 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035ba:	d901      	bls.n	80035c0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e007      	b.n	80035d0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035c0:	4b07      	ldr	r3, [pc, #28]	; (80035e0 <HAL_PWREx_EnableOverDrive+0x98>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035cc:	d1ee      	bne.n	80035ac <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40023800 	.word	0x40023800
 80035dc:	420e0040 	.word	0x420e0040
 80035e0:	40007000 	.word	0x40007000
 80035e4:	420e0044 	.word	0x420e0044

080035e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e22d      	b.n	8003a56 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d075      	beq.n	80036f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003606:	4ba3      	ldr	r3, [pc, #652]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	2b04      	cmp	r3, #4
 8003610:	d00c      	beq.n	800362c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003612:	4ba0      	ldr	r3, [pc, #640]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800361a:	2b08      	cmp	r3, #8
 800361c:	d112      	bne.n	8003644 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800361e:	4b9d      	ldr	r3, [pc, #628]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800362a:	d10b      	bne.n	8003644 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800362c:	4b99      	ldr	r3, [pc, #612]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d05b      	beq.n	80036f0 <HAL_RCC_OscConfig+0x108>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d157      	bne.n	80036f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e208      	b.n	8003a56 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800364c:	d106      	bne.n	800365c <HAL_RCC_OscConfig+0x74>
 800364e:	4b91      	ldr	r3, [pc, #580]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a90      	ldr	r2, [pc, #576]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e01d      	b.n	8003698 <HAL_RCC_OscConfig+0xb0>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0x98>
 8003666:	4b8b      	ldr	r3, [pc, #556]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a8a      	ldr	r2, [pc, #552]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 800366c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	4b88      	ldr	r3, [pc, #544]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a87      	ldr	r2, [pc, #540]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	e00b      	b.n	8003698 <HAL_RCC_OscConfig+0xb0>
 8003680:	4b84      	ldr	r3, [pc, #528]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a83      	ldr	r2, [pc, #524]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	4b81      	ldr	r3, [pc, #516]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a80      	ldr	r2, [pc, #512]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d013      	beq.n	80036c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a0:	f7fe fa46 	bl	8001b30 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036a8:	f7fe fa42 	bl	8001b30 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b64      	cmp	r3, #100	; 0x64
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e1cd      	b.n	8003a56 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ba:	4b76      	ldr	r3, [pc, #472]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0xc0>
 80036c6:	e014      	b.n	80036f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c8:	f7fe fa32 	bl	8001b30 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036d0:	f7fe fa2e 	bl	8001b30 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b64      	cmp	r3, #100	; 0x64
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e1b9      	b.n	8003a56 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e2:	4b6c      	ldr	r3, [pc, #432]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0xe8>
 80036ee:	e000      	b.n	80036f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d063      	beq.n	80037c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036fe:	4b65      	ldr	r3, [pc, #404]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00b      	beq.n	8003722 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800370a:	4b62      	ldr	r3, [pc, #392]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003712:	2b08      	cmp	r3, #8
 8003714:	d11c      	bne.n	8003750 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003716:	4b5f      	ldr	r3, [pc, #380]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d116      	bne.n	8003750 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003722:	4b5c      	ldr	r3, [pc, #368]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <HAL_RCC_OscConfig+0x152>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d001      	beq.n	800373a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e18d      	b.n	8003a56 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373a:	4b56      	ldr	r3, [pc, #344]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	4952      	ldr	r1, [pc, #328]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374e:	e03a      	b.n	80037c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d020      	beq.n	800379a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003758:	4b4f      	ldr	r3, [pc, #316]	; (8003898 <HAL_RCC_OscConfig+0x2b0>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375e:	f7fe f9e7 	bl	8001b30 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003766:	f7fe f9e3 	bl	8001b30 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e16e      	b.n	8003a56 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003778:	4b46      	ldr	r3, [pc, #280]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003784:	4b43      	ldr	r3, [pc, #268]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4940      	ldr	r1, [pc, #256]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003794:	4313      	orrs	r3, r2
 8003796:	600b      	str	r3, [r1, #0]
 8003798:	e015      	b.n	80037c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800379a:	4b3f      	ldr	r3, [pc, #252]	; (8003898 <HAL_RCC_OscConfig+0x2b0>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a0:	f7fe f9c6 	bl	8001b30 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a8:	f7fe f9c2 	bl	8001b30 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e14d      	b.n	8003a56 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ba:	4b36      	ldr	r3, [pc, #216]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d030      	beq.n	8003834 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d016      	beq.n	8003808 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037da:	4b30      	ldr	r3, [pc, #192]	; (800389c <HAL_RCC_OscConfig+0x2b4>)
 80037dc:	2201      	movs	r2, #1
 80037de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e0:	f7fe f9a6 	bl	8001b30 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e8:	f7fe f9a2 	bl	8001b30 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e12d      	b.n	8003a56 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037fa:	4b26      	ldr	r3, [pc, #152]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 80037fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0x200>
 8003806:	e015      	b.n	8003834 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003808:	4b24      	ldr	r3, [pc, #144]	; (800389c <HAL_RCC_OscConfig+0x2b4>)
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800380e:	f7fe f98f 	bl	8001b30 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003816:	f7fe f98b 	bl	8001b30 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e116      	b.n	8003a56 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003828:	4b1a      	ldr	r3, [pc, #104]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 800382a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1f0      	bne.n	8003816 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80a0 	beq.w	8003982 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003842:	2300      	movs	r3, #0
 8003844:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003846:	4b13      	ldr	r3, [pc, #76]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10f      	bne.n	8003872 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	4a0e      	ldr	r2, [pc, #56]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 800385c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003860:	6413      	str	r3, [r2, #64]	; 0x40
 8003862:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800386e:	2301      	movs	r3, #1
 8003870:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003872:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <HAL_RCC_OscConfig+0x2b8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387a:	2b00      	cmp	r3, #0
 800387c:	d121      	bne.n	80038c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800387e:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <HAL_RCC_OscConfig+0x2b8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a07      	ldr	r2, [pc, #28]	; (80038a0 <HAL_RCC_OscConfig+0x2b8>)
 8003884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800388a:	f7fe f951 	bl	8001b30 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003890:	e011      	b.n	80038b6 <HAL_RCC_OscConfig+0x2ce>
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800
 8003898:	42470000 	.word	0x42470000
 800389c:	42470e80 	.word	0x42470e80
 80038a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a4:	f7fe f944 	bl	8001b30 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e0cf      	b.n	8003a56 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b6:	4b6a      	ldr	r3, [pc, #424]	; (8003a60 <HAL_RCC_OscConfig+0x478>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d106      	bne.n	80038d8 <HAL_RCC_OscConfig+0x2f0>
 80038ca:	4b66      	ldr	r3, [pc, #408]	; (8003a64 <HAL_RCC_OscConfig+0x47c>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ce:	4a65      	ldr	r2, [pc, #404]	; (8003a64 <HAL_RCC_OscConfig+0x47c>)
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	6713      	str	r3, [r2, #112]	; 0x70
 80038d6:	e01c      	b.n	8003912 <HAL_RCC_OscConfig+0x32a>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	2b05      	cmp	r3, #5
 80038de:	d10c      	bne.n	80038fa <HAL_RCC_OscConfig+0x312>
 80038e0:	4b60      	ldr	r3, [pc, #384]	; (8003a64 <HAL_RCC_OscConfig+0x47c>)
 80038e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e4:	4a5f      	ldr	r2, [pc, #380]	; (8003a64 <HAL_RCC_OscConfig+0x47c>)
 80038e6:	f043 0304 	orr.w	r3, r3, #4
 80038ea:	6713      	str	r3, [r2, #112]	; 0x70
 80038ec:	4b5d      	ldr	r3, [pc, #372]	; (8003a64 <HAL_RCC_OscConfig+0x47c>)
 80038ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f0:	4a5c      	ldr	r2, [pc, #368]	; (8003a64 <HAL_RCC_OscConfig+0x47c>)
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	6713      	str	r3, [r2, #112]	; 0x70
 80038f8:	e00b      	b.n	8003912 <HAL_RCC_OscConfig+0x32a>
 80038fa:	4b5a      	ldr	r3, [pc, #360]	; (8003a64 <HAL_RCC_OscConfig+0x47c>)
 80038fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fe:	4a59      	ldr	r2, [pc, #356]	; (8003a64 <HAL_RCC_OscConfig+0x47c>)
 8003900:	f023 0301 	bic.w	r3, r3, #1
 8003904:	6713      	str	r3, [r2, #112]	; 0x70
 8003906:	4b57      	ldr	r3, [pc, #348]	; (8003a64 <HAL_RCC_OscConfig+0x47c>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390a:	4a56      	ldr	r2, [pc, #344]	; (8003a64 <HAL_RCC_OscConfig+0x47c>)
 800390c:	f023 0304 	bic.w	r3, r3, #4
 8003910:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d015      	beq.n	8003946 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391a:	f7fe f909 	bl	8001b30 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003920:	e00a      	b.n	8003938 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003922:	f7fe f905 	bl	8001b30 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003930:	4293      	cmp	r3, r2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e08e      	b.n	8003a56 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003938:	4b4a      	ldr	r3, [pc, #296]	; (8003a64 <HAL_RCC_OscConfig+0x47c>)
 800393a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0ee      	beq.n	8003922 <HAL_RCC_OscConfig+0x33a>
 8003944:	e014      	b.n	8003970 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003946:	f7fe f8f3 	bl	8001b30 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800394c:	e00a      	b.n	8003964 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800394e:	f7fe f8ef 	bl	8001b30 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	f241 3288 	movw	r2, #5000	; 0x1388
 800395c:	4293      	cmp	r3, r2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e078      	b.n	8003a56 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003964:	4b3f      	ldr	r3, [pc, #252]	; (8003a64 <HAL_RCC_OscConfig+0x47c>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1ee      	bne.n	800394e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003970:	7dfb      	ldrb	r3, [r7, #23]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d105      	bne.n	8003982 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003976:	4b3b      	ldr	r3, [pc, #236]	; (8003a64 <HAL_RCC_OscConfig+0x47c>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	4a3a      	ldr	r2, [pc, #232]	; (8003a64 <HAL_RCC_OscConfig+0x47c>)
 800397c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003980:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d064      	beq.n	8003a54 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800398a:	4b36      	ldr	r3, [pc, #216]	; (8003a64 <HAL_RCC_OscConfig+0x47c>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	2b08      	cmp	r3, #8
 8003994:	d05c      	beq.n	8003a50 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d141      	bne.n	8003a22 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800399e:	4b32      	ldr	r3, [pc, #200]	; (8003a68 <HAL_RCC_OscConfig+0x480>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a4:	f7fe f8c4 	bl	8001b30 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ac:	f7fe f8c0 	bl	8001b30 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e04b      	b.n	8003a56 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039be:	4b29      	ldr	r3, [pc, #164]	; (8003a64 <HAL_RCC_OscConfig+0x47c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f0      	bne.n	80039ac <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69da      	ldr	r2, [r3, #28]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	019b      	lsls	r3, r3, #6
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	085b      	lsrs	r3, r3, #1
 80039e2:	3b01      	subs	r3, #1
 80039e4:	041b      	lsls	r3, r3, #16
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	061b      	lsls	r3, r3, #24
 80039ee:	491d      	ldr	r1, [pc, #116]	; (8003a64 <HAL_RCC_OscConfig+0x47c>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039f4:	4b1c      	ldr	r3, [pc, #112]	; (8003a68 <HAL_RCC_OscConfig+0x480>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fa:	f7fe f899 	bl	8001b30 <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a02:	f7fe f895 	bl	8001b30 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e020      	b.n	8003a56 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a14:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <HAL_RCC_OscConfig+0x47c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0f0      	beq.n	8003a02 <HAL_RCC_OscConfig+0x41a>
 8003a20:	e018      	b.n	8003a54 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a22:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <HAL_RCC_OscConfig+0x480>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a28:	f7fe f882 	bl	8001b30 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a30:	f7fe f87e 	bl	8001b30 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e009      	b.n	8003a56 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a42:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <HAL_RCC_OscConfig+0x47c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0x448>
 8003a4e:	e001      	b.n	8003a54 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e000      	b.n	8003a56 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40007000 	.word	0x40007000
 8003a64:	40023800 	.word	0x40023800
 8003a68:	42470060 	.word	0x42470060

08003a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0ca      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a80:	4b67      	ldr	r3, [pc, #412]	; (8003c20 <HAL_RCC_ClockConfig+0x1b4>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 030f 	and.w	r3, r3, #15
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d90c      	bls.n	8003aa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8e:	4b64      	ldr	r3, [pc, #400]	; (8003c20 <HAL_RCC_ClockConfig+0x1b4>)
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a96:	4b62      	ldr	r3, [pc, #392]	; (8003c20 <HAL_RCC_ClockConfig+0x1b4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0b6      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d020      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac0:	4b58      	ldr	r3, [pc, #352]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	4a57      	ldr	r2, [pc, #348]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003aca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ad8:	4b52      	ldr	r3, [pc, #328]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	4a51      	ldr	r2, [pc, #324]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003ade:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ae2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae4:	4b4f      	ldr	r3, [pc, #316]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	494c      	ldr	r1, [pc, #304]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d044      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d107      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0a:	4b46      	ldr	r3, [pc, #280]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d119      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e07d      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d003      	beq.n	8003b2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d107      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2a:	4b3e      	ldr	r3, [pc, #248]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d109      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e06d      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3a:	4b3a      	ldr	r3, [pc, #232]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e065      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b4a:	4b36      	ldr	r3, [pc, #216]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f023 0203 	bic.w	r2, r3, #3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4933      	ldr	r1, [pc, #204]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b5c:	f7fd ffe8 	bl	8001b30 <HAL_GetTick>
 8003b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b62:	e00a      	b.n	8003b7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b64:	f7fd ffe4 	bl	8001b30 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e04d      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7a:	4b2a      	ldr	r3, [pc, #168]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 020c 	and.w	r2, r3, #12
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d1eb      	bne.n	8003b64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b8c:	4b24      	ldr	r3, [pc, #144]	; (8003c20 <HAL_RCC_ClockConfig+0x1b4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 030f 	and.w	r3, r3, #15
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d20c      	bcs.n	8003bb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9a:	4b21      	ldr	r3, [pc, #132]	; (8003c20 <HAL_RCC_ClockConfig+0x1b4>)
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba2:	4b1f      	ldr	r3, [pc, #124]	; (8003c20 <HAL_RCC_ClockConfig+0x1b4>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e030      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc0:	4b18      	ldr	r3, [pc, #96]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4915      	ldr	r1, [pc, #84]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d009      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bde:	4b11      	ldr	r3, [pc, #68]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	490d      	ldr	r1, [pc, #52]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bf2:	f000 f81d 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 8003bf6:	4601      	mov	r1, r0
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	091b      	lsrs	r3, r3, #4
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	4a09      	ldr	r2, [pc, #36]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	5cd3      	ldrb	r3, [r2, r3]
 8003c06:	fa21 f303 	lsr.w	r3, r1, r3
 8003c0a:	4a08      	ldr	r2, [pc, #32]	; (8003c2c <HAL_RCC_ClockConfig+0x1c0>)
 8003c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003c0e:	2000      	movs	r0, #0
 8003c10:	f7fd ff4a 	bl	8001aa8 <HAL_InitTick>

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40023c00 	.word	0x40023c00
 8003c24:	40023800 	.word	0x40023800
 8003c28:	080089e4 	.word	0x080089e4
 8003c2c:	20027484 	.word	0x20027484

08003c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	607b      	str	r3, [r7, #4]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c46:	4b63      	ldr	r3, [pc, #396]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d007      	beq.n	8003c62 <HAL_RCC_GetSysClockFreq+0x32>
 8003c52:	2b08      	cmp	r3, #8
 8003c54:	d008      	beq.n	8003c68 <HAL_RCC_GetSysClockFreq+0x38>
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f040 80b4 	bne.w	8003dc4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c5c:	4b5e      	ldr	r3, [pc, #376]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003c5e:	60bb      	str	r3, [r7, #8]
       break;
 8003c60:	e0b3      	b.n	8003dca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c62:	4b5e      	ldr	r3, [pc, #376]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003c64:	60bb      	str	r3, [r7, #8]
      break;
 8003c66:	e0b0      	b.n	8003dca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c68:	4b5a      	ldr	r3, [pc, #360]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c72:	4b58      	ldr	r3, [pc, #352]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d04a      	beq.n	8003d14 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c7e:	4b55      	ldr	r3, [pc, #340]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	099b      	lsrs	r3, r3, #6
 8003c84:	f04f 0400 	mov.w	r4, #0
 8003c88:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	ea03 0501 	and.w	r5, r3, r1
 8003c94:	ea04 0602 	and.w	r6, r4, r2
 8003c98:	4629      	mov	r1, r5
 8003c9a:	4632      	mov	r2, r6
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	f04f 0400 	mov.w	r4, #0
 8003ca4:	0154      	lsls	r4, r2, #5
 8003ca6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003caa:	014b      	lsls	r3, r1, #5
 8003cac:	4619      	mov	r1, r3
 8003cae:	4622      	mov	r2, r4
 8003cb0:	1b49      	subs	r1, r1, r5
 8003cb2:	eb62 0206 	sbc.w	r2, r2, r6
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	f04f 0400 	mov.w	r4, #0
 8003cbe:	0194      	lsls	r4, r2, #6
 8003cc0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003cc4:	018b      	lsls	r3, r1, #6
 8003cc6:	1a5b      	subs	r3, r3, r1
 8003cc8:	eb64 0402 	sbc.w	r4, r4, r2
 8003ccc:	f04f 0100 	mov.w	r1, #0
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	00e2      	lsls	r2, r4, #3
 8003cd6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003cda:	00d9      	lsls	r1, r3, #3
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4614      	mov	r4, r2
 8003ce0:	195b      	adds	r3, r3, r5
 8003ce2:	eb44 0406 	adc.w	r4, r4, r6
 8003ce6:	f04f 0100 	mov.w	r1, #0
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	0262      	lsls	r2, r4, #9
 8003cf0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003cf4:	0259      	lsls	r1, r3, #9
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4614      	mov	r4, r2
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	4621      	mov	r1, r4
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f04f 0400 	mov.w	r4, #0
 8003d04:	461a      	mov	r2, r3
 8003d06:	4623      	mov	r3, r4
 8003d08:	f7fc fac2 	bl	8000290 <__aeabi_uldivmod>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	460c      	mov	r4, r1
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	e049      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d14:	4b2f      	ldr	r3, [pc, #188]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	099b      	lsrs	r3, r3, #6
 8003d1a:	f04f 0400 	mov.w	r4, #0
 8003d1e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	ea03 0501 	and.w	r5, r3, r1
 8003d2a:	ea04 0602 	and.w	r6, r4, r2
 8003d2e:	4629      	mov	r1, r5
 8003d30:	4632      	mov	r2, r6
 8003d32:	f04f 0300 	mov.w	r3, #0
 8003d36:	f04f 0400 	mov.w	r4, #0
 8003d3a:	0154      	lsls	r4, r2, #5
 8003d3c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d40:	014b      	lsls	r3, r1, #5
 8003d42:	4619      	mov	r1, r3
 8003d44:	4622      	mov	r2, r4
 8003d46:	1b49      	subs	r1, r1, r5
 8003d48:	eb62 0206 	sbc.w	r2, r2, r6
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	f04f 0400 	mov.w	r4, #0
 8003d54:	0194      	lsls	r4, r2, #6
 8003d56:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d5a:	018b      	lsls	r3, r1, #6
 8003d5c:	1a5b      	subs	r3, r3, r1
 8003d5e:	eb64 0402 	sbc.w	r4, r4, r2
 8003d62:	f04f 0100 	mov.w	r1, #0
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	00e2      	lsls	r2, r4, #3
 8003d6c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d70:	00d9      	lsls	r1, r3, #3
 8003d72:	460b      	mov	r3, r1
 8003d74:	4614      	mov	r4, r2
 8003d76:	195b      	adds	r3, r3, r5
 8003d78:	eb44 0406 	adc.w	r4, r4, r6
 8003d7c:	f04f 0100 	mov.w	r1, #0
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	02a2      	lsls	r2, r4, #10
 8003d86:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003d8a:	0299      	lsls	r1, r3, #10
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4614      	mov	r4, r2
 8003d90:	4618      	mov	r0, r3
 8003d92:	4621      	mov	r1, r4
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f04f 0400 	mov.w	r4, #0
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	4623      	mov	r3, r4
 8003d9e:	f7fc fa77 	bl	8000290 <__aeabi_uldivmod>
 8003da2:	4603      	mov	r3, r0
 8003da4:	460c      	mov	r4, r1
 8003da6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003da8:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	0c1b      	lsrs	r3, r3, #16
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	3301      	adds	r3, #1
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc0:	60bb      	str	r3, [r7, #8]
      break;
 8003dc2:	e002      	b.n	8003dca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dc4:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003dc6:	60bb      	str	r3, [r7, #8]
      break;
 8003dc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dca:	68bb      	ldr	r3, [r7, #8]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	00f42400 	.word	0x00f42400
 8003ddc:	007a1200 	.word	0x007a1200

08003de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003de4:	4b03      	ldr	r3, [pc, #12]	; (8003df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003de6:	681b      	ldr	r3, [r3, #0]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20027484 	.word	0x20027484

08003df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dfc:	f7ff fff0 	bl	8003de0 <HAL_RCC_GetHCLKFreq>
 8003e00:	4601      	mov	r1, r0
 8003e02:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	0a9b      	lsrs	r3, r3, #10
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	4a03      	ldr	r2, [pc, #12]	; (8003e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e0e:	5cd3      	ldrb	r3, [r2, r3]
 8003e10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	080089f4 	.word	0x080089f4

08003e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d105      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d061      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e48:	4ba3      	ldr	r3, [pc, #652]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e4e:	f7fd fe6f 	bl	8001b30 <HAL_GetTick>
 8003e52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e54:	e008      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e56:	f7fd fe6b 	bl	8001b30 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e177      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e68:	4b9c      	ldr	r3, [pc, #624]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f0      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d009      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	019a      	lsls	r2, r3, #6
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	071b      	lsls	r3, r3, #28
 8003e8c:	4993      	ldr	r1, [pc, #588]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d01f      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ea0:	4b8e      	ldr	r3, [pc, #568]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ea6:	0f1b      	lsrs	r3, r3, #28
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	019a      	lsls	r2, r3, #6
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	061b      	lsls	r3, r3, #24
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	071b      	lsls	r3, r3, #28
 8003ec0:	4986      	ldr	r1, [pc, #536]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ec8:	4b84      	ldr	r3, [pc, #528]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ece:	f023 021f 	bic.w	r2, r3, #31
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	4980      	ldr	r1, [pc, #512]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ee0:	4b7d      	ldr	r3, [pc, #500]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ee6:	f7fd fe23 	bl	8001b30 <HAL_GetTick>
 8003eea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003eec:	e008      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003eee:	f7fd fe1f 	bl	8001b30 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e12b      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f00:	4b76      	ldr	r3, [pc, #472]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0f0      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d105      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d079      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f24:	4b6e      	ldr	r3, [pc, #440]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f2a:	f7fd fe01 	bl	8001b30 <HAL_GetTick>
 8003f2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f30:	e008      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003f32:	f7fd fdfd 	bl	8001b30 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e109      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f44:	4b65      	ldr	r3, [pc, #404]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f50:	d0ef      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d020      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f5e:	4b5f      	ldr	r3, [pc, #380]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f64:	0f1b      	lsrs	r3, r3, #28
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	019a      	lsls	r2, r3, #6
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	061b      	lsls	r3, r3, #24
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	071b      	lsls	r3, r3, #28
 8003f7e:	4957      	ldr	r1, [pc, #348]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f86:	4b55      	ldr	r3, [pc, #340]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f8c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	3b01      	subs	r3, #1
 8003f96:	021b      	lsls	r3, r3, #8
 8003f98:	4950      	ldr	r1, [pc, #320]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d01e      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fac:	4b4b      	ldr	r3, [pc, #300]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb2:	0e1b      	lsrs	r3, r3, #24
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	019a      	lsls	r2, r3, #6
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	061b      	lsls	r3, r3, #24
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	071b      	lsls	r3, r3, #28
 8003fcc:	4943      	ldr	r1, [pc, #268]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003fd4:	4b41      	ldr	r3, [pc, #260]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	493e      	ldr	r1, [pc, #248]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003fea:	4b3d      	ldr	r3, [pc, #244]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003fec:	2201      	movs	r2, #1
 8003fee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ff0:	f7fd fd9e 	bl	8001b30 <HAL_GetTick>
 8003ff4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003ff8:	f7fd fd9a 	bl	8001b30 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e0a6      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800400a:	4b34      	ldr	r3, [pc, #208]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004016:	d1ef      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0320 	and.w	r3, r3, #32
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 808d 	beq.w	8004140 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	4b2c      	ldr	r3, [pc, #176]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	4a2b      	ldr	r2, [pc, #172]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004034:	6413      	str	r3, [r2, #64]	; 0x40
 8004036:	4b29      	ldr	r3, [pc, #164]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004042:	4b28      	ldr	r3, [pc, #160]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a27      	ldr	r2, [pc, #156]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800404c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800404e:	f7fd fd6f 	bl	8001b30 <HAL_GetTick>
 8004052:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004054:	e008      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004056:	f7fd fd6b 	bl	8001b30 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e077      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004068:	4b1e      	ldr	r3, [pc, #120]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0f0      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004074:	4b19      	ldr	r3, [pc, #100]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800407c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d039      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	429a      	cmp	r2, r3
 8004090:	d032      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004092:	4b12      	ldr	r3, [pc, #72]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800409a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800409c:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800409e:	2201      	movs	r2, #1
 80040a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040a2:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80040a8:	4a0c      	ldr	r2, [pc, #48]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040ae:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d11e      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80040ba:	f7fd fd39 	bl	8001b30 <HAL_GetTick>
 80040be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c0:	e014      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c2:	f7fd fd35 	bl	8001b30 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d90b      	bls.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e03f      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x338>
 80040d8:	42470068 	.word	0x42470068
 80040dc:	40023800 	.word	0x40023800
 80040e0:	42470070 	.word	0x42470070
 80040e4:	40007000 	.word	0x40007000
 80040e8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ec:	4b1c      	ldr	r3, [pc, #112]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80040ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0e4      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004100:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004104:	d10d      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x302>
 8004106:	4b16      	ldr	r3, [pc, #88]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800411a:	4911      	ldr	r1, [pc, #68]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800411c:	4313      	orrs	r3, r2
 800411e:	608b      	str	r3, [r1, #8]
 8004120:	e005      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8004122:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	4a0e      	ldr	r2, [pc, #56]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004128:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800412c:	6093      	str	r3, [r2, #8]
 800412e:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004130:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800413a:	4909      	ldr	r1, [pc, #36]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800413c:	4313      	orrs	r3, r2
 800413e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0310 	and.w	r3, r3, #16
 8004148:	2b00      	cmp	r3, #0
 800414a:	d004      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004152:	4b04      	ldr	r3, [pc, #16]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004154:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40023800 	.word	0x40023800
 8004164:	424711e0 	.word	0x424711e0

08004168 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e01c      	b.n	80041b4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	795b      	ldrb	r3, [r3, #5]
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d105      	bne.n	8004190 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f001 fe36 	bl	8005dfc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 0204 	orr.w	r2, r2, #4
 80041a4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	791b      	ldrb	r3, [r3, #4]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_RNG_GenerateRandomNumber+0x1a>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e03d      	b.n	8004252 <HAL_RNG_GenerateRandomNumber+0x96>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	795b      	ldrb	r3, [r3, #5]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d12c      	bne.n	8004240 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2202      	movs	r2, #2
 80041ea:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041ec:	f7fd fca0 	bl	8001b30 <HAL_GetTick>
 80041f0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80041f2:	e011      	b.n	8004218 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80041f4:	f7fd fc9c 	bl	8001b30 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d90a      	bls.n	8004218 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e01c      	b.n	8004252 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b01      	cmp	r3, #1
 8004224:	d1e6      	bne.n	80041f4 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	715a      	strb	r2, [r3, #5]
 800423e:	e004      	b.n	800424a <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2204      	movs	r2, #4
 8004244:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	711a      	strb	r2, [r3, #4]

  return status;
 8004250:	7bfb      	ldrb	r3, [r7, #15]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b082      	sub	sp, #8
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	330c      	adds	r3, #12
 8004266:	4619      	mov	r1, r3
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7ff ffa7 	bl	80041bc <HAL_RNG_GenerateRandomNumber>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d102      	bne.n	800427a <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	e000      	b.n	800427c <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 800427a:	2300      	movs	r3, #0
  }
}
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e025      	b.n	80042e4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d106      	bne.n	80042b2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f001 febf 	bl	8006030 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2202      	movs	r2, #2
 80042b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3304      	adds	r3, #4
 80042c2:	4619      	mov	r1, r3
 80042c4:	4610      	mov	r0, r2
 80042c6:	f000 fde7 	bl	8004e98 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6818      	ldr	r0, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	461a      	mov	r2, r3
 80042d4:	6839      	ldr	r1, [r7, #0]
 80042d6:	f000 fe52 	bl	8004f7e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d101      	bne.n	8004308 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8004304:	2302      	movs	r3, #2
 8004306:	e018      	b.n	800433a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	4618      	mov	r0, r3
 800431a:	f000 feaf 	bl	800507c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b02      	cmp	r3, #2
 8004324:	d104      	bne.n	8004330 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2205      	movs	r2, #5
 800432a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800432e:	e003      	b.n	8004338 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b082      	sub	sp, #8
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d101      	bne.n	800435c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004358:	2302      	movs	r3, #2
 800435a:	e00e      	b.n	800437a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6839      	ldr	r1, [r7, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fec2 	bl	80050f4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e056      	b.n	8004442 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f001 fd46 	bl	8005e40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	ea42 0103 	orr.w	r1, r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	0c1b      	lsrs	r3, r3, #16
 8004412:	f003 0104 	and.w	r1, r3, #4
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69da      	ldr	r2, [r3, #28]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004430:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b082      	sub	sp, #8
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e01a      	b.n	8004492 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004472:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f001 fd2b 	bl	8005ed0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b088      	sub	sp, #32
 800449e:	af00      	add	r7, sp, #0
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	603b      	str	r3, [r7, #0]
 80044a6:	4613      	mov	r3, r2
 80044a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_SPI_Transmit+0x22>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e11e      	b.n	80046fa <HAL_SPI_Transmit+0x260>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044c4:	f7fd fb34 	bl	8001b30 <HAL_GetTick>
 80044c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044ca:	88fb      	ldrh	r3, [r7, #6]
 80044cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d002      	beq.n	80044e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044da:	2302      	movs	r3, #2
 80044dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044de:	e103      	b.n	80046e8 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_SPI_Transmit+0x52>
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d102      	bne.n	80044f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044f0:	e0fa      	b.n	80046e8 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2203      	movs	r2, #3
 80044f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	88fa      	ldrh	r2, [r7, #6]
 800450a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	88fa      	ldrh	r2, [r7, #6]
 8004510:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004538:	d107      	bne.n	800454a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004548:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004554:	2b40      	cmp	r3, #64	; 0x40
 8004556:	d007      	beq.n	8004568 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004566:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004570:	d14b      	bne.n	800460a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <HAL_SPI_Transmit+0xe6>
 800457a:	8afb      	ldrh	r3, [r7, #22]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d13e      	bne.n	80045fe <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004584:	881a      	ldrh	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004590:	1c9a      	adds	r2, r3, #2
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800459a:	b29b      	uxth	r3, r3
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045a4:	e02b      	b.n	80045fe <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d112      	bne.n	80045da <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b8:	881a      	ldrh	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	1c9a      	adds	r2, r3, #2
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80045d8:	e011      	b.n	80045fe <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045da:	f7fd faa9 	bl	8001b30 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d803      	bhi.n	80045f2 <HAL_SPI_Transmit+0x158>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f0:	d102      	bne.n	80045f8 <HAL_SPI_Transmit+0x15e>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d102      	bne.n	80045fe <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045fc:	e074      	b.n	80046e8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1ce      	bne.n	80045a6 <HAL_SPI_Transmit+0x10c>
 8004608:	e04c      	b.n	80046a4 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_SPI_Transmit+0x17e>
 8004612:	8afb      	ldrh	r3, [r7, #22]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d140      	bne.n	800469a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	330c      	adds	r3, #12
 8004622:	7812      	ldrb	r2, [r2, #0]
 8004624:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004634:	b29b      	uxth	r3, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800463e:	e02c      	b.n	800469a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b02      	cmp	r3, #2
 800464c:	d113      	bne.n	8004676 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	330c      	adds	r3, #12
 8004658:	7812      	ldrb	r2, [r2, #0]
 800465a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	86da      	strh	r2, [r3, #54]	; 0x36
 8004674:	e011      	b.n	800469a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004676:	f7fd fa5b 	bl	8001b30 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d803      	bhi.n	800468e <HAL_SPI_Transmit+0x1f4>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468c:	d102      	bne.n	8004694 <HAL_SPI_Transmit+0x1fa>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d102      	bne.n	800469a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004698:	e026      	b.n	80046e8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800469e:	b29b      	uxth	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1cd      	bne.n	8004640 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	6839      	ldr	r1, [r7, #0]
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 fbb3 	bl	8004e14 <SPI_EndRxTxTransaction>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2220      	movs	r2, #32
 80046b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10a      	bne.n	80046d8 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046c2:	2300      	movs	r3, #0
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	77fb      	strb	r3, [r7, #31]
 80046e4:	e000      	b.n	80046e8 <HAL_SPI_Transmit+0x24e>
  }

error:
 80046e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3720      	adds	r7, #32
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b088      	sub	sp, #32
 8004706:	af02      	add	r7, sp, #8
 8004708:	60f8      	str	r0, [r7, #12]
 800470a:	60b9      	str	r1, [r7, #8]
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	4613      	mov	r3, r2
 8004710:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800471e:	d112      	bne.n	8004746 <HAL_SPI_Receive+0x44>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10e      	bne.n	8004746 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2204      	movs	r2, #4
 800472c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004730:	88fa      	ldrh	r2, [r7, #6]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	4613      	mov	r3, r2
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f8e9 	bl	8004914 <HAL_SPI_TransmitReceive>
 8004742:	4603      	mov	r3, r0
 8004744:	e0e2      	b.n	800490c <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_SPI_Receive+0x52>
 8004750:	2302      	movs	r3, #2
 8004752:	e0db      	b.n	800490c <HAL_SPI_Receive+0x20a>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800475c:	f7fd f9e8 	bl	8001b30 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b01      	cmp	r3, #1
 800476c:	d002      	beq.n	8004774 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800476e:	2302      	movs	r3, #2
 8004770:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004772:	e0c2      	b.n	80048fa <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <HAL_SPI_Receive+0x7e>
 800477a:	88fb      	ldrh	r3, [r7, #6]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d102      	bne.n	8004786 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004784:	e0b9      	b.n	80048fa <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2204      	movs	r2, #4
 800478a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	88fa      	ldrh	r2, [r7, #6]
 800479e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	88fa      	ldrh	r2, [r7, #6]
 80047a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047cc:	d107      	bne.n	80047de <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047dc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e8:	2b40      	cmp	r3, #64	; 0x40
 80047ea:	d007      	beq.n	80047fc <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047fa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d162      	bne.n	80048ca <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004804:	e02e      	b.n	8004864 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b01      	cmp	r3, #1
 8004812:	d115      	bne.n	8004840 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f103 020c 	add.w	r2, r3, #12
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	7812      	ldrb	r2, [r2, #0]
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004834:	b29b      	uxth	r3, r3
 8004836:	3b01      	subs	r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800483e:	e011      	b.n	8004864 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004840:	f7fd f976 	bl	8001b30 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d803      	bhi.n	8004858 <HAL_SPI_Receive+0x156>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004856:	d102      	bne.n	800485e <HAL_SPI_Receive+0x15c>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d102      	bne.n	8004864 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004862:	e04a      	b.n	80048fa <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1cb      	bne.n	8004806 <HAL_SPI_Receive+0x104>
 800486e:	e031      	b.n	80048d4 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b01      	cmp	r3, #1
 800487c:	d113      	bne.n	80048a6 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004888:	b292      	uxth	r2, r2
 800488a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004890:	1c9a      	adds	r2, r3, #2
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800489a:	b29b      	uxth	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048a4:	e011      	b.n	80048ca <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048a6:	f7fd f943 	bl	8001b30 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d803      	bhi.n	80048be <HAL_SPI_Receive+0x1bc>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048bc:	d102      	bne.n	80048c4 <HAL_SPI_Receive+0x1c2>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d102      	bne.n	80048ca <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80048c8:	e017      	b.n	80048fa <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1cd      	bne.n	8004870 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	6839      	ldr	r1, [r7, #0]
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 fa35 	bl	8004d48 <SPI_EndRxTransaction>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2220      	movs	r2, #32
 80048e8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	75fb      	strb	r3, [r7, #23]
 80048f6:	e000      	b.n	80048fa <HAL_SPI_Receive+0x1f8>
  }

error :
 80048f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800490a:	7dfb      	ldrb	r3, [r7, #23]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08c      	sub	sp, #48	; 0x30
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004922:	2301      	movs	r3, #1
 8004924:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_SPI_TransmitReceive+0x26>
 8004936:	2302      	movs	r3, #2
 8004938:	e18a      	b.n	8004c50 <HAL_SPI_TransmitReceive+0x33c>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004942:	f7fd f8f5 	bl	8001b30 <HAL_GetTick>
 8004946:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800494e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004958:	887b      	ldrh	r3, [r7, #2]
 800495a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800495c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004960:	2b01      	cmp	r3, #1
 8004962:	d00f      	beq.n	8004984 <HAL_SPI_TransmitReceive+0x70>
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800496a:	d107      	bne.n	800497c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d103      	bne.n	800497c <HAL_SPI_TransmitReceive+0x68>
 8004974:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004978:	2b04      	cmp	r3, #4
 800497a:	d003      	beq.n	8004984 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800497c:	2302      	movs	r3, #2
 800497e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004982:	e15b      	b.n	8004c3c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d005      	beq.n	8004996 <HAL_SPI_TransmitReceive+0x82>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <HAL_SPI_TransmitReceive+0x82>
 8004990:	887b      	ldrh	r3, [r7, #2]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d103      	bne.n	800499e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800499c:	e14e      	b.n	8004c3c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d003      	beq.n	80049b2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2205      	movs	r2, #5
 80049ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	887a      	ldrh	r2, [r7, #2]
 80049c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	887a      	ldrh	r2, [r7, #2]
 80049c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	887a      	ldrh	r2, [r7, #2]
 80049d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	887a      	ldrh	r2, [r7, #2]
 80049da:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f2:	2b40      	cmp	r3, #64	; 0x40
 80049f4:	d007      	beq.n	8004a06 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a0e:	d178      	bne.n	8004b02 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d002      	beq.n	8004a1e <HAL_SPI_TransmitReceive+0x10a>
 8004a18:	8b7b      	ldrh	r3, [r7, #26]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d166      	bne.n	8004aec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	881a      	ldrh	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	1c9a      	adds	r2, r3, #2
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a42:	e053      	b.n	8004aec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d11b      	bne.n	8004a8a <HAL_SPI_TransmitReceive+0x176>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d016      	beq.n	8004a8a <HAL_SPI_TransmitReceive+0x176>
 8004a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d113      	bne.n	8004a8a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	881a      	ldrh	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	1c9a      	adds	r2, r3, #2
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d119      	bne.n	8004acc <HAL_SPI_TransmitReceive+0x1b8>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d014      	beq.n	8004acc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	b292      	uxth	r2, r2
 8004aae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	1c9a      	adds	r2, r3, #2
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004acc:	f7fd f830 	bl	8001b30 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d807      	bhi.n	8004aec <HAL_SPI_TransmitReceive+0x1d8>
 8004adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae2:	d003      	beq.n	8004aec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004aea:	e0a7      	b.n	8004c3c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1a6      	bne.n	8004a44 <HAL_SPI_TransmitReceive+0x130>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1a1      	bne.n	8004a44 <HAL_SPI_TransmitReceive+0x130>
 8004b00:	e07c      	b.n	8004bfc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d002      	beq.n	8004b10 <HAL_SPI_TransmitReceive+0x1fc>
 8004b0a:	8b7b      	ldrh	r3, [r7, #26]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d16b      	bne.n	8004be8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	330c      	adds	r3, #12
 8004b1a:	7812      	ldrb	r2, [r2, #0]
 8004b1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b36:	e057      	b.n	8004be8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d11c      	bne.n	8004b80 <HAL_SPI_TransmitReceive+0x26c>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d017      	beq.n	8004b80 <HAL_SPI_TransmitReceive+0x26c>
 8004b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d114      	bne.n	8004b80 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	330c      	adds	r3, #12
 8004b60:	7812      	ldrb	r2, [r2, #0]
 8004b62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d119      	bne.n	8004bc2 <HAL_SPI_TransmitReceive+0x2ae>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d014      	beq.n	8004bc2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004bc2:	f7fc ffb5 	bl	8001b30 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d803      	bhi.n	8004bda <HAL_SPI_TransmitReceive+0x2c6>
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd8:	d102      	bne.n	8004be0 <HAL_SPI_TransmitReceive+0x2cc>
 8004bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d103      	bne.n	8004be8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004be6:	e029      	b.n	8004c3c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1a2      	bne.n	8004b38 <HAL_SPI_TransmitReceive+0x224>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d19d      	bne.n	8004b38 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bfe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 f907 	bl	8004e14 <SPI_EndRxTxTransaction>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d006      	beq.n	8004c1a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2220      	movs	r2, #32
 8004c16:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004c18:	e010      	b.n	8004c3c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10b      	bne.n	8004c3a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c22:	2300      	movs	r3, #0
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	617b      	str	r3, [r7, #20]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	617b      	str	r3, [r7, #20]
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	e000      	b.n	8004c3c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004c3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3730      	adds	r7, #48	; 0x30
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c66:	b2db      	uxtb	r3, r3
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	603b      	str	r3, [r7, #0]
 8004c80:	4613      	mov	r3, r2
 8004c82:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c84:	e04c      	b.n	8004d20 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d048      	beq.n	8004d20 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004c8e:	f7fc ff4f 	bl	8001b30 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d902      	bls.n	8004ca4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d13d      	bne.n	8004d20 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cb2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cbc:	d111      	bne.n	8004ce2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc6:	d004      	beq.n	8004cd2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cd0:	d107      	bne.n	8004ce2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ce0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cea:	d10f      	bne.n	8004d0c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e00f      	b.n	8004d40 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	bf0c      	ite	eq
 8004d30:	2301      	moveq	r3, #1
 8004d32:	2300      	movne	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	461a      	mov	r2, r3
 8004d38:	79fb      	ldrb	r3, [r7, #7]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d1a3      	bne.n	8004c86 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af02      	add	r7, sp, #8
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d5c:	d111      	bne.n	8004d82 <SPI_EndRxTransaction+0x3a>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d66:	d004      	beq.n	8004d72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d70:	d107      	bne.n	8004d82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d80:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d8a:	d12a      	bne.n	8004de2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d94:	d012      	beq.n	8004dbc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2180      	movs	r1, #128	; 0x80
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f7ff ff67 	bl	8004c74 <SPI_WaitFlagStateUntilTimeout>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d02d      	beq.n	8004e08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db0:	f043 0220 	orr.w	r2, r3, #32
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e026      	b.n	8004e0a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f7ff ff54 	bl	8004c74 <SPI_WaitFlagStateUntilTimeout>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d01a      	beq.n	8004e08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd6:	f043 0220 	orr.w	r2, r3, #32
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e013      	b.n	8004e0a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2200      	movs	r2, #0
 8004dea:	2101      	movs	r1, #1
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f7ff ff41 	bl	8004c74 <SPI_WaitFlagStateUntilTimeout>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d007      	beq.n	8004e08 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfc:	f043 0220 	orr.w	r2, r3, #32
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e000      	b.n	8004e0a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e20:	4b1b      	ldr	r3, [pc, #108]	; (8004e90 <SPI_EndRxTxTransaction+0x7c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a1b      	ldr	r2, [pc, #108]	; (8004e94 <SPI_EndRxTxTransaction+0x80>)
 8004e26:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2a:	0d5b      	lsrs	r3, r3, #21
 8004e2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e30:	fb02 f303 	mul.w	r3, r2, r3
 8004e34:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e3e:	d112      	bne.n	8004e66 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2200      	movs	r2, #0
 8004e48:	2180      	movs	r1, #128	; 0x80
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f7ff ff12 	bl	8004c74 <SPI_WaitFlagStateUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d016      	beq.n	8004e84 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5a:	f043 0220 	orr.w	r2, r3, #32
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e00f      	b.n	8004e86 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7c:	2b80      	cmp	r3, #128	; 0x80
 8004e7e:	d0f2      	beq.n	8004e66 <SPI_EndRxTxTransaction+0x52>
 8004e80:	e000      	b.n	8004e84 <SPI_EndRxTxTransaction+0x70>
        break;
 8004e82:	bf00      	nop
  }

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	20027484 	.word	0x20027484
 8004e94:	165e9f81 	.word	0x165e9f81

08004e98 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d029      	beq.n	8004f06 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004ebe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004ec2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004ecc:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8004ed2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8004ed8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8004ede:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8004ee4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8004eea:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8004ef0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8004ef6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	e034      	b.n	8004f70 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f12:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004f1c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8004f22:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004f36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004f3a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004f44:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8004f4a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8004f50:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8004f56:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8004f5c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b087      	sub	sp, #28
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d02e      	beq.n	8004ff6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004fa4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004fb4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8004fbe:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8004fc8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004fd2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8004fdc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	609a      	str	r2, [r3, #8]
 8004ff4:	e03b      	b.n	800506e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005002:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005006:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	3b01      	subs	r3, #1
 800500e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	3b01      	subs	r3, #1
 8005016:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005018:	4313      	orrs	r3, r2
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	4313      	orrs	r3, r2
 800501e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800502c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	3b01      	subs	r3, #1
 800503a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800503c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	3b01      	subs	r3, #1
 8005044:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005046:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	3b01      	subs	r3, #1
 800504e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005050:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	3b01      	subs	r3, #1
 8005058:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800505a:	4313      	orrs	r3, r2
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4313      	orrs	r3, r2
 8005060:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	371c      	adds	r7, #28
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005098:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	3b01      	subs	r3, #1
 80050a0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80050a2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80050aa:	4313      	orrs	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80050b4:	f7fc fd3c 	bl	8001b30 <HAL_GetTick>
 80050b8:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80050ba:	e010      	b.n	80050de <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c2:	d00c      	beq.n	80050de <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d007      	beq.n	80050da <FMC_SDRAM_SendCommand+0x5e>
 80050ca:	f7fc fd31 	bl	8001b30 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d201      	bcs.n	80050de <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e006      	b.n	80050ec <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	d0e8      	beq.n	80050bc <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3718      	adds	r7, #24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	695a      	ldr	r2, [r3, #20]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
	...

0800511c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005122:	f7fc fc9f 	bl	8001a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005126:	f000 f979 	bl	800541c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800512a:	f000 fbd1 	bl	80058d0 <MX_GPIO_Init>
  MX_CRC_Init();
 800512e:	f000 f9ff 	bl	8005530 <MX_CRC_Init>
  MX_DMA2D_Init();
 8005132:	f000 fa11 	bl	8005558 <MX_DMA2D_Init>
  MX_FMC_Init();
 8005136:	f000 fb7d 	bl	8005834 <MX_FMC_Init>
  MX_I2C3_Init();
 800513a:	f000 fa3f 	bl	80055bc <MX_I2C3_Init>
  MX_LTDC_Init();
 800513e:	f000 fa7d 	bl	800563c <MX_LTDC_Init>
  MX_RNG_Init();
 8005142:	f000 fb2d 	bl	80057a0 <MX_RNG_Init>
  MX_SPI5_Init();
 8005146:	f000 fb3f 	bl	80057c8 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */


  memset(wyraz,0,40); // czyszczenie wyrazu
 800514a:	2228      	movs	r2, #40	; 0x28
 800514c:	2100      	movs	r1, #0
 800514e:	489c      	ldr	r0, [pc, #624]	; (80053c0 <main+0x2a4>)
 8005150:	f001 faba 	bl	80066c8 <memset>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	BSP_LCD_Init();
 8005154:	f7fb fd76 	bl	8000c44 <BSP_LCD_Init>
	//
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER); // tylna warstwa
 8005158:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800515c:	2000      	movs	r0, #0
 800515e:	f7fb fdf3 	bl	8000d48 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER); // od tego momentu tylko tylna
 8005162:	2000      	movs	r0, #0
 8005164:	f7fb fe54 	bl	8000e10 <BSP_LCD_SelectLayer>
	//
	nr_rundy = 0;
 8005168:	4b96      	ldr	r3, [pc, #600]	; (80053c4 <main+0x2a8>)
 800516a:	2200      	movs	r2, #0
 800516c:	701a      	strb	r2, [r3, #0]
	zycia = 3;
 800516e:	4b96      	ldr	r3, [pc, #600]	; (80053c8 <main+0x2ac>)
 8005170:	2203      	movs	r2, #3
 8005172:	801a      	strh	r2, [r3, #0]
	punkty = 0;
 8005174:	4b95      	ldr	r3, [pc, #596]	; (80053cc <main+0x2b0>)
 8005176:	2200      	movs	r2, #0
 8005178:	801a      	strh	r2, [r3, #0]
	lv_up = 20;
 800517a:	4b95      	ldr	r3, [pc, #596]	; (80053d0 <main+0x2b4>)
 800517c:	2214      	movs	r2, #20
 800517e:	801a      	strh	r2, [r3, #0]
	lv_up_cap = 20;
 8005180:	4b94      	ldr	r3, [pc, #592]	; (80053d4 <main+0x2b8>)
 8005182:	2214      	movs	r2, #20
 8005184:	801a      	strh	r2, [r3, #0]

  while (1)
  {
	  // PRZYGOTOWANIE PRZED RUNDA, PRZYGOTOWANIE PRZED RUNDA, PRZYGOTOWANIE PRZED RUNDA
	  nr_rundy += 1;
 8005186:	4b8f      	ldr	r3, [pc, #572]	; (80053c4 <main+0x2a8>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	3301      	adds	r3, #1
 800518c:	b2da      	uxtb	r2, r3
 800518e:	4b8d      	ldr	r3, [pc, #564]	; (80053c4 <main+0x2a8>)
 8005190:	701a      	strb	r2, [r3, #0]
	  BSP_LCD_Clear(LCD_COLOR_DARKRED);
 8005192:	4891      	ldr	r0, [pc, #580]	; (80053d8 <main+0x2bc>)
 8005194:	f7fb fe7c 	bl	8000e90 <BSP_LCD_Clear>

	  // PISANIE LINIJKI, PISANIE LINIJKI, PISANIE LINIJKI
	  memset(wyraz,0,40); // czyszczenie wyrazu
 8005198:	2228      	movs	r2, #40	; 0x28
 800519a:	2100      	movs	r1, #0
 800519c:	4888      	ldr	r0, [pc, #544]	; (80053c0 <main+0x2a4>)
 800519e:	f001 fa93 	bl	80066c8 <memset>
	  sprintf(wyraz_liczba, "%d", nr_rundy); // int na stringa
 80051a2:	4b88      	ldr	r3, [pc, #544]	; (80053c4 <main+0x2a8>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	498c      	ldr	r1, [pc, #560]	; (80053dc <main+0x2c0>)
 80051aa:	488d      	ldr	r0, [pc, #564]	; (80053e0 <main+0x2c4>)
 80051ac:	f001 fa94 	bl	80066d8 <siprintf>
	  strcat(wyraz,wyraz0); // wyraz = "RUNDA: "
 80051b0:	498c      	ldr	r1, [pc, #560]	; (80053e4 <main+0x2c8>)
 80051b2:	4883      	ldr	r0, [pc, #524]	; (80053c0 <main+0x2a4>)
 80051b4:	f001 fab0 	bl	8006718 <strcat>
	  strcat(wyraz,wyraz_liczba);// wyraz += wyraz_liczba
 80051b8:	4989      	ldr	r1, [pc, #548]	; (80053e0 <main+0x2c4>)
 80051ba:	4881      	ldr	r0, [pc, #516]	; (80053c0 <main+0x2a4>)
 80051bc:	f001 faac 	bl	8006718 <strcat>
	  BSP_LCD_DisplayStringAtLine(0, (uint8_t*)wyraz);// wyswietlenie
 80051c0:	497f      	ldr	r1, [pc, #508]	; (80053c0 <main+0x2a4>)
 80051c2:	2000      	movs	r0, #0
 80051c4:	f7fb ff8a 	bl	80010dc <BSP_LCD_DisplayStringAtLine>

	  memset(wyraz,0,40); // czyszczenie wyrazu
 80051c8:	2228      	movs	r2, #40	; 0x28
 80051ca:	2100      	movs	r1, #0
 80051cc:	487c      	ldr	r0, [pc, #496]	; (80053c0 <main+0x2a4>)
 80051ce:	f001 fa7b 	bl	80066c8 <memset>
	  sprintf(wyraz_liczba, "%d", punkty); // int na stringa
 80051d2:	4b7e      	ldr	r3, [pc, #504]	; (80053cc <main+0x2b0>)
 80051d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051d8:	461a      	mov	r2, r3
 80051da:	4980      	ldr	r1, [pc, #512]	; (80053dc <main+0x2c0>)
 80051dc:	4880      	ldr	r0, [pc, #512]	; (80053e0 <main+0x2c4>)
 80051de:	f001 fa7b 	bl	80066d8 <siprintf>
	  strcat(wyraz,wyraz1); // wyraz = "PUNKTY: "
 80051e2:	4981      	ldr	r1, [pc, #516]	; (80053e8 <main+0x2cc>)
 80051e4:	4876      	ldr	r0, [pc, #472]	; (80053c0 <main+0x2a4>)
 80051e6:	f001 fa97 	bl	8006718 <strcat>
	  strcat(wyraz,wyraz_liczba);// wyraz += wyraz_liczba
 80051ea:	497d      	ldr	r1, [pc, #500]	; (80053e0 <main+0x2c4>)
 80051ec:	4874      	ldr	r0, [pc, #464]	; (80053c0 <main+0x2a4>)
 80051ee:	f001 fa93 	bl	8006718 <strcat>
	  BSP_LCD_DisplayStringAtLine(1, (uint8_t*)wyraz);// wyswietlenie
 80051f2:	4973      	ldr	r1, [pc, #460]	; (80053c0 <main+0x2a4>)
 80051f4:	2001      	movs	r0, #1
 80051f6:	f7fb ff71 	bl	80010dc <BSP_LCD_DisplayStringAtLine>

	  memset(wyraz,0,40); // czyszczenie wyrazu
 80051fa:	2228      	movs	r2, #40	; 0x28
 80051fc:	2100      	movs	r1, #0
 80051fe:	4870      	ldr	r0, [pc, #448]	; (80053c0 <main+0x2a4>)
 8005200:	f001 fa62 	bl	80066c8 <memset>
	  sprintf(wyraz_liczba, "%d", zycia); // int na stringa
 8005204:	4b70      	ldr	r3, [pc, #448]	; (80053c8 <main+0x2ac>)
 8005206:	f9b3 3000 	ldrsh.w	r3, [r3]
 800520a:	461a      	mov	r2, r3
 800520c:	4973      	ldr	r1, [pc, #460]	; (80053dc <main+0x2c0>)
 800520e:	4874      	ldr	r0, [pc, #464]	; (80053e0 <main+0x2c4>)
 8005210:	f001 fa62 	bl	80066d8 <siprintf>
	  strcat(wyraz,wyraz2); // wyraz = "ZYCIA: "
 8005214:	4975      	ldr	r1, [pc, #468]	; (80053ec <main+0x2d0>)
 8005216:	486a      	ldr	r0, [pc, #424]	; (80053c0 <main+0x2a4>)
 8005218:	f001 fa7e 	bl	8006718 <strcat>
	  strcat(wyraz,wyraz_liczba);// wyraz += wyraz_liczba
 800521c:	4970      	ldr	r1, [pc, #448]	; (80053e0 <main+0x2c4>)
 800521e:	4868      	ldr	r0, [pc, #416]	; (80053c0 <main+0x2a4>)
 8005220:	f001 fa7a 	bl	8006718 <strcat>
	  BSP_LCD_DisplayStringAtLine(2, (uint8_t*)wyraz);// wyswietlenie
 8005224:	4966      	ldr	r1, [pc, #408]	; (80053c0 <main+0x2a4>)
 8005226:	2002      	movs	r0, #2
 8005228:	f7fb ff58 	bl	80010dc <BSP_LCD_DisplayStringAtLine>

	  strzal[0]=0;
 800522c:	4b70      	ldr	r3, [pc, #448]	; (80053f0 <main+0x2d4>)
 800522e:	2200      	movs	r2, #0
 8005230:	701a      	strb	r2, [r3, #0]
	  strzal[1]=0;
 8005232:	4b6f      	ldr	r3, [pc, #444]	; (80053f0 <main+0x2d4>)
 8005234:	2200      	movs	r2, #0
 8005236:	705a      	strb	r2, [r3, #1]
	  strzal[2]=0;
 8005238:	4b6d      	ldr	r3, [pc, #436]	; (80053f0 <main+0x2d4>)
 800523a:	2200      	movs	r2, #0
 800523c:	709a      	strb	r2, [r3, #2]
	  ludzik_zyje[0]=1;
 800523e:	4b6d      	ldr	r3, [pc, #436]	; (80053f4 <main+0x2d8>)
 8005240:	2201      	movs	r2, #1
 8005242:	701a      	strb	r2, [r3, #0]
	  ludzik_zyje[1]=1;
 8005244:	4b6b      	ldr	r3, [pc, #428]	; (80053f4 <main+0x2d8>)
 8005246:	2201      	movs	r2, #1
 8005248:	705a      	strb	r2, [r3, #1]
	  ludzik_zyje[2]=1;
 800524a:	4b6a      	ldr	r3, [pc, #424]	; (80053f4 <main+0x2d8>)
 800524c:	2201      	movs	r2, #1
 800524e:	709a      	strb	r2, [r3, #2]
	  for (int i=0; i<3; i++)
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	e015      	b.n	8005282 <main+0x166>
	  {
		  if ( HAL_RNG_GetRandomNumber(&hrng) < szansa_zly )
 8005256:	4868      	ldr	r0, [pc, #416]	; (80053f8 <main+0x2dc>)
 8005258:	f7fe ffff 	bl	800425a <HAL_RNG_GetRandomNumber>
 800525c:	4602      	mov	r2, r0
 800525e:	4b67      	ldr	r3, [pc, #412]	; (80053fc <main+0x2e0>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	429a      	cmp	r2, r3
 8005264:	d205      	bcs.n	8005272 <main+0x156>
			  ludzik_zly[i] = 1;
 8005266:	4a66      	ldr	r2, [pc, #408]	; (8005400 <main+0x2e4>)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	2201      	movs	r2, #1
 800526e:	701a      	strb	r2, [r3, #0]
 8005270:	e004      	b.n	800527c <main+0x160>
		  else
			  ludzik_zly[i] = 0;
 8005272:	4a63      	ldr	r2, [pc, #396]	; (8005400 <main+0x2e4>)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4413      	add	r3, r2
 8005278:	2200      	movs	r2, #0
 800527a:	701a      	strb	r2, [r3, #0]
	  for (int i=0; i<3; i++)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3301      	adds	r3, #1
 8005280:	60fb      	str	r3, [r7, #12]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b02      	cmp	r3, #2
 8005286:	dde6      	ble.n	8005256 <main+0x13a>
	  };

	  BSP_LCD_DrawBitmap ( 0,240,obraz0);
 8005288:	4a5e      	ldr	r2, [pc, #376]	; (8005404 <main+0x2e8>)
 800528a:	21f0      	movs	r1, #240	; 0xf0
 800528c:	2000      	movs	r0, #0
 800528e:	f7fb ff3d 	bl	800110c <BSP_LCD_DrawBitmap>
	  HAL_Delay(2000);
 8005292:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005296:	f7fc fc57 	bl	8001b48 <HAL_Delay>
	  for (int i=0; i<3; i++)
 800529a:	2300      	movs	r3, #0
 800529c:	60bb      	str	r3, [r7, #8]
 800529e:	e01d      	b.n	80052dc <main+0x1c0>
	  {
		  if (ludzik_zly[i])
 80052a0:	4a57      	ldr	r2, [pc, #348]	; (8005400 <main+0x2e4>)
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	4413      	add	r3, r2
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00a      	beq.n	80052c2 <main+0x1a6>
			  BSP_LCD_DrawBitmap ( i*80,240,obraz3);
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	4613      	mov	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	4a54      	ldr	r2, [pc, #336]	; (8005408 <main+0x2ec>)
 80052b8:	21f0      	movs	r1, #240	; 0xf0
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fb ff26 	bl	800110c <BSP_LCD_DrawBitmap>
 80052c0:	e009      	b.n	80052d6 <main+0x1ba>
		  else
			  BSP_LCD_DrawBitmap ( i*80,240,obraz1);
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	4a4f      	ldr	r2, [pc, #316]	; (800540c <main+0x2f0>)
 80052ce:	21f0      	movs	r1, #240	; 0xf0
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fb ff1b 	bl	800110c <BSP_LCD_DrawBitmap>
	  for (int i=0; i<3; i++)
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	3301      	adds	r3, #1
 80052da:	60bb      	str	r3, [r7, #8]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	ddde      	ble.n	80052a0 <main+0x184>
	  };

	  // TEORETYCZNIE PETLA W KTOREJ MOZNA STRZELAC
	  mozna_strzelac = 1;
 80052e2:	4b4b      	ldr	r3, [pc, #300]	; (8005410 <main+0x2f4>)
 80052e4:	2201      	movs	r2, #1
 80052e6:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(4000);
 80052e8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80052ec:	f7fc fc2c 	bl	8001b48 <HAL_Delay>
	  mozna_strzelac = 0;
 80052f0:	4b47      	ldr	r3, [pc, #284]	; (8005410 <main+0x2f4>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	701a      	strb	r2, [r3, #0]

	  // TO CO SIE DZIEJE PO STRZELANIU
	  for (int i=0; i<3; i++)
 80052f6:	2300      	movs	r3, #0
 80052f8:	607b      	str	r3, [r7, #4]
 80052fa:	e029      	b.n	8005350 <main+0x234>
	  {
		  if ((ludzik_zly[i] == 1) && (ludzik_zyje[i] == 1))
 80052fc:	4a40      	ldr	r2, [pc, #256]	; (8005400 <main+0x2e4>)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4413      	add	r3, r2
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d020      	beq.n	800534a <main+0x22e>
 8005308:	4a3a      	ldr	r2, [pc, #232]	; (80053f4 <main+0x2d8>)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4413      	add	r3, r2
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01a      	beq.n	800534a <main+0x22e>
		  {
			  zycia = zycia - 1;
 8005314:	4b2c      	ldr	r3, [pc, #176]	; (80053c8 <main+0x2ac>)
 8005316:	f9b3 3000 	ldrsh.w	r3, [r3]
 800531a:	b29b      	uxth	r3, r3
 800531c:	3b01      	subs	r3, #1
 800531e:	b29b      	uxth	r3, r3
 8005320:	b21a      	sxth	r2, r3
 8005322:	4b29      	ldr	r3, [pc, #164]	; (80053c8 <main+0x2ac>)
 8005324:	801a      	strh	r2, [r3, #0]
			  if (zycia < 0) zycia=0;
 8005326:	4b28      	ldr	r3, [pc, #160]	; (80053c8 <main+0x2ac>)
 8005328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800532c:	2b00      	cmp	r3, #0
 800532e:	da02      	bge.n	8005336 <main+0x21a>
 8005330:	4b25      	ldr	r3, [pc, #148]	; (80053c8 <main+0x2ac>)
 8005332:	2200      	movs	r2, #0
 8005334:	801a      	strh	r2, [r3, #0]
			  BSP_LCD_DrawBitmap ( i*80,240,obraz4);
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	4613      	mov	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	4a34      	ldr	r2, [pc, #208]	; (8005414 <main+0x2f8>)
 8005342:	21f0      	movs	r1, #240	; 0xf0
 8005344:	4618      	mov	r0, r3
 8005346:	f7fb fee1 	bl	800110c <BSP_LCD_DrawBitmap>
	  for (int i=0; i<3; i++)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	3301      	adds	r3, #1
 800534e:	607b      	str	r3, [r7, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b02      	cmp	r3, #2
 8005354:	ddd2      	ble.n	80052fc <main+0x1e0>
		  }
	  };
	  memset(wyraz,0,40); // czyszczenie wyrazu
 8005356:	2228      	movs	r2, #40	; 0x28
 8005358:	2100      	movs	r1, #0
 800535a:	4819      	ldr	r0, [pc, #100]	; (80053c0 <main+0x2a4>)
 800535c:	f001 f9b4 	bl	80066c8 <memset>
	  sprintf(wyraz_liczba, "%d", zycia); // int na stringa
 8005360:	4b19      	ldr	r3, [pc, #100]	; (80053c8 <main+0x2ac>)
 8005362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005366:	461a      	mov	r2, r3
 8005368:	491c      	ldr	r1, [pc, #112]	; (80053dc <main+0x2c0>)
 800536a:	481d      	ldr	r0, [pc, #116]	; (80053e0 <main+0x2c4>)
 800536c:	f001 f9b4 	bl	80066d8 <siprintf>
	  strcat(wyraz,wyraz2); // wyraz = "ZYCIA: "
 8005370:	491e      	ldr	r1, [pc, #120]	; (80053ec <main+0x2d0>)
 8005372:	4813      	ldr	r0, [pc, #76]	; (80053c0 <main+0x2a4>)
 8005374:	f001 f9d0 	bl	8006718 <strcat>
	  strcat(wyraz,wyraz_liczba);// wyraz += wyraz_liczba
 8005378:	4919      	ldr	r1, [pc, #100]	; (80053e0 <main+0x2c4>)
 800537a:	4811      	ldr	r0, [pc, #68]	; (80053c0 <main+0x2a4>)
 800537c:	f001 f9cc 	bl	8006718 <strcat>
	  BSP_LCD_DisplayStringAtLine(2, (uint8_t*)wyraz);// wyswietlenie
 8005380:	490f      	ldr	r1, [pc, #60]	; (80053c0 <main+0x2a4>)
 8005382:	2002      	movs	r0, #2
 8005384:	f7fb feaa 	bl	80010dc <BSP_LCD_DisplayStringAtLine>

	  //KONIEC GRY
	  if (zycia <= 0)
 8005388:	4b0f      	ldr	r3, [pc, #60]	; (80053c8 <main+0x2ac>)
 800538a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800538e:	2b00      	cmp	r3, #0
 8005390:	dc11      	bgt.n	80053b6 <main+0x29a>
	  {
		  memset(wyraz,0,40); // czyszczenie wyrazu
 8005392:	2228      	movs	r2, #40	; 0x28
 8005394:	2100      	movs	r1, #0
 8005396:	480a      	ldr	r0, [pc, #40]	; (80053c0 <main+0x2a4>)
 8005398:	f001 f996 	bl	80066c8 <memset>
		  strcat(wyraz,wyraz3); // wyraz = "ZYCIA: "
 800539c:	491e      	ldr	r1, [pc, #120]	; (8005418 <main+0x2fc>)
 800539e:	4808      	ldr	r0, [pc, #32]	; (80053c0 <main+0x2a4>)
 80053a0:	f001 f9ba 	bl	8006718 <strcat>
		  BSP_LCD_DisplayStringAtLine(2, (uint8_t*)wyraz);// wyswietlenie
 80053a4:	4906      	ldr	r1, [pc, #24]	; (80053c0 <main+0x2a4>)
 80053a6:	2002      	movs	r0, #2
 80053a8:	f7fb fe98 	bl	80010dc <BSP_LCD_DisplayStringAtLine>
		  for(;;)
		  {
			  HAL_Delay(4000);
 80053ac:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80053b0:	f7fc fbca 	bl	8001b48 <HAL_Delay>
 80053b4:	e7fa      	b.n	80053ac <main+0x290>
		  }
	  }

	  //ODPOCZYNEK PRZED NASTEPNA RUNDA
	  HAL_Delay(4000);
 80053b6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80053ba:	f7fc fbc5 	bl	8001b48 <HAL_Delay>
  {
 80053be:	e6e2      	b.n	8005186 <main+0x6a>
 80053c0:	2002782c 	.word	0x2002782c
 80053c4:	200276b0 	.word	0x200276b0
 80053c8:	20027446 	.word	0x20027446
 80053cc:	200276b2 	.word	0x200276b2
 80053d0:	20027448 	.word	0x20027448
 80053d4:	2002744a 	.word	0x2002744a
 80053d8:	ff800000 	.word	0xff800000
 80053dc:	08006f1c 	.word	0x08006f1c
 80053e0:	20027954 	.word	0x20027954
 80053e4:	20027454 	.word	0x20027454
 80053e8:	20027460 	.word	0x20027460
 80053ec:	2002746c 	.word	0x2002746c
 80053f0:	200276b4 	.word	0x200276b4
 80053f4:	20027450 	.word	0x20027450
 80053f8:	20027904 	.word	0x20027904
 80053fc:	2002744c 	.word	0x2002744c
 8005400:	200276b8 	.word	0x200276b8
 8005404:	20000050 	.word	0x20000050
 8005408:	200191d4 	.word	0x200191d4
 800540c:	2000e1cc 	.word	0x2000e1cc
 8005410:	20027828 	.word	0x20027828
 8005414:	2001dd50 	.word	0x2001dd50
 8005418:	20027478 	.word	0x20027478

0800541c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b0a0      	sub	sp, #128	; 0x80
 8005420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005422:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005426:	2230      	movs	r2, #48	; 0x30
 8005428:	2100      	movs	r1, #0
 800542a:	4618      	mov	r0, r3
 800542c:	f001 f94c 	bl	80066c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005430:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005434:	2200      	movs	r2, #0
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	605a      	str	r2, [r3, #4]
 800543a:	609a      	str	r2, [r3, #8]
 800543c:	60da      	str	r2, [r3, #12]
 800543e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005440:	f107 030c 	add.w	r3, r7, #12
 8005444:	2230      	movs	r2, #48	; 0x30
 8005446:	2100      	movs	r1, #0
 8005448:	4618      	mov	r0, r3
 800544a:	f001 f93d 	bl	80066c8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800544e:	2300      	movs	r3, #0
 8005450:	60bb      	str	r3, [r7, #8]
 8005452:	4b35      	ldr	r3, [pc, #212]	; (8005528 <SystemClock_Config+0x10c>)
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	4a34      	ldr	r2, [pc, #208]	; (8005528 <SystemClock_Config+0x10c>)
 8005458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800545c:	6413      	str	r3, [r2, #64]	; 0x40
 800545e:	4b32      	ldr	r3, [pc, #200]	; (8005528 <SystemClock_Config+0x10c>)
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005466:	60bb      	str	r3, [r7, #8]
 8005468:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800546a:	2300      	movs	r3, #0
 800546c:	607b      	str	r3, [r7, #4]
 800546e:	4b2f      	ldr	r3, [pc, #188]	; (800552c <SystemClock_Config+0x110>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a2e      	ldr	r2, [pc, #184]	; (800552c <SystemClock_Config+0x110>)
 8005474:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	4b2c      	ldr	r3, [pc, #176]	; (800552c <SystemClock_Config+0x110>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005482:	607b      	str	r3, [r7, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005486:	2301      	movs	r3, #1
 8005488:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800548a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800548e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005490:	2302      	movs	r3, #2
 8005492:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005494:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005498:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800549a:	2304      	movs	r3, #4
 800549c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 800549e:	23b4      	movs	r3, #180	; 0xb4
 80054a0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80054a2:	2302      	movs	r3, #2
 80054a4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80054a6:	2304      	movs	r3, #4
 80054a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80054aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7fe f89a 	bl	80035e8 <HAL_RCC_OscConfig>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80054ba:	f000 fab3 	bl	8005a24 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80054be:	f7fe f843 	bl	8003548 <HAL_PWREx_EnableOverDrive>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80054c8:	f000 faac 	bl	8005a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80054cc:	230f      	movs	r3, #15
 80054ce:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80054d0:	2302      	movs	r3, #2
 80054d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80054d4:	2300      	movs	r3, #0
 80054d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80054d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80054dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80054de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054e2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80054e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80054e8:	2105      	movs	r1, #5
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fe fabe 	bl	8003a6c <HAL_RCC_ClockConfig>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <SystemClock_Config+0xde>
  {
    Error_Handler();
 80054f6:	f000 fa95 	bl	8005a24 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80054fa:	2308      	movs	r3, #8
 80054fc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 166;
 80054fe:	23a6      	movs	r3, #166	; 0xa6
 8005500:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8005502:	2302      	movs	r3, #2
 8005504:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8005506:	2300      	movs	r3, #0
 8005508:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800550a:	f107 030c 	add.w	r3, r7, #12
 800550e:	4618      	mov	r0, r3
 8005510:	f7fe fc86 	bl	8003e20 <HAL_RCCEx_PeriphCLKConfig>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <SystemClock_Config+0x102>
  {
    Error_Handler();
 800551a:	f000 fa83 	bl	8005a24 <Error_Handler>
  }
}
 800551e:	bf00      	nop
 8005520:	3780      	adds	r7, #128	; 0x80
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	40023800 	.word	0x40023800
 800552c:	40007000 	.word	0x40007000

08005530 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8005534:	4b06      	ldr	r3, [pc, #24]	; (8005550 <MX_CRC_Init+0x20>)
 8005536:	4a07      	ldr	r2, [pc, #28]	; (8005554 <MX_CRC_Init+0x24>)
 8005538:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800553a:	4805      	ldr	r0, [pc, #20]	; (8005550 <MX_CRC_Init+0x20>)
 800553c:	f7fc fc37 	bl	8001dae <HAL_CRC_Init>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8005546:	f000 fa6d 	bl	8005a24 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800554a:	bf00      	nop
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	20027854 	.word	0x20027854
 8005554:	40023000 	.word	0x40023000

08005558 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800555c:	4b15      	ldr	r3, [pc, #84]	; (80055b4 <MX_DMA2D_Init+0x5c>)
 800555e:	4a16      	ldr	r2, [pc, #88]	; (80055b8 <MX_DMA2D_Init+0x60>)
 8005560:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8005562:	4b14      	ldr	r3, [pc, #80]	; (80055b4 <MX_DMA2D_Init+0x5c>)
 8005564:	2200      	movs	r2, #0
 8005566:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8005568:	4b12      	ldr	r3, [pc, #72]	; (80055b4 <MX_DMA2D_Init+0x5c>)
 800556a:	2202      	movs	r2, #2
 800556c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800556e:	4b11      	ldr	r3, [pc, #68]	; (80055b4 <MX_DMA2D_Init+0x5c>)
 8005570:	2200      	movs	r2, #0
 8005572:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8005574:	4b0f      	ldr	r3, [pc, #60]	; (80055b4 <MX_DMA2D_Init+0x5c>)
 8005576:	2200      	movs	r2, #0
 8005578:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800557a:	4b0e      	ldr	r3, [pc, #56]	; (80055b4 <MX_DMA2D_Init+0x5c>)
 800557c:	2202      	movs	r2, #2
 800557e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8005580:	4b0c      	ldr	r3, [pc, #48]	; (80055b4 <MX_DMA2D_Init+0x5c>)
 8005582:	2200      	movs	r2, #0
 8005584:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8005586:	4b0b      	ldr	r3, [pc, #44]	; (80055b4 <MX_DMA2D_Init+0x5c>)
 8005588:	2200      	movs	r2, #0
 800558a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800558c:	4809      	ldr	r0, [pc, #36]	; (80055b4 <MX_DMA2D_Init+0x5c>)
 800558e:	f7fc fde9 	bl	8002164 <HAL_DMA2D_Init>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8005598:	f000 fa44 	bl	8005a24 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800559c:	2101      	movs	r1, #1
 800559e:	4805      	ldr	r0, [pc, #20]	; (80055b4 <MX_DMA2D_Init+0x5c>)
 80055a0:	f7fc ff3e 	bl	8002420 <HAL_DMA2D_ConfigLayer>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80055aa:	f000 fa3b 	bl	8005a24 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80055ae:	bf00      	nop
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20027914 	.word	0x20027914
 80055b8:	4002b000 	.word	0x4002b000

080055bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80055c0:	4b1b      	ldr	r3, [pc, #108]	; (8005630 <MX_I2C3_Init+0x74>)
 80055c2:	4a1c      	ldr	r2, [pc, #112]	; (8005634 <MX_I2C3_Init+0x78>)
 80055c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80055c6:	4b1a      	ldr	r3, [pc, #104]	; (8005630 <MX_I2C3_Init+0x74>)
 80055c8:	4a1b      	ldr	r2, [pc, #108]	; (8005638 <MX_I2C3_Init+0x7c>)
 80055ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80055cc:	4b18      	ldr	r3, [pc, #96]	; (8005630 <MX_I2C3_Init+0x74>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80055d2:	4b17      	ldr	r3, [pc, #92]	; (8005630 <MX_I2C3_Init+0x74>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80055d8:	4b15      	ldr	r3, [pc, #84]	; (8005630 <MX_I2C3_Init+0x74>)
 80055da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055de:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80055e0:	4b13      	ldr	r3, [pc, #76]	; (8005630 <MX_I2C3_Init+0x74>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80055e6:	4b12      	ldr	r3, [pc, #72]	; (8005630 <MX_I2C3_Init+0x74>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80055ec:	4b10      	ldr	r3, [pc, #64]	; (8005630 <MX_I2C3_Init+0x74>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80055f2:	4b0f      	ldr	r3, [pc, #60]	; (8005630 <MX_I2C3_Init+0x74>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80055f8:	480d      	ldr	r0, [pc, #52]	; (8005630 <MX_I2C3_Init+0x74>)
 80055fa:	f7fd fb31 	bl	8002c60 <HAL_I2C_Init>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005604:	f000 fa0e 	bl	8005a24 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005608:	2100      	movs	r1, #0
 800560a:	4809      	ldr	r0, [pc, #36]	; (8005630 <MX_I2C3_Init+0x74>)
 800560c:	f7fd fc50 	bl	8002eb0 <HAL_I2CEx_ConfigAnalogFilter>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8005616:	f000 fa05 	bl	8005a24 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800561a:	2100      	movs	r1, #0
 800561c:	4804      	ldr	r0, [pc, #16]	; (8005630 <MX_I2C3_Init+0x74>)
 800561e:	f7fd fc83 	bl	8002f28 <HAL_I2CEx_ConfigDigitalFilter>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8005628:	f000 f9fc 	bl	8005a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800562c:	bf00      	nop
 800562e:	bd80      	pop	{r7, pc}
 8005630:	2002777c 	.word	0x2002777c
 8005634:	40005c00 	.word	0x40005c00
 8005638:	000186a0 	.word	0x000186a0

0800563c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b09a      	sub	sp, #104	; 0x68
 8005640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8005642:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005646:	2234      	movs	r2, #52	; 0x34
 8005648:	2100      	movs	r1, #0
 800564a:	4618      	mov	r0, r3
 800564c:	f001 f83c 	bl	80066c8 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8005650:	463b      	mov	r3, r7
 8005652:	2234      	movs	r2, #52	; 0x34
 8005654:	2100      	movs	r1, #0
 8005656:	4618      	mov	r0, r3
 8005658:	f001 f836 	bl	80066c8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800565c:	4b4e      	ldr	r3, [pc, #312]	; (8005798 <MX_LTDC_Init+0x15c>)
 800565e:	4a4f      	ldr	r2, [pc, #316]	; (800579c <MX_LTDC_Init+0x160>)
 8005660:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005662:	4b4d      	ldr	r3, [pc, #308]	; (8005798 <MX_LTDC_Init+0x15c>)
 8005664:	2200      	movs	r2, #0
 8005666:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8005668:	4b4b      	ldr	r3, [pc, #300]	; (8005798 <MX_LTDC_Init+0x15c>)
 800566a:	2200      	movs	r2, #0
 800566c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800566e:	4b4a      	ldr	r3, [pc, #296]	; (8005798 <MX_LTDC_Init+0x15c>)
 8005670:	2200      	movs	r2, #0
 8005672:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005674:	4b48      	ldr	r3, [pc, #288]	; (8005798 <MX_LTDC_Init+0x15c>)
 8005676:	2200      	movs	r2, #0
 8005678:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800567a:	4b47      	ldr	r3, [pc, #284]	; (8005798 <MX_LTDC_Init+0x15c>)
 800567c:	2207      	movs	r2, #7
 800567e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8005680:	4b45      	ldr	r3, [pc, #276]	; (8005798 <MX_LTDC_Init+0x15c>)
 8005682:	2203      	movs	r2, #3
 8005684:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8005686:	4b44      	ldr	r3, [pc, #272]	; (8005798 <MX_LTDC_Init+0x15c>)
 8005688:	220e      	movs	r2, #14
 800568a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800568c:	4b42      	ldr	r3, [pc, #264]	; (8005798 <MX_LTDC_Init+0x15c>)
 800568e:	2205      	movs	r2, #5
 8005690:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 254;
 8005692:	4b41      	ldr	r3, [pc, #260]	; (8005798 <MX_LTDC_Init+0x15c>)
 8005694:	22fe      	movs	r2, #254	; 0xfe
 8005696:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 325;
 8005698:	4b3f      	ldr	r3, [pc, #252]	; (8005798 <MX_LTDC_Init+0x15c>)
 800569a:	f240 1245 	movw	r2, #325	; 0x145
 800569e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 260;
 80056a0:	4b3d      	ldr	r3, [pc, #244]	; (8005798 <MX_LTDC_Init+0x15c>)
 80056a2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80056a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80056a8:	4b3b      	ldr	r3, [pc, #236]	; (8005798 <MX_LTDC_Init+0x15c>)
 80056aa:	f240 1247 	movw	r2, #327	; 0x147
 80056ae:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 40;
 80056b0:	4b39      	ldr	r3, [pc, #228]	; (8005798 <MX_LTDC_Init+0x15c>)
 80056b2:	2228      	movs	r2, #40	; 0x28
 80056b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 40;
 80056b8:	4b37      	ldr	r3, [pc, #220]	; (8005798 <MX_LTDC_Init+0x15c>)
 80056ba:	2228      	movs	r2, #40	; 0x28
 80056bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 40;
 80056c0:	4b35      	ldr	r3, [pc, #212]	; (8005798 <MX_LTDC_Init+0x15c>)
 80056c2:	2228      	movs	r2, #40	; 0x28
 80056c4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80056c8:	4833      	ldr	r0, [pc, #204]	; (8005798 <MX_LTDC_Init+0x15c>)
 80056ca:	f7fd fc6d 	bl	8002fa8 <HAL_LTDC_Init>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <MX_LTDC_Init+0x9c>
  {
    Error_Handler();
 80056d4:	f000 f9a6 	bl	8005a24 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80056d8:	2300      	movs	r3, #0
 80056da:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80056e0:	2300      	movs	r3, #0
 80056e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 80056e4:	2300      	movs	r3, #0
 80056e6:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80056e8:	2300      	movs	r3, #0
 80056ea:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80056ec:	2300      	movs	r3, #0
 80056ee:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80056f0:	2300      	movs	r3, #0
 80056f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80056f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056f8:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80056fa:	2305      	movs	r3, #5
 80056fc:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80056fe:	2300      	movs	r3, #0
 8005700:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8005702:	2300      	movs	r3, #0
 8005704:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8005706:	2300      	movs	r3, #0
 8005708:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800570a:	2300      	movs	r3, #0
 800570c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8005710:	2300      	movs	r3, #0
 8005712:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8005716:	2300      	movs	r3, #0
 8005718:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800571c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005720:	2200      	movs	r2, #0
 8005722:	4619      	mov	r1, r3
 8005724:	481c      	ldr	r0, [pc, #112]	; (8005798 <MX_LTDC_Init+0x15c>)
 8005726:	f7fd fd0f 	bl	8003148 <HAL_LTDC_ConfigLayer>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8005730:	f000 f978 	bl	8005a24 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8005734:	2300      	movs	r3, #0
 8005736:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8005738:	2300      	movs	r3, #0
 800573a:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800573c:	2300      	movs	r3, #0
 800573e:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8005740:	2300      	movs	r3, #0
 8005742:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8005744:	2300      	movs	r3, #0
 8005746:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8005748:	2300      	movs	r3, #0
 800574a:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800574c:	2300      	movs	r3, #0
 800574e:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8005750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005754:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8005756:	2305      	movs	r3, #5
 8005758:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800575a:	2300      	movs	r3, #0
 800575c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800575e:	2300      	movs	r3, #0
 8005760:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8005762:	2300      	movs	r3, #0
 8005764:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800576c:	2300      	movs	r3, #0
 800576e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8005778:	463b      	mov	r3, r7
 800577a:	2201      	movs	r2, #1
 800577c:	4619      	mov	r1, r3
 800577e:	4806      	ldr	r0, [pc, #24]	; (8005798 <MX_LTDC_Init+0x15c>)
 8005780:	f7fd fce2 	bl	8003148 <HAL_LTDC_ConfigLayer>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <MX_LTDC_Init+0x152>
  {
    Error_Handler();
 800578a:	f000 f94b 	bl	8005a24 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800578e:	bf00      	nop
 8005790:	3768      	adds	r7, #104	; 0x68
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	2002785c 	.word	0x2002785c
 800579c:	40016800 	.word	0x40016800

080057a0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80057a4:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <MX_RNG_Init+0x20>)
 80057a6:	4a07      	ldr	r2, [pc, #28]	; (80057c4 <MX_RNG_Init+0x24>)
 80057a8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80057aa:	4805      	ldr	r0, [pc, #20]	; (80057c0 <MX_RNG_Init+0x20>)
 80057ac:	f7fe fcdc 	bl	8004168 <HAL_RNG_Init>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80057b6:	f000 f935 	bl	8005a24 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80057ba:	bf00      	nop
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	20027904 	.word	0x20027904
 80057c4:	50060800 	.word	0x50060800

080057c8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80057cc:	4b17      	ldr	r3, [pc, #92]	; (800582c <MX_SPI5_Init+0x64>)
 80057ce:	4a18      	ldr	r2, [pc, #96]	; (8005830 <MX_SPI5_Init+0x68>)
 80057d0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80057d2:	4b16      	ldr	r3, [pc, #88]	; (800582c <MX_SPI5_Init+0x64>)
 80057d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80057d8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80057da:	4b14      	ldr	r3, [pc, #80]	; (800582c <MX_SPI5_Init+0x64>)
 80057dc:	2200      	movs	r2, #0
 80057de:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80057e0:	4b12      	ldr	r3, [pc, #72]	; (800582c <MX_SPI5_Init+0x64>)
 80057e2:	2200      	movs	r2, #0
 80057e4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80057e6:	4b11      	ldr	r3, [pc, #68]	; (800582c <MX_SPI5_Init+0x64>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80057ec:	4b0f      	ldr	r3, [pc, #60]	; (800582c <MX_SPI5_Init+0x64>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80057f2:	4b0e      	ldr	r3, [pc, #56]	; (800582c <MX_SPI5_Init+0x64>)
 80057f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057f8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057fa:	4b0c      	ldr	r3, [pc, #48]	; (800582c <MX_SPI5_Init+0x64>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005800:	4b0a      	ldr	r3, [pc, #40]	; (800582c <MX_SPI5_Init+0x64>)
 8005802:	2200      	movs	r2, #0
 8005804:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8005806:	4b09      	ldr	r3, [pc, #36]	; (800582c <MX_SPI5_Init+0x64>)
 8005808:	2200      	movs	r2, #0
 800580a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800580c:	4b07      	ldr	r3, [pc, #28]	; (800582c <MX_SPI5_Init+0x64>)
 800580e:	2200      	movs	r2, #0
 8005810:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8005812:	4b06      	ldr	r3, [pc, #24]	; (800582c <MX_SPI5_Init+0x64>)
 8005814:	220a      	movs	r2, #10
 8005816:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8005818:	4804      	ldr	r0, [pc, #16]	; (800582c <MX_SPI5_Init+0x64>)
 800581a:	f7fe fdb2 	bl	8004382 <HAL_SPI_Init>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d001      	beq.n	8005828 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8005824:	f000 f8fe 	bl	8005a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8005828:	bf00      	nop
 800582a:	bd80      	pop	{r7, pc}
 800582c:	200277d0 	.word	0x200277d0
 8005830:	40015000 	.word	0x40015000

08005834 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800583a:	1d3b      	adds	r3, r7, #4
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	605a      	str	r2, [r3, #4]
 8005842:	609a      	str	r2, [r3, #8]
 8005844:	60da      	str	r2, [r3, #12]
 8005846:	611a      	str	r2, [r3, #16]
 8005848:	615a      	str	r2, [r3, #20]
 800584a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800584c:	4b1e      	ldr	r3, [pc, #120]	; (80058c8 <MX_FMC_Init+0x94>)
 800584e:	4a1f      	ldr	r2, [pc, #124]	; (80058cc <MX_FMC_Init+0x98>)
 8005850:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8005852:	4b1d      	ldr	r3, [pc, #116]	; (80058c8 <MX_FMC_Init+0x94>)
 8005854:	2201      	movs	r2, #1
 8005856:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8005858:	4b1b      	ldr	r3, [pc, #108]	; (80058c8 <MX_FMC_Init+0x94>)
 800585a:	2200      	movs	r2, #0
 800585c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800585e:	4b1a      	ldr	r3, [pc, #104]	; (80058c8 <MX_FMC_Init+0x94>)
 8005860:	2204      	movs	r2, #4
 8005862:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8005864:	4b18      	ldr	r3, [pc, #96]	; (80058c8 <MX_FMC_Init+0x94>)
 8005866:	2210      	movs	r2, #16
 8005868:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800586a:	4b17      	ldr	r3, [pc, #92]	; (80058c8 <MX_FMC_Init+0x94>)
 800586c:	2240      	movs	r2, #64	; 0x40
 800586e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8005870:	4b15      	ldr	r3, [pc, #84]	; (80058c8 <MX_FMC_Init+0x94>)
 8005872:	2280      	movs	r2, #128	; 0x80
 8005874:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005876:	4b14      	ldr	r3, [pc, #80]	; (80058c8 <MX_FMC_Init+0x94>)
 8005878:	2200      	movs	r2, #0
 800587a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800587c:	4b12      	ldr	r3, [pc, #72]	; (80058c8 <MX_FMC_Init+0x94>)
 800587e:	2200      	movs	r2, #0
 8005880:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8005882:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <MX_FMC_Init+0x94>)
 8005884:	2200      	movs	r2, #0
 8005886:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8005888:	4b0f      	ldr	r3, [pc, #60]	; (80058c8 <MX_FMC_Init+0x94>)
 800588a:	2200      	movs	r2, #0
 800588c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800588e:	2310      	movs	r3, #16
 8005890:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8005892:	2310      	movs	r3, #16
 8005894:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8005896:	2310      	movs	r3, #16
 8005898:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800589a:	2310      	movs	r3, #16
 800589c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800589e:	2310      	movs	r3, #16
 80058a0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80058a2:	2310      	movs	r3, #16
 80058a4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80058a6:	2310      	movs	r3, #16
 80058a8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80058aa:	1d3b      	adds	r3, r7, #4
 80058ac:	4619      	mov	r1, r3
 80058ae:	4806      	ldr	r0, [pc, #24]	; (80058c8 <MX_FMC_Init+0x94>)
 80058b0:	f7fe fce8 	bl	8004284 <HAL_SDRAM_Init>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80058ba:	f000 f8b3 	bl	8005a24 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80058be:	bf00      	nop
 80058c0:	3720      	adds	r7, #32
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	2002795c 	.word	0x2002795c
 80058cc:	a0000140 	.word	0xa0000140

080058d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08e      	sub	sp, #56	; 0x38
 80058d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	605a      	str	r2, [r3, #4]
 80058e0:	609a      	str	r2, [r3, #8]
 80058e2:	60da      	str	r2, [r3, #12]
 80058e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80058e6:	2300      	movs	r3, #0
 80058e8:	623b      	str	r3, [r7, #32]
 80058ea:	4b4b      	ldr	r3, [pc, #300]	; (8005a18 <MX_GPIO_Init+0x148>)
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	4a4a      	ldr	r2, [pc, #296]	; (8005a18 <MX_GPIO_Init+0x148>)
 80058f0:	f043 0310 	orr.w	r3, r3, #16
 80058f4:	6313      	str	r3, [r2, #48]	; 0x30
 80058f6:	4b48      	ldr	r3, [pc, #288]	; (8005a18 <MX_GPIO_Init+0x148>)
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	f003 0310 	and.w	r3, r3, #16
 80058fe:	623b      	str	r3, [r7, #32]
 8005900:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005902:	2300      	movs	r3, #0
 8005904:	61fb      	str	r3, [r7, #28]
 8005906:	4b44      	ldr	r3, [pc, #272]	; (8005a18 <MX_GPIO_Init+0x148>)
 8005908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590a:	4a43      	ldr	r2, [pc, #268]	; (8005a18 <MX_GPIO_Init+0x148>)
 800590c:	f043 0320 	orr.w	r3, r3, #32
 8005910:	6313      	str	r3, [r2, #48]	; 0x30
 8005912:	4b41      	ldr	r3, [pc, #260]	; (8005a18 <MX_GPIO_Init+0x148>)
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	f003 0320 	and.w	r3, r3, #32
 800591a:	61fb      	str	r3, [r7, #28]
 800591c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800591e:	2300      	movs	r3, #0
 8005920:	61bb      	str	r3, [r7, #24]
 8005922:	4b3d      	ldr	r3, [pc, #244]	; (8005a18 <MX_GPIO_Init+0x148>)
 8005924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005926:	4a3c      	ldr	r2, [pc, #240]	; (8005a18 <MX_GPIO_Init+0x148>)
 8005928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800592c:	6313      	str	r3, [r2, #48]	; 0x30
 800592e:	4b3a      	ldr	r3, [pc, #232]	; (8005a18 <MX_GPIO_Init+0x148>)
 8005930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005936:	61bb      	str	r3, [r7, #24]
 8005938:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800593a:	2300      	movs	r3, #0
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	4b36      	ldr	r3, [pc, #216]	; (8005a18 <MX_GPIO_Init+0x148>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	4a35      	ldr	r2, [pc, #212]	; (8005a18 <MX_GPIO_Init+0x148>)
 8005944:	f043 0304 	orr.w	r3, r3, #4
 8005948:	6313      	str	r3, [r2, #48]	; 0x30
 800594a:	4b33      	ldr	r3, [pc, #204]	; (8005a18 <MX_GPIO_Init+0x148>)
 800594c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594e:	f003 0304 	and.w	r3, r3, #4
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005956:	2300      	movs	r3, #0
 8005958:	613b      	str	r3, [r7, #16]
 800595a:	4b2f      	ldr	r3, [pc, #188]	; (8005a18 <MX_GPIO_Init+0x148>)
 800595c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595e:	4a2e      	ldr	r2, [pc, #184]	; (8005a18 <MX_GPIO_Init+0x148>)
 8005960:	f043 0301 	orr.w	r3, r3, #1
 8005964:	6313      	str	r3, [r2, #48]	; 0x30
 8005966:	4b2c      	ldr	r3, [pc, #176]	; (8005a18 <MX_GPIO_Init+0x148>)
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	613b      	str	r3, [r7, #16]
 8005970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	4b28      	ldr	r3, [pc, #160]	; (8005a18 <MX_GPIO_Init+0x148>)
 8005978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597a:	4a27      	ldr	r2, [pc, #156]	; (8005a18 <MX_GPIO_Init+0x148>)
 800597c:	f043 0302 	orr.w	r3, r3, #2
 8005980:	6313      	str	r3, [r2, #48]	; 0x30
 8005982:	4b25      	ldr	r3, [pc, #148]	; (8005a18 <MX_GPIO_Init+0x148>)
 8005984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800598e:	2300      	movs	r3, #0
 8005990:	60bb      	str	r3, [r7, #8]
 8005992:	4b21      	ldr	r3, [pc, #132]	; (8005a18 <MX_GPIO_Init+0x148>)
 8005994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005996:	4a20      	ldr	r2, [pc, #128]	; (8005a18 <MX_GPIO_Init+0x148>)
 8005998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800599c:	6313      	str	r3, [r2, #48]	; 0x30
 800599e:	4b1e      	ldr	r3, [pc, #120]	; (8005a18 <MX_GPIO_Init+0x148>)
 80059a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a6:	60bb      	str	r3, [r7, #8]
 80059a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80059aa:	2300      	movs	r3, #0
 80059ac:	607b      	str	r3, [r7, #4]
 80059ae:	4b1a      	ldr	r3, [pc, #104]	; (8005a18 <MX_GPIO_Init+0x148>)
 80059b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b2:	4a19      	ldr	r2, [pc, #100]	; (8005a18 <MX_GPIO_Init+0x148>)
 80059b4:	f043 0308 	orr.w	r3, r3, #8
 80059b8:	6313      	str	r3, [r2, #48]	; 0x30
 80059ba:	4b17      	ldr	r3, [pc, #92]	; (8005a18 <MX_GPIO_Init+0x148>)
 80059bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059be:	f003 0308 	and.w	r3, r3, #8
 80059c2:	607b      	str	r3, [r7, #4]
 80059c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE4 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 80059c6:	2354      	movs	r3, #84	; 0x54
 80059c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80059ca:	4b14      	ldr	r3, [pc, #80]	; (8005a1c <MX_GPIO_Init+0x14c>)
 80059cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ce:	2300      	movs	r3, #0
 80059d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80059d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059d6:	4619      	mov	r1, r3
 80059d8:	4811      	ldr	r0, [pc, #68]	; (8005a20 <MX_GPIO_Init+0x150>)
 80059da:	f7fc fe4f 	bl	800267c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80059de:	2200      	movs	r2, #0
 80059e0:	2100      	movs	r1, #0
 80059e2:	2008      	movs	r0, #8
 80059e4:	f7fc f9ad 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80059e8:	2008      	movs	r0, #8
 80059ea:	f7fc f9c6 	bl	8001d7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80059ee:	2200      	movs	r2, #0
 80059f0:	2100      	movs	r1, #0
 80059f2:	200a      	movs	r0, #10
 80059f4:	f7fc f9a5 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80059f8:	200a      	movs	r0, #10
 80059fa:	f7fc f9be 	bl	8001d7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80059fe:	2200      	movs	r2, #0
 8005a00:	2100      	movs	r1, #0
 8005a02:	2017      	movs	r0, #23
 8005a04:	f7fc f99d 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005a08:	2017      	movs	r0, #23
 8005a0a:	f7fc f9b6 	bl	8001d7a <HAL_NVIC_EnableIRQ>

}
 8005a0e:	bf00      	nop
 8005a10:	3738      	adds	r7, #56	; 0x38
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	40023800 	.word	0x40023800
 8005a1c:	10110000 	.word	0x10110000
 8005a20:	40021000 	.word	0x40021000

08005a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005a28:	bf00      	nop
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
	...

08005a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	607b      	str	r3, [r7, #4]
 8005a3e:	4b10      	ldr	r3, [pc, #64]	; (8005a80 <HAL_MspInit+0x4c>)
 8005a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a42:	4a0f      	ldr	r2, [pc, #60]	; (8005a80 <HAL_MspInit+0x4c>)
 8005a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a48:	6453      	str	r3, [r2, #68]	; 0x44
 8005a4a:	4b0d      	ldr	r3, [pc, #52]	; (8005a80 <HAL_MspInit+0x4c>)
 8005a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a52:	607b      	str	r3, [r7, #4]
 8005a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a56:	2300      	movs	r3, #0
 8005a58:	603b      	str	r3, [r7, #0]
 8005a5a:	4b09      	ldr	r3, [pc, #36]	; (8005a80 <HAL_MspInit+0x4c>)
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	4a08      	ldr	r2, [pc, #32]	; (8005a80 <HAL_MspInit+0x4c>)
 8005a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a64:	6413      	str	r3, [r2, #64]	; 0x40
 8005a66:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <HAL_MspInit+0x4c>)
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a6e:	603b      	str	r3, [r7, #0]
 8005a70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	40023800 	.word	0x40023800

08005a84 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a0b      	ldr	r2, [pc, #44]	; (8005ac0 <HAL_CRC_MspInit+0x3c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d10d      	bne.n	8005ab2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	4b0a      	ldr	r3, [pc, #40]	; (8005ac4 <HAL_CRC_MspInit+0x40>)
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9e:	4a09      	ldr	r2, [pc, #36]	; (8005ac4 <HAL_CRC_MspInit+0x40>)
 8005aa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8005aa6:	4b07      	ldr	r3, [pc, #28]	; (8005ac4 <HAL_CRC_MspInit+0x40>)
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005aae:	60fb      	str	r3, [r7, #12]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8005ab2:	bf00      	nop
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	40023000 	.word	0x40023000
 8005ac4:	40023800 	.word	0x40023800

08005ac8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a0b      	ldr	r2, [pc, #44]	; (8005b04 <HAL_DMA2D_MspInit+0x3c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d10d      	bne.n	8005af6 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005ada:	2300      	movs	r3, #0
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <HAL_DMA2D_MspInit+0x40>)
 8005ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae2:	4a09      	ldr	r2, [pc, #36]	; (8005b08 <HAL_DMA2D_MspInit+0x40>)
 8005ae4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8005aea:	4b07      	ldr	r3, [pc, #28]	; (8005b08 <HAL_DMA2D_MspInit+0x40>)
 8005aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005af2:	60fb      	str	r3, [r7, #12]
 8005af4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8005af6:	bf00      	nop
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	4002b000 	.word	0x4002b000
 8005b08:	40023800 	.word	0x40023800

08005b0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08a      	sub	sp, #40	; 0x28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b14:	f107 0314 	add.w	r3, r7, #20
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	605a      	str	r2, [r3, #4]
 8005b1e:	609a      	str	r2, [r3, #8]
 8005b20:	60da      	str	r2, [r3, #12]
 8005b22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a29      	ldr	r2, [pc, #164]	; (8005bd0 <HAL_I2C_MspInit+0xc4>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d14b      	bne.n	8005bc6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b2e:	2300      	movs	r3, #0
 8005b30:	613b      	str	r3, [r7, #16]
 8005b32:	4b28      	ldr	r3, [pc, #160]	; (8005bd4 <HAL_I2C_MspInit+0xc8>)
 8005b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b36:	4a27      	ldr	r2, [pc, #156]	; (8005bd4 <HAL_I2C_MspInit+0xc8>)
 8005b38:	f043 0304 	orr.w	r3, r3, #4
 8005b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b3e:	4b25      	ldr	r3, [pc, #148]	; (8005bd4 <HAL_I2C_MspInit+0xc8>)
 8005b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b42:	f003 0304 	and.w	r3, r3, #4
 8005b46:	613b      	str	r3, [r7, #16]
 8005b48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	4b21      	ldr	r3, [pc, #132]	; (8005bd4 <HAL_I2C_MspInit+0xc8>)
 8005b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b52:	4a20      	ldr	r2, [pc, #128]	; (8005bd4 <HAL_I2C_MspInit+0xc8>)
 8005b54:	f043 0301 	orr.w	r3, r3, #1
 8005b58:	6313      	str	r3, [r2, #48]	; 0x30
 8005b5a:	4b1e      	ldr	r3, [pc, #120]	; (8005bd4 <HAL_I2C_MspInit+0xc8>)
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005b6c:	2312      	movs	r3, #18
 8005b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b70:	2301      	movs	r3, #1
 8005b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b74:	2303      	movs	r3, #3
 8005b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005b78:	2304      	movs	r3, #4
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b7c:	f107 0314 	add.w	r3, r7, #20
 8005b80:	4619      	mov	r1, r3
 8005b82:	4815      	ldr	r0, [pc, #84]	; (8005bd8 <HAL_I2C_MspInit+0xcc>)
 8005b84:	f7fc fd7a 	bl	800267c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005b88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005b8e:	2312      	movs	r3, #18
 8005b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b92:	2301      	movs	r3, #1
 8005b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b96:	2303      	movs	r3, #3
 8005b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005b9a:	2304      	movs	r3, #4
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b9e:	f107 0314 	add.w	r3, r7, #20
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	480d      	ldr	r0, [pc, #52]	; (8005bdc <HAL_I2C_MspInit+0xd0>)
 8005ba6:	f7fc fd69 	bl	800267c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005baa:	2300      	movs	r3, #0
 8005bac:	60bb      	str	r3, [r7, #8]
 8005bae:	4b09      	ldr	r3, [pc, #36]	; (8005bd4 <HAL_I2C_MspInit+0xc8>)
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	4a08      	ldr	r2, [pc, #32]	; (8005bd4 <HAL_I2C_MspInit+0xc8>)
 8005bb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8005bba:	4b06      	ldr	r3, [pc, #24]	; (8005bd4 <HAL_I2C_MspInit+0xc8>)
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bc2:	60bb      	str	r3, [r7, #8]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005bc6:	bf00      	nop
 8005bc8:	3728      	adds	r7, #40	; 0x28
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	40005c00 	.word	0x40005c00
 8005bd4:	40023800 	.word	0x40023800
 8005bd8:	40020800 	.word	0x40020800
 8005bdc:	40020000 	.word	0x40020000

08005be0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b08e      	sub	sp, #56	; 0x38
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bec:	2200      	movs	r2, #0
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	605a      	str	r2, [r3, #4]
 8005bf2:	609a      	str	r2, [r3, #8]
 8005bf4:	60da      	str	r2, [r3, #12]
 8005bf6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a77      	ldr	r2, [pc, #476]	; (8005ddc <HAL_LTDC_MspInit+0x1fc>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	f040 80e8 	bne.w	8005dd4 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005c04:	2300      	movs	r3, #0
 8005c06:	623b      	str	r3, [r7, #32]
 8005c08:	4b75      	ldr	r3, [pc, #468]	; (8005de0 <HAL_LTDC_MspInit+0x200>)
 8005c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c0c:	4a74      	ldr	r2, [pc, #464]	; (8005de0 <HAL_LTDC_MspInit+0x200>)
 8005c0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c12:	6453      	str	r3, [r2, #68]	; 0x44
 8005c14:	4b72      	ldr	r3, [pc, #456]	; (8005de0 <HAL_LTDC_MspInit+0x200>)
 8005c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c1c:	623b      	str	r3, [r7, #32]
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c20:	2300      	movs	r3, #0
 8005c22:	61fb      	str	r3, [r7, #28]
 8005c24:	4b6e      	ldr	r3, [pc, #440]	; (8005de0 <HAL_LTDC_MspInit+0x200>)
 8005c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c28:	4a6d      	ldr	r2, [pc, #436]	; (8005de0 <HAL_LTDC_MspInit+0x200>)
 8005c2a:	f043 0320 	orr.w	r3, r3, #32
 8005c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8005c30:	4b6b      	ldr	r3, [pc, #428]	; (8005de0 <HAL_LTDC_MspInit+0x200>)
 8005c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c34:	f003 0320 	and.w	r3, r3, #32
 8005c38:	61fb      	str	r3, [r7, #28]
 8005c3a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	61bb      	str	r3, [r7, #24]
 8005c40:	4b67      	ldr	r3, [pc, #412]	; (8005de0 <HAL_LTDC_MspInit+0x200>)
 8005c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c44:	4a66      	ldr	r2, [pc, #408]	; (8005de0 <HAL_LTDC_MspInit+0x200>)
 8005c46:	f043 0301 	orr.w	r3, r3, #1
 8005c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8005c4c:	4b64      	ldr	r3, [pc, #400]	; (8005de0 <HAL_LTDC_MspInit+0x200>)
 8005c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	61bb      	str	r3, [r7, #24]
 8005c56:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c58:	2300      	movs	r3, #0
 8005c5a:	617b      	str	r3, [r7, #20]
 8005c5c:	4b60      	ldr	r3, [pc, #384]	; (8005de0 <HAL_LTDC_MspInit+0x200>)
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c60:	4a5f      	ldr	r2, [pc, #380]	; (8005de0 <HAL_LTDC_MspInit+0x200>)
 8005c62:	f043 0302 	orr.w	r3, r3, #2
 8005c66:	6313      	str	r3, [r2, #48]	; 0x30
 8005c68:	4b5d      	ldr	r3, [pc, #372]	; (8005de0 <HAL_LTDC_MspInit+0x200>)
 8005c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005c74:	2300      	movs	r3, #0
 8005c76:	613b      	str	r3, [r7, #16]
 8005c78:	4b59      	ldr	r3, [pc, #356]	; (8005de0 <HAL_LTDC_MspInit+0x200>)
 8005c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7c:	4a58      	ldr	r2, [pc, #352]	; (8005de0 <HAL_LTDC_MspInit+0x200>)
 8005c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c82:	6313      	str	r3, [r2, #48]	; 0x30
 8005c84:	4b56      	ldr	r3, [pc, #344]	; (8005de0 <HAL_LTDC_MspInit+0x200>)
 8005c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8c:	613b      	str	r3, [r7, #16]
 8005c8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c90:	2300      	movs	r3, #0
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	4b52      	ldr	r3, [pc, #328]	; (8005de0 <HAL_LTDC_MspInit+0x200>)
 8005c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c98:	4a51      	ldr	r2, [pc, #324]	; (8005de0 <HAL_LTDC_MspInit+0x200>)
 8005c9a:	f043 0304 	orr.w	r3, r3, #4
 8005c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8005ca0:	4b4f      	ldr	r3, [pc, #316]	; (8005de0 <HAL_LTDC_MspInit+0x200>)
 8005ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca4:	f003 0304 	and.w	r3, r3, #4
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005cac:	2300      	movs	r3, #0
 8005cae:	60bb      	str	r3, [r7, #8]
 8005cb0:	4b4b      	ldr	r3, [pc, #300]	; (8005de0 <HAL_LTDC_MspInit+0x200>)
 8005cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb4:	4a4a      	ldr	r2, [pc, #296]	; (8005de0 <HAL_LTDC_MspInit+0x200>)
 8005cb6:	f043 0308 	orr.w	r3, r3, #8
 8005cba:	6313      	str	r3, [r2, #48]	; 0x30
 8005cbc:	4b48      	ldr	r3, [pc, #288]	; (8005de0 <HAL_LTDC_MspInit+0x200>)
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc0:	f003 0308 	and.w	r3, r3, #8
 8005cc4:	60bb      	str	r3, [r7, #8]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005cc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cce:	2302      	movs	r3, #2
 8005cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005cda:	230e      	movs	r3, #14
 8005cdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	483f      	ldr	r0, [pc, #252]	; (8005de4 <HAL_LTDC_MspInit+0x204>)
 8005ce6:	f7fc fcc9 	bl	800267c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8005cea:	f641 0358 	movw	r3, #6232	; 0x1858
 8005cee:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005cfc:	230e      	movs	r3, #14
 8005cfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d04:	4619      	mov	r1, r3
 8005d06:	4838      	ldr	r0, [pc, #224]	; (8005de8 <HAL_LTDC_MspInit+0x208>)
 8005d08:	f7fc fcb8 	bl	800267c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d10:	2302      	movs	r3, #2
 8005d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d14:	2300      	movs	r3, #0
 8005d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005d1c:	2309      	movs	r3, #9
 8005d1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d24:	4619      	mov	r1, r3
 8005d26:	4831      	ldr	r0, [pc, #196]	; (8005dec <HAL_LTDC_MspInit+0x20c>)
 8005d28:	f7fc fca8 	bl	800267c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8005d2c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d32:	2302      	movs	r3, #2
 8005d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005d3e:	230e      	movs	r3, #14
 8005d40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d46:	4619      	mov	r1, r3
 8005d48:	4828      	ldr	r0, [pc, #160]	; (8005dec <HAL_LTDC_MspInit+0x20c>)
 8005d4a:	f7fc fc97 	bl	800267c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8005d4e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8005d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d54:	2302      	movs	r3, #2
 8005d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005d60:	230e      	movs	r3, #14
 8005d62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4821      	ldr	r0, [pc, #132]	; (8005df0 <HAL_LTDC_MspInit+0x210>)
 8005d6c:	f7fc fc86 	bl	800267c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8005d70:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d76:	2302      	movs	r3, #2
 8005d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005d82:	230e      	movs	r3, #14
 8005d84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	4819      	ldr	r0, [pc, #100]	; (8005df4 <HAL_LTDC_MspInit+0x214>)
 8005d8e:	f7fc fc75 	bl	800267c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8005d92:	2348      	movs	r3, #72	; 0x48
 8005d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d96:	2302      	movs	r3, #2
 8005d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005da2:	230e      	movs	r3, #14
 8005da4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005daa:	4619      	mov	r1, r3
 8005dac:	4812      	ldr	r0, [pc, #72]	; (8005df8 <HAL_LTDC_MspInit+0x218>)
 8005dae:	f7fc fc65 	bl	800267c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8005db2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005db8:	2302      	movs	r3, #2
 8005dba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005dc4:	2309      	movs	r3, #9
 8005dc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4808      	ldr	r0, [pc, #32]	; (8005df0 <HAL_LTDC_MspInit+0x210>)
 8005dd0:	f7fc fc54 	bl	800267c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8005dd4:	bf00      	nop
 8005dd6:	3738      	adds	r7, #56	; 0x38
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	40016800 	.word	0x40016800
 8005de0:	40023800 	.word	0x40023800
 8005de4:	40021400 	.word	0x40021400
 8005de8:	40020000 	.word	0x40020000
 8005dec:	40020400 	.word	0x40020400
 8005df0:	40021800 	.word	0x40021800
 8005df4:	40020800 	.word	0x40020800
 8005df8:	40020c00 	.word	0x40020c00

08005dfc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a0b      	ldr	r2, [pc, #44]	; (8005e38 <HAL_RNG_MspInit+0x3c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d10d      	bne.n	8005e2a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	4b0a      	ldr	r3, [pc, #40]	; (8005e3c <HAL_RNG_MspInit+0x40>)
 8005e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e16:	4a09      	ldr	r2, [pc, #36]	; (8005e3c <HAL_RNG_MspInit+0x40>)
 8005e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e1c:	6353      	str	r3, [r2, #52]	; 0x34
 8005e1e:	4b07      	ldr	r3, [pc, #28]	; (8005e3c <HAL_RNG_MspInit+0x40>)
 8005e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8005e2a:	bf00      	nop
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	50060800 	.word	0x50060800
 8005e3c:	40023800 	.word	0x40023800

08005e40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08a      	sub	sp, #40	; 0x28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e48:	f107 0314 	add.w	r3, r7, #20
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	605a      	str	r2, [r3, #4]
 8005e52:	609a      	str	r2, [r3, #8]
 8005e54:	60da      	str	r2, [r3, #12]
 8005e56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a19      	ldr	r2, [pc, #100]	; (8005ec4 <HAL_SPI_MspInit+0x84>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d12c      	bne.n	8005ebc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8005e62:	2300      	movs	r3, #0
 8005e64:	613b      	str	r3, [r7, #16]
 8005e66:	4b18      	ldr	r3, [pc, #96]	; (8005ec8 <HAL_SPI_MspInit+0x88>)
 8005e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e6a:	4a17      	ldr	r2, [pc, #92]	; (8005ec8 <HAL_SPI_MspInit+0x88>)
 8005e6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e70:	6453      	str	r3, [r2, #68]	; 0x44
 8005e72:	4b15      	ldr	r3, [pc, #84]	; (8005ec8 <HAL_SPI_MspInit+0x88>)
 8005e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e7a:	613b      	str	r3, [r7, #16]
 8005e7c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	4b11      	ldr	r3, [pc, #68]	; (8005ec8 <HAL_SPI_MspInit+0x88>)
 8005e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e86:	4a10      	ldr	r2, [pc, #64]	; (8005ec8 <HAL_SPI_MspInit+0x88>)
 8005e88:	f043 0320 	orr.w	r3, r3, #32
 8005e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e8e:	4b0e      	ldr	r3, [pc, #56]	; (8005ec8 <HAL_SPI_MspInit+0x88>)
 8005e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e92:	f003 0320 	and.w	r3, r3, #32
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8005e9a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8005e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8005eac:	2305      	movs	r3, #5
 8005eae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005eb0:	f107 0314 	add.w	r3, r7, #20
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	4805      	ldr	r0, [pc, #20]	; (8005ecc <HAL_SPI_MspInit+0x8c>)
 8005eb8:	f7fc fbe0 	bl	800267c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8005ebc:	bf00      	nop
 8005ebe:	3728      	adds	r7, #40	; 0x28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	40015000 	.word	0x40015000
 8005ec8:	40023800 	.word	0x40023800
 8005ecc:	40021400 	.word	0x40021400

08005ed0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a08      	ldr	r2, [pc, #32]	; (8005f00 <HAL_SPI_MspDeInit+0x30>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d10a      	bne.n	8005ef8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8005ee2:	4b08      	ldr	r3, [pc, #32]	; (8005f04 <HAL_SPI_MspDeInit+0x34>)
 8005ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee6:	4a07      	ldr	r2, [pc, #28]	; (8005f04 <HAL_SPI_MspDeInit+0x34>)
 8005ee8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005eec:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8005eee:	f44f 7160 	mov.w	r1, #896	; 0x380
 8005ef2:	4805      	ldr	r0, [pc, #20]	; (8005f08 <HAL_SPI_MspDeInit+0x38>)
 8005ef4:	f7fc fd6c 	bl	80029d0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8005ef8:	bf00      	nop
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	40015000 	.word	0x40015000
 8005f04:	40023800 	.word	0x40023800
 8005f08:	40021400 	.word	0x40021400

08005f0c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005f12:	1d3b      	adds	r3, r7, #4
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	605a      	str	r2, [r3, #4]
 8005f1a:	609a      	str	r2, [r3, #8]
 8005f1c:	60da      	str	r2, [r3, #12]
 8005f1e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8005f20:	4b3b      	ldr	r3, [pc, #236]	; (8006010 <HAL_FMC_MspInit+0x104>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d16f      	bne.n	8006008 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8005f28:	4b39      	ldr	r3, [pc, #228]	; (8006010 <HAL_FMC_MspInit+0x104>)
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005f2e:	2300      	movs	r3, #0
 8005f30:	603b      	str	r3, [r7, #0]
 8005f32:	4b38      	ldr	r3, [pc, #224]	; (8006014 <HAL_FMC_MspInit+0x108>)
 8005f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f36:	4a37      	ldr	r2, [pc, #220]	; (8006014 <HAL_FMC_MspInit+0x108>)
 8005f38:	f043 0301 	orr.w	r3, r3, #1
 8005f3c:	6393      	str	r3, [r2, #56]	; 0x38
 8005f3e:	4b35      	ldr	r3, [pc, #212]	; (8006014 <HAL_FMC_MspInit+0x108>)
 8005f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	603b      	str	r3, [r7, #0]
 8005f48:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8005f4a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005f4e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f50:	2302      	movs	r3, #2
 8005f52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f54:	2300      	movs	r3, #0
 8005f56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005f5c:	230c      	movs	r3, #12
 8005f5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005f60:	1d3b      	adds	r3, r7, #4
 8005f62:	4619      	mov	r1, r3
 8005f64:	482c      	ldr	r0, [pc, #176]	; (8006018 <HAL_FMC_MspInit+0x10c>)
 8005f66:	f7fc fb89 	bl	800267c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f6e:	2302      	movs	r3, #2
 8005f70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f76:	2303      	movs	r3, #3
 8005f78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005f7a:	230c      	movs	r3, #12
 8005f7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f7e:	1d3b      	adds	r3, r7, #4
 8005f80:	4619      	mov	r1, r3
 8005f82:	4826      	ldr	r0, [pc, #152]	; (800601c <HAL_FMC_MspInit+0x110>)
 8005f84:	f7fc fb7a 	bl	800267c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8005f88:	f248 1333 	movw	r3, #33075	; 0x8133
 8005f8c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f8e:	2302      	movs	r3, #2
 8005f90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f96:	2303      	movs	r3, #3
 8005f98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005f9a:	230c      	movs	r3, #12
 8005f9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005f9e:	1d3b      	adds	r3, r7, #4
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	481f      	ldr	r0, [pc, #124]	; (8006020 <HAL_FMC_MspInit+0x114>)
 8005fa4:	f7fc fb6a 	bl	800267c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8005fa8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005fac:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fae:	2302      	movs	r3, #2
 8005fb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005fba:	230c      	movs	r3, #12
 8005fbc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005fbe:	1d3b      	adds	r3, r7, #4
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4818      	ldr	r0, [pc, #96]	; (8006024 <HAL_FMC_MspInit+0x118>)
 8005fc4:	f7fc fb5a 	bl	800267c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8005fc8:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005fcc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fce:	2302      	movs	r3, #2
 8005fd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005fda:	230c      	movs	r3, #12
 8005fdc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005fde:	1d3b      	adds	r3, r7, #4
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4811      	ldr	r0, [pc, #68]	; (8006028 <HAL_FMC_MspInit+0x11c>)
 8005fe4:	f7fc fb4a 	bl	800267c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005fe8:	2360      	movs	r3, #96	; 0x60
 8005fea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fec:	2302      	movs	r3, #2
 8005fee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005ff8:	230c      	movs	r3, #12
 8005ffa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ffc:	1d3b      	adds	r3, r7, #4
 8005ffe:	4619      	mov	r1, r3
 8006000:	480a      	ldr	r0, [pc, #40]	; (800602c <HAL_FMC_MspInit+0x120>)
 8006002:	f7fc fb3b 	bl	800267c <HAL_GPIO_Init>
 8006006:	e000      	b.n	800600a <HAL_FMC_MspInit+0xfe>
    return;
 8006008:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	200276bc 	.word	0x200276bc
 8006014:	40023800 	.word	0x40023800
 8006018:	40021400 	.word	0x40021400
 800601c:	40020800 	.word	0x40020800
 8006020:	40021800 	.word	0x40021800
 8006024:	40021000 	.word	0x40021000
 8006028:	40020c00 	.word	0x40020c00
 800602c:	40020400 	.word	0x40020400

08006030 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8006038:	f7ff ff68 	bl	8005f0c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800603c:	bf00      	nop
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006048:	bf00      	nop
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006052:	b480      	push	{r7}
 8006054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006056:	e7fe      	b.n	8006056 <HardFault_Handler+0x4>

08006058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006058:	b480      	push	{r7}
 800605a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800605c:	e7fe      	b.n	800605c <MemManage_Handler+0x4>

0800605e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800605e:	b480      	push	{r7}
 8006060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006062:	e7fe      	b.n	8006062 <BusFault_Handler+0x4>

08006064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006068:	e7fe      	b.n	8006068 <UsageFault_Handler+0x4>

0800606a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800606a:	b480      	push	{r7}
 800606c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800606e:	bf00      	nop
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006078:	b480      	push	{r7}
 800607a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800607c:	bf00      	nop
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006086:	b480      	push	{r7}
 8006088:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800608a:	bf00      	nop
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006098:	f7fb fd36 	bl	8001b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800609c:	bf00      	nop
 800609e:	bd80      	pop	{r7, pc}

080060a0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	if (mozna_strzelac & ( strzal[0] == 0 ))
 80060a4:	4b54      	ldr	r3, [pc, #336]	; (80061f8 <EXTI2_IRQHandler+0x158>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	461a      	mov	r2, r3
 80060aa:	4b54      	ldr	r3, [pc, #336]	; (80061fc <EXTI2_IRQHandler+0x15c>)
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	f083 0301 	eor.w	r3, r3, #1
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	4013      	ands	r3, r2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 8099 	beq.w	80061ee <EXTI2_IRQHandler+0x14e>
	{
		strzal[0] = 1;
 80060bc:	4b4f      	ldr	r3, [pc, #316]	; (80061fc <EXTI2_IRQHandler+0x15c>)
 80060be:	2201      	movs	r2, #1
 80060c0:	701a      	strb	r2, [r3, #0]
		ludzik_zyje[0] = 0;
 80060c2:	4b4f      	ldr	r3, [pc, #316]	; (8006200 <EXTI2_IRQHandler+0x160>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	701a      	strb	r2, [r3, #0]
		if (ludzik_zly[0] == 1)
 80060c8:	4b4e      	ldr	r3, [pc, #312]	; (8006204 <EXTI2_IRQHandler+0x164>)
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d05e      	beq.n	800618e <EXTI2_IRQHandler+0xee>
		{
			punkty += 2;
 80060d0:	4b4d      	ldr	r3, [pc, #308]	; (8006208 <EXTI2_IRQHandler+0x168>)
 80060d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	3302      	adds	r3, #2
 80060da:	b29b      	uxth	r3, r3
 80060dc:	b21a      	sxth	r2, r3
 80060de:	4b4a      	ldr	r3, [pc, #296]	; (8006208 <EXTI2_IRQHandler+0x168>)
 80060e0:	801a      	strh	r2, [r3, #0]
			if ( punkty >= lv_up )
 80060e2:	4b49      	ldr	r3, [pc, #292]	; (8006208 <EXTI2_IRQHandler+0x168>)
 80060e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80060e8:	4b48      	ldr	r3, [pc, #288]	; (800620c <EXTI2_IRQHandler+0x16c>)
 80060ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	db2e      	blt.n	8006150 <EXTI2_IRQHandler+0xb0>
			{
				zycia += 1;
 80060f2:	4b47      	ldr	r3, [pc, #284]	; (8006210 <EXTI2_IRQHandler+0x170>)
 80060f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	3301      	adds	r3, #1
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	b21a      	sxth	r2, r3
 8006100:	4b43      	ldr	r3, [pc, #268]	; (8006210 <EXTI2_IRQHandler+0x170>)
 8006102:	801a      	strh	r2, [r3, #0]
				lv_up += lv_up_cap;
 8006104:	4b41      	ldr	r3, [pc, #260]	; (800620c <EXTI2_IRQHandler+0x16c>)
 8006106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800610a:	b29a      	uxth	r2, r3
 800610c:	4b41      	ldr	r3, [pc, #260]	; (8006214 <EXTI2_IRQHandler+0x174>)
 800610e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006112:	b29b      	uxth	r3, r3
 8006114:	4413      	add	r3, r2
 8006116:	b29b      	uxth	r3, r3
 8006118:	b21a      	sxth	r2, r3
 800611a:	4b3c      	ldr	r3, [pc, #240]	; (800620c <EXTI2_IRQHandler+0x16c>)
 800611c:	801a      	strh	r2, [r3, #0]

				memset(wyraz,0,40); // czyszczenie wyrazu
 800611e:	2228      	movs	r2, #40	; 0x28
 8006120:	2100      	movs	r1, #0
 8006122:	483d      	ldr	r0, [pc, #244]	; (8006218 <EXTI2_IRQHandler+0x178>)
 8006124:	f000 fad0 	bl	80066c8 <memset>
				sprintf(wyraz_liczba, "%d", zycia); // int na stringa
 8006128:	4b39      	ldr	r3, [pc, #228]	; (8006210 <EXTI2_IRQHandler+0x170>)
 800612a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800612e:	461a      	mov	r2, r3
 8006130:	493a      	ldr	r1, [pc, #232]	; (800621c <EXTI2_IRQHandler+0x17c>)
 8006132:	483b      	ldr	r0, [pc, #236]	; (8006220 <EXTI2_IRQHandler+0x180>)
 8006134:	f000 fad0 	bl	80066d8 <siprintf>
				strcat(wyraz,wyraz2); // wyraz = "ZYCIA: "
 8006138:	493a      	ldr	r1, [pc, #232]	; (8006224 <EXTI2_IRQHandler+0x184>)
 800613a:	4837      	ldr	r0, [pc, #220]	; (8006218 <EXTI2_IRQHandler+0x178>)
 800613c:	f000 faec 	bl	8006718 <strcat>
				strcat(wyraz,wyraz_liczba);// wyraz += wyraz_liczba
 8006140:	4937      	ldr	r1, [pc, #220]	; (8006220 <EXTI2_IRQHandler+0x180>)
 8006142:	4835      	ldr	r0, [pc, #212]	; (8006218 <EXTI2_IRQHandler+0x178>)
 8006144:	f000 fae8 	bl	8006718 <strcat>
				BSP_LCD_DisplayStringAtLine(2, (uint8_t*)wyraz);// wyswietlenie
 8006148:	4933      	ldr	r1, [pc, #204]	; (8006218 <EXTI2_IRQHandler+0x178>)
 800614a:	2002      	movs	r0, #2
 800614c:	f7fa ffc6 	bl	80010dc <BSP_LCD_DisplayStringAtLine>
			}
			memset(wyraz,0,40); // czyszczenie wyrazu
 8006150:	2228      	movs	r2, #40	; 0x28
 8006152:	2100      	movs	r1, #0
 8006154:	4830      	ldr	r0, [pc, #192]	; (8006218 <EXTI2_IRQHandler+0x178>)
 8006156:	f000 fab7 	bl	80066c8 <memset>
			sprintf(wyraz_liczba, "%d", punkty); // int na stringa
 800615a:	4b2b      	ldr	r3, [pc, #172]	; (8006208 <EXTI2_IRQHandler+0x168>)
 800615c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006160:	461a      	mov	r2, r3
 8006162:	492e      	ldr	r1, [pc, #184]	; (800621c <EXTI2_IRQHandler+0x17c>)
 8006164:	482e      	ldr	r0, [pc, #184]	; (8006220 <EXTI2_IRQHandler+0x180>)
 8006166:	f000 fab7 	bl	80066d8 <siprintf>
			strcat(wyraz,wyraz1); // wyraz = "PUNKTY: "
 800616a:	492f      	ldr	r1, [pc, #188]	; (8006228 <EXTI2_IRQHandler+0x188>)
 800616c:	482a      	ldr	r0, [pc, #168]	; (8006218 <EXTI2_IRQHandler+0x178>)
 800616e:	f000 fad3 	bl	8006718 <strcat>
		    strcat(wyraz,wyraz_liczba);// wyraz += wyraz_liczba
 8006172:	492b      	ldr	r1, [pc, #172]	; (8006220 <EXTI2_IRQHandler+0x180>)
 8006174:	4828      	ldr	r0, [pc, #160]	; (8006218 <EXTI2_IRQHandler+0x178>)
 8006176:	f000 facf 	bl	8006718 <strcat>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)wyraz);// wyswietlenie
 800617a:	4927      	ldr	r1, [pc, #156]	; (8006218 <EXTI2_IRQHandler+0x178>)
 800617c:	2001      	movs	r0, #1
 800617e:	f7fa ffad 	bl	80010dc <BSP_LCD_DisplayStringAtLine>

			BSP_LCD_DrawBitmap ( 0,240,obraz5);
 8006182:	4a2a      	ldr	r2, [pc, #168]	; (800622c <EXTI2_IRQHandler+0x18c>)
 8006184:	21f0      	movs	r1, #240	; 0xf0
 8006186:	2000      	movs	r0, #0
 8006188:	f7fa ffc0 	bl	800110c <BSP_LCD_DrawBitmap>
 800618c:	e02f      	b.n	80061ee <EXTI2_IRQHandler+0x14e>
		}
		else
		{
			if ( punkty > 1)
 800618e:	4b1e      	ldr	r3, [pc, #120]	; (8006208 <EXTI2_IRQHandler+0x168>)
 8006190:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006194:	2b01      	cmp	r3, #1
 8006196:	dd09      	ble.n	80061ac <EXTI2_IRQHandler+0x10c>
				punkty -= 2;
 8006198:	4b1b      	ldr	r3, [pc, #108]	; (8006208 <EXTI2_IRQHandler+0x168>)
 800619a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b02      	subs	r3, #2
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	b21a      	sxth	r2, r3
 80061a6:	4b18      	ldr	r3, [pc, #96]	; (8006208 <EXTI2_IRQHandler+0x168>)
 80061a8:	801a      	strh	r2, [r3, #0]
 80061aa:	e002      	b.n	80061b2 <EXTI2_IRQHandler+0x112>
			else
				punkty = 0;
 80061ac:	4b16      	ldr	r3, [pc, #88]	; (8006208 <EXTI2_IRQHandler+0x168>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	801a      	strh	r2, [r3, #0]
			memset(wyraz,0,40); // czyszczenie wyrazu
 80061b2:	2228      	movs	r2, #40	; 0x28
 80061b4:	2100      	movs	r1, #0
 80061b6:	4818      	ldr	r0, [pc, #96]	; (8006218 <EXTI2_IRQHandler+0x178>)
 80061b8:	f000 fa86 	bl	80066c8 <memset>
			sprintf(wyraz_liczba, "%d", punkty); // int na stringa
 80061bc:	4b12      	ldr	r3, [pc, #72]	; (8006208 <EXTI2_IRQHandler+0x168>)
 80061be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061c2:	461a      	mov	r2, r3
 80061c4:	4915      	ldr	r1, [pc, #84]	; (800621c <EXTI2_IRQHandler+0x17c>)
 80061c6:	4816      	ldr	r0, [pc, #88]	; (8006220 <EXTI2_IRQHandler+0x180>)
 80061c8:	f000 fa86 	bl	80066d8 <siprintf>
			strcat(wyraz,wyraz1); // wyraz = "PUNKTY: "
 80061cc:	4916      	ldr	r1, [pc, #88]	; (8006228 <EXTI2_IRQHandler+0x188>)
 80061ce:	4812      	ldr	r0, [pc, #72]	; (8006218 <EXTI2_IRQHandler+0x178>)
 80061d0:	f000 faa2 	bl	8006718 <strcat>
			strcat(wyraz,wyraz_liczba);// wyraz += wyraz_liczba
 80061d4:	4912      	ldr	r1, [pc, #72]	; (8006220 <EXTI2_IRQHandler+0x180>)
 80061d6:	4810      	ldr	r0, [pc, #64]	; (8006218 <EXTI2_IRQHandler+0x178>)
 80061d8:	f000 fa9e 	bl	8006718 <strcat>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)wyraz);// wyswietlenie
 80061dc:	490e      	ldr	r1, [pc, #56]	; (8006218 <EXTI2_IRQHandler+0x178>)
 80061de:	2001      	movs	r0, #1
 80061e0:	f7fa ff7c 	bl	80010dc <BSP_LCD_DisplayStringAtLine>
			BSP_LCD_DrawBitmap ( 0,240,obraz2);
 80061e4:	4a12      	ldr	r2, [pc, #72]	; (8006230 <EXTI2_IRQHandler+0x190>)
 80061e6:	21f0      	movs	r1, #240	; 0xf0
 80061e8:	2000      	movs	r0, #0
 80061ea:	f7fa ff8f 	bl	800110c <BSP_LCD_DrawBitmap>
		}
	}
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80061ee:	2004      	movs	r0, #4
 80061f0:	f7fc fd12 	bl	8002c18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80061f4:	bf00      	nop
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	20027828 	.word	0x20027828
 80061fc:	200276b4 	.word	0x200276b4
 8006200:	20027450 	.word	0x20027450
 8006204:	200276b8 	.word	0x200276b8
 8006208:	200276b2 	.word	0x200276b2
 800620c:	20027448 	.word	0x20027448
 8006210:	20027446 	.word	0x20027446
 8006214:	2002744a 	.word	0x2002744a
 8006218:	2002782c 	.word	0x2002782c
 800621c:	08006f20 	.word	0x08006f20
 8006220:	20027954 	.word	0x20027954
 8006224:	2002746c 	.word	0x2002746c
 8006228:	20027460 	.word	0x20027460
 800622c:	200228cc 	.word	0x200228cc
 8006230:	20012d48 	.word	0x20012d48

08006234 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI4_IRQn 0 */
	if (mozna_strzelac & ( strzal[1] == 0 ))
 8006238:	4b54      	ldr	r3, [pc, #336]	; (800638c <EXTI4_IRQHandler+0x158>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	461a      	mov	r2, r3
 800623e:	4b54      	ldr	r3, [pc, #336]	; (8006390 <EXTI4_IRQHandler+0x15c>)
 8006240:	785b      	ldrb	r3, [r3, #1]
 8006242:	f083 0301 	eor.w	r3, r3, #1
 8006246:	b2db      	uxtb	r3, r3
 8006248:	4013      	ands	r3, r2
 800624a:	2b00      	cmp	r3, #0
 800624c:	f000 8099 	beq.w	8006382 <EXTI4_IRQHandler+0x14e>
	{
		strzal[1] = 1;
 8006250:	4b4f      	ldr	r3, [pc, #316]	; (8006390 <EXTI4_IRQHandler+0x15c>)
 8006252:	2201      	movs	r2, #1
 8006254:	705a      	strb	r2, [r3, #1]
		ludzik_zyje[1] = 0;
 8006256:	4b4f      	ldr	r3, [pc, #316]	; (8006394 <EXTI4_IRQHandler+0x160>)
 8006258:	2200      	movs	r2, #0
 800625a:	705a      	strb	r2, [r3, #1]
		if (ludzik_zly[1] == 1)
 800625c:	4b4e      	ldr	r3, [pc, #312]	; (8006398 <EXTI4_IRQHandler+0x164>)
 800625e:	785b      	ldrb	r3, [r3, #1]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d05e      	beq.n	8006322 <EXTI4_IRQHandler+0xee>
		{
			punkty += 2;
 8006264:	4b4d      	ldr	r3, [pc, #308]	; (800639c <EXTI4_IRQHandler+0x168>)
 8006266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800626a:	b29b      	uxth	r3, r3
 800626c:	3302      	adds	r3, #2
 800626e:	b29b      	uxth	r3, r3
 8006270:	b21a      	sxth	r2, r3
 8006272:	4b4a      	ldr	r3, [pc, #296]	; (800639c <EXTI4_IRQHandler+0x168>)
 8006274:	801a      	strh	r2, [r3, #0]
			if ( punkty >= lv_up )
 8006276:	4b49      	ldr	r3, [pc, #292]	; (800639c <EXTI4_IRQHandler+0x168>)
 8006278:	f9b3 2000 	ldrsh.w	r2, [r3]
 800627c:	4b48      	ldr	r3, [pc, #288]	; (80063a0 <EXTI4_IRQHandler+0x16c>)
 800627e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006282:	429a      	cmp	r2, r3
 8006284:	db2e      	blt.n	80062e4 <EXTI4_IRQHandler+0xb0>
			{
				zycia += 1;
 8006286:	4b47      	ldr	r3, [pc, #284]	; (80063a4 <EXTI4_IRQHandler+0x170>)
 8006288:	f9b3 3000 	ldrsh.w	r3, [r3]
 800628c:	b29b      	uxth	r3, r3
 800628e:	3301      	adds	r3, #1
 8006290:	b29b      	uxth	r3, r3
 8006292:	b21a      	sxth	r2, r3
 8006294:	4b43      	ldr	r3, [pc, #268]	; (80063a4 <EXTI4_IRQHandler+0x170>)
 8006296:	801a      	strh	r2, [r3, #0]
				lv_up += lv_up_cap;
 8006298:	4b41      	ldr	r3, [pc, #260]	; (80063a0 <EXTI4_IRQHandler+0x16c>)
 800629a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800629e:	b29a      	uxth	r2, r3
 80062a0:	4b41      	ldr	r3, [pc, #260]	; (80063a8 <EXTI4_IRQHandler+0x174>)
 80062a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	4413      	add	r3, r2
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	b21a      	sxth	r2, r3
 80062ae:	4b3c      	ldr	r3, [pc, #240]	; (80063a0 <EXTI4_IRQHandler+0x16c>)
 80062b0:	801a      	strh	r2, [r3, #0]
				memset(wyraz,0,40); // czyszczenie wyrazu
 80062b2:	2228      	movs	r2, #40	; 0x28
 80062b4:	2100      	movs	r1, #0
 80062b6:	483d      	ldr	r0, [pc, #244]	; (80063ac <EXTI4_IRQHandler+0x178>)
 80062b8:	f000 fa06 	bl	80066c8 <memset>
				sprintf(wyraz_liczba, "%d", zycia); // int na stringa
 80062bc:	4b39      	ldr	r3, [pc, #228]	; (80063a4 <EXTI4_IRQHandler+0x170>)
 80062be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062c2:	461a      	mov	r2, r3
 80062c4:	493a      	ldr	r1, [pc, #232]	; (80063b0 <EXTI4_IRQHandler+0x17c>)
 80062c6:	483b      	ldr	r0, [pc, #236]	; (80063b4 <EXTI4_IRQHandler+0x180>)
 80062c8:	f000 fa06 	bl	80066d8 <siprintf>
				strcat(wyraz,wyraz2); // wyraz = "ZYCIA: "
 80062cc:	493a      	ldr	r1, [pc, #232]	; (80063b8 <EXTI4_IRQHandler+0x184>)
 80062ce:	4837      	ldr	r0, [pc, #220]	; (80063ac <EXTI4_IRQHandler+0x178>)
 80062d0:	f000 fa22 	bl	8006718 <strcat>
				strcat(wyraz,wyraz_liczba);// wyraz += wyraz_liczba
 80062d4:	4937      	ldr	r1, [pc, #220]	; (80063b4 <EXTI4_IRQHandler+0x180>)
 80062d6:	4835      	ldr	r0, [pc, #212]	; (80063ac <EXTI4_IRQHandler+0x178>)
 80062d8:	f000 fa1e 	bl	8006718 <strcat>
				BSP_LCD_DisplayStringAtLine(2, (uint8_t*)wyraz);// wyswietlenie
 80062dc:	4933      	ldr	r1, [pc, #204]	; (80063ac <EXTI4_IRQHandler+0x178>)
 80062de:	2002      	movs	r0, #2
 80062e0:	f7fa fefc 	bl	80010dc <BSP_LCD_DisplayStringAtLine>
			}
			memset(wyraz,0,40); // czyszczenie wyrazu
 80062e4:	2228      	movs	r2, #40	; 0x28
 80062e6:	2100      	movs	r1, #0
 80062e8:	4830      	ldr	r0, [pc, #192]	; (80063ac <EXTI4_IRQHandler+0x178>)
 80062ea:	f000 f9ed 	bl	80066c8 <memset>
			sprintf(wyraz_liczba, "%d", punkty); // int na stringa
 80062ee:	4b2b      	ldr	r3, [pc, #172]	; (800639c <EXTI4_IRQHandler+0x168>)
 80062f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062f4:	461a      	mov	r2, r3
 80062f6:	492e      	ldr	r1, [pc, #184]	; (80063b0 <EXTI4_IRQHandler+0x17c>)
 80062f8:	482e      	ldr	r0, [pc, #184]	; (80063b4 <EXTI4_IRQHandler+0x180>)
 80062fa:	f000 f9ed 	bl	80066d8 <siprintf>
			strcat(wyraz,wyraz1); // wyraz = "PUNKTY: "
 80062fe:	492f      	ldr	r1, [pc, #188]	; (80063bc <EXTI4_IRQHandler+0x188>)
 8006300:	482a      	ldr	r0, [pc, #168]	; (80063ac <EXTI4_IRQHandler+0x178>)
 8006302:	f000 fa09 	bl	8006718 <strcat>
		    strcat(wyraz,wyraz_liczba);// wyraz += wyraz_liczba
 8006306:	492b      	ldr	r1, [pc, #172]	; (80063b4 <EXTI4_IRQHandler+0x180>)
 8006308:	4828      	ldr	r0, [pc, #160]	; (80063ac <EXTI4_IRQHandler+0x178>)
 800630a:	f000 fa05 	bl	8006718 <strcat>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)wyraz);// wyswietlenie
 800630e:	4927      	ldr	r1, [pc, #156]	; (80063ac <EXTI4_IRQHandler+0x178>)
 8006310:	2001      	movs	r0, #1
 8006312:	f7fa fee3 	bl	80010dc <BSP_LCD_DisplayStringAtLine>

			BSP_LCD_DrawBitmap ( 80,240,obraz5);
 8006316:	4a2a      	ldr	r2, [pc, #168]	; (80063c0 <EXTI4_IRQHandler+0x18c>)
 8006318:	21f0      	movs	r1, #240	; 0xf0
 800631a:	2050      	movs	r0, #80	; 0x50
 800631c:	f7fa fef6 	bl	800110c <BSP_LCD_DrawBitmap>
 8006320:	e02f      	b.n	8006382 <EXTI4_IRQHandler+0x14e>
		}
		else
		{
			if ( punkty > 1)
 8006322:	4b1e      	ldr	r3, [pc, #120]	; (800639c <EXTI4_IRQHandler+0x168>)
 8006324:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006328:	2b01      	cmp	r3, #1
 800632a:	dd09      	ble.n	8006340 <EXTI4_IRQHandler+0x10c>
				punkty -= 2;
 800632c:	4b1b      	ldr	r3, [pc, #108]	; (800639c <EXTI4_IRQHandler+0x168>)
 800632e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b02      	subs	r3, #2
 8006336:	b29b      	uxth	r3, r3
 8006338:	b21a      	sxth	r2, r3
 800633a:	4b18      	ldr	r3, [pc, #96]	; (800639c <EXTI4_IRQHandler+0x168>)
 800633c:	801a      	strh	r2, [r3, #0]
 800633e:	e002      	b.n	8006346 <EXTI4_IRQHandler+0x112>
			else
				punkty = 0;
 8006340:	4b16      	ldr	r3, [pc, #88]	; (800639c <EXTI4_IRQHandler+0x168>)
 8006342:	2200      	movs	r2, #0
 8006344:	801a      	strh	r2, [r3, #0]
			memset(wyraz,0,40); // czyszczenie wyrazu
 8006346:	2228      	movs	r2, #40	; 0x28
 8006348:	2100      	movs	r1, #0
 800634a:	4818      	ldr	r0, [pc, #96]	; (80063ac <EXTI4_IRQHandler+0x178>)
 800634c:	f000 f9bc 	bl	80066c8 <memset>
			sprintf(wyraz_liczba, "%d", punkty); // int na stringa
 8006350:	4b12      	ldr	r3, [pc, #72]	; (800639c <EXTI4_IRQHandler+0x168>)
 8006352:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006356:	461a      	mov	r2, r3
 8006358:	4915      	ldr	r1, [pc, #84]	; (80063b0 <EXTI4_IRQHandler+0x17c>)
 800635a:	4816      	ldr	r0, [pc, #88]	; (80063b4 <EXTI4_IRQHandler+0x180>)
 800635c:	f000 f9bc 	bl	80066d8 <siprintf>
			strcat(wyraz,wyraz1); // wyraz = "PUNKTY: "
 8006360:	4916      	ldr	r1, [pc, #88]	; (80063bc <EXTI4_IRQHandler+0x188>)
 8006362:	4812      	ldr	r0, [pc, #72]	; (80063ac <EXTI4_IRQHandler+0x178>)
 8006364:	f000 f9d8 	bl	8006718 <strcat>
			strcat(wyraz,wyraz_liczba);// wyraz += wyraz_liczba
 8006368:	4912      	ldr	r1, [pc, #72]	; (80063b4 <EXTI4_IRQHandler+0x180>)
 800636a:	4810      	ldr	r0, [pc, #64]	; (80063ac <EXTI4_IRQHandler+0x178>)
 800636c:	f000 f9d4 	bl	8006718 <strcat>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)wyraz);// wyswietlenie
 8006370:	490e      	ldr	r1, [pc, #56]	; (80063ac <EXTI4_IRQHandler+0x178>)
 8006372:	2001      	movs	r0, #1
 8006374:	f7fa feb2 	bl	80010dc <BSP_LCD_DisplayStringAtLine>
			BSP_LCD_DrawBitmap ( 80,240,obraz2);
 8006378:	4a12      	ldr	r2, [pc, #72]	; (80063c4 <EXTI4_IRQHandler+0x190>)
 800637a:	21f0      	movs	r1, #240	; 0xf0
 800637c:	2050      	movs	r0, #80	; 0x50
 800637e:	f7fa fec5 	bl	800110c <BSP_LCD_DrawBitmap>
		}
	}
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8006382:	2010      	movs	r0, #16
 8006384:	f7fc fc48 	bl	8002c18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8006388:	bf00      	nop
 800638a:	bd80      	pop	{r7, pc}
 800638c:	20027828 	.word	0x20027828
 8006390:	200276b4 	.word	0x200276b4
 8006394:	20027450 	.word	0x20027450
 8006398:	200276b8 	.word	0x200276b8
 800639c:	200276b2 	.word	0x200276b2
 80063a0:	20027448 	.word	0x20027448
 80063a4:	20027446 	.word	0x20027446
 80063a8:	2002744a 	.word	0x2002744a
 80063ac:	2002782c 	.word	0x2002782c
 80063b0:	08006f20 	.word	0x08006f20
 80063b4:	20027954 	.word	0x20027954
 80063b8:	2002746c 	.word	0x2002746c
 80063bc:	20027460 	.word	0x20027460
 80063c0:	200228cc 	.word	0x200228cc
 80063c4:	20012d48 	.word	0x20012d48

080063c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if (mozna_strzelac & ( strzal[2] == 0 ))
 80063cc:	4b54      	ldr	r3, [pc, #336]	; (8006520 <EXTI9_5_IRQHandler+0x158>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	4b54      	ldr	r3, [pc, #336]	; (8006524 <EXTI9_5_IRQHandler+0x15c>)
 80063d4:	789b      	ldrb	r3, [r3, #2]
 80063d6:	f083 0301 	eor.w	r3, r3, #1
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	4013      	ands	r3, r2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 8099 	beq.w	8006516 <EXTI9_5_IRQHandler+0x14e>
	{
		strzal[2] = 1;
 80063e4:	4b4f      	ldr	r3, [pc, #316]	; (8006524 <EXTI9_5_IRQHandler+0x15c>)
 80063e6:	2201      	movs	r2, #1
 80063e8:	709a      	strb	r2, [r3, #2]
		ludzik_zyje[2] = 0;
 80063ea:	4b4f      	ldr	r3, [pc, #316]	; (8006528 <EXTI9_5_IRQHandler+0x160>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	709a      	strb	r2, [r3, #2]
		if (ludzik_zly[2] == 1)
 80063f0:	4b4e      	ldr	r3, [pc, #312]	; (800652c <EXTI9_5_IRQHandler+0x164>)
 80063f2:	789b      	ldrb	r3, [r3, #2]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d05e      	beq.n	80064b6 <EXTI9_5_IRQHandler+0xee>
		{
			punkty += 2;
 80063f8:	4b4d      	ldr	r3, [pc, #308]	; (8006530 <EXTI9_5_IRQHandler+0x168>)
 80063fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	3302      	adds	r3, #2
 8006402:	b29b      	uxth	r3, r3
 8006404:	b21a      	sxth	r2, r3
 8006406:	4b4a      	ldr	r3, [pc, #296]	; (8006530 <EXTI9_5_IRQHandler+0x168>)
 8006408:	801a      	strh	r2, [r3, #0]
			if ( punkty >= lv_up )
 800640a:	4b49      	ldr	r3, [pc, #292]	; (8006530 <EXTI9_5_IRQHandler+0x168>)
 800640c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006410:	4b48      	ldr	r3, [pc, #288]	; (8006534 <EXTI9_5_IRQHandler+0x16c>)
 8006412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006416:	429a      	cmp	r2, r3
 8006418:	db2e      	blt.n	8006478 <EXTI9_5_IRQHandler+0xb0>
			{
				zycia += 1;
 800641a:	4b47      	ldr	r3, [pc, #284]	; (8006538 <EXTI9_5_IRQHandler+0x170>)
 800641c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006420:	b29b      	uxth	r3, r3
 8006422:	3301      	adds	r3, #1
 8006424:	b29b      	uxth	r3, r3
 8006426:	b21a      	sxth	r2, r3
 8006428:	4b43      	ldr	r3, [pc, #268]	; (8006538 <EXTI9_5_IRQHandler+0x170>)
 800642a:	801a      	strh	r2, [r3, #0]
				lv_up += lv_up_cap;
 800642c:	4b41      	ldr	r3, [pc, #260]	; (8006534 <EXTI9_5_IRQHandler+0x16c>)
 800642e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006432:	b29a      	uxth	r2, r3
 8006434:	4b41      	ldr	r3, [pc, #260]	; (800653c <EXTI9_5_IRQHandler+0x174>)
 8006436:	f9b3 3000 	ldrsh.w	r3, [r3]
 800643a:	b29b      	uxth	r3, r3
 800643c:	4413      	add	r3, r2
 800643e:	b29b      	uxth	r3, r3
 8006440:	b21a      	sxth	r2, r3
 8006442:	4b3c      	ldr	r3, [pc, #240]	; (8006534 <EXTI9_5_IRQHandler+0x16c>)
 8006444:	801a      	strh	r2, [r3, #0]
				memset(wyraz,0,40); // czyszczenie wyrazu
 8006446:	2228      	movs	r2, #40	; 0x28
 8006448:	2100      	movs	r1, #0
 800644a:	483d      	ldr	r0, [pc, #244]	; (8006540 <EXTI9_5_IRQHandler+0x178>)
 800644c:	f000 f93c 	bl	80066c8 <memset>
				sprintf(wyraz_liczba, "%d", zycia); // int na stringa
 8006450:	4b39      	ldr	r3, [pc, #228]	; (8006538 <EXTI9_5_IRQHandler+0x170>)
 8006452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006456:	461a      	mov	r2, r3
 8006458:	493a      	ldr	r1, [pc, #232]	; (8006544 <EXTI9_5_IRQHandler+0x17c>)
 800645a:	483b      	ldr	r0, [pc, #236]	; (8006548 <EXTI9_5_IRQHandler+0x180>)
 800645c:	f000 f93c 	bl	80066d8 <siprintf>
				strcat(wyraz,wyraz2); // wyraz = "ZYCIA: "
 8006460:	493a      	ldr	r1, [pc, #232]	; (800654c <EXTI9_5_IRQHandler+0x184>)
 8006462:	4837      	ldr	r0, [pc, #220]	; (8006540 <EXTI9_5_IRQHandler+0x178>)
 8006464:	f000 f958 	bl	8006718 <strcat>
				strcat(wyraz,wyraz_liczba);// wyraz += wyraz_liczba
 8006468:	4937      	ldr	r1, [pc, #220]	; (8006548 <EXTI9_5_IRQHandler+0x180>)
 800646a:	4835      	ldr	r0, [pc, #212]	; (8006540 <EXTI9_5_IRQHandler+0x178>)
 800646c:	f000 f954 	bl	8006718 <strcat>
				BSP_LCD_DisplayStringAtLine(2, (uint8_t*)wyraz);// wyswietlenie
 8006470:	4933      	ldr	r1, [pc, #204]	; (8006540 <EXTI9_5_IRQHandler+0x178>)
 8006472:	2002      	movs	r0, #2
 8006474:	f7fa fe32 	bl	80010dc <BSP_LCD_DisplayStringAtLine>
			}
			memset(wyraz,0,40); // czyszczenie wyrazu
 8006478:	2228      	movs	r2, #40	; 0x28
 800647a:	2100      	movs	r1, #0
 800647c:	4830      	ldr	r0, [pc, #192]	; (8006540 <EXTI9_5_IRQHandler+0x178>)
 800647e:	f000 f923 	bl	80066c8 <memset>
			sprintf(wyraz_liczba, "%d", punkty); // int na stringa
 8006482:	4b2b      	ldr	r3, [pc, #172]	; (8006530 <EXTI9_5_IRQHandler+0x168>)
 8006484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006488:	461a      	mov	r2, r3
 800648a:	492e      	ldr	r1, [pc, #184]	; (8006544 <EXTI9_5_IRQHandler+0x17c>)
 800648c:	482e      	ldr	r0, [pc, #184]	; (8006548 <EXTI9_5_IRQHandler+0x180>)
 800648e:	f000 f923 	bl	80066d8 <siprintf>
			strcat(wyraz,wyraz1); // wyraz = "PUNKTY: "
 8006492:	492f      	ldr	r1, [pc, #188]	; (8006550 <EXTI9_5_IRQHandler+0x188>)
 8006494:	482a      	ldr	r0, [pc, #168]	; (8006540 <EXTI9_5_IRQHandler+0x178>)
 8006496:	f000 f93f 	bl	8006718 <strcat>
		    strcat(wyraz,wyraz_liczba);// wyraz += wyraz_liczba
 800649a:	492b      	ldr	r1, [pc, #172]	; (8006548 <EXTI9_5_IRQHandler+0x180>)
 800649c:	4828      	ldr	r0, [pc, #160]	; (8006540 <EXTI9_5_IRQHandler+0x178>)
 800649e:	f000 f93b 	bl	8006718 <strcat>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)wyraz);// wyswietlenie
 80064a2:	4927      	ldr	r1, [pc, #156]	; (8006540 <EXTI9_5_IRQHandler+0x178>)
 80064a4:	2001      	movs	r0, #1
 80064a6:	f7fa fe19 	bl	80010dc <BSP_LCD_DisplayStringAtLine>

			BSP_LCD_DrawBitmap ( 160,240,obraz5);
 80064aa:	4a2a      	ldr	r2, [pc, #168]	; (8006554 <EXTI9_5_IRQHandler+0x18c>)
 80064ac:	21f0      	movs	r1, #240	; 0xf0
 80064ae:	20a0      	movs	r0, #160	; 0xa0
 80064b0:	f7fa fe2c 	bl	800110c <BSP_LCD_DrawBitmap>
 80064b4:	e02f      	b.n	8006516 <EXTI9_5_IRQHandler+0x14e>
		}
		else
		{
			if ( punkty > 1)
 80064b6:	4b1e      	ldr	r3, [pc, #120]	; (8006530 <EXTI9_5_IRQHandler+0x168>)
 80064b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	dd09      	ble.n	80064d4 <EXTI9_5_IRQHandler+0x10c>
				punkty -= 2;
 80064c0:	4b1b      	ldr	r3, [pc, #108]	; (8006530 <EXTI9_5_IRQHandler+0x168>)
 80064c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	3b02      	subs	r3, #2
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	b21a      	sxth	r2, r3
 80064ce:	4b18      	ldr	r3, [pc, #96]	; (8006530 <EXTI9_5_IRQHandler+0x168>)
 80064d0:	801a      	strh	r2, [r3, #0]
 80064d2:	e002      	b.n	80064da <EXTI9_5_IRQHandler+0x112>
			else
				punkty = 0;
 80064d4:	4b16      	ldr	r3, [pc, #88]	; (8006530 <EXTI9_5_IRQHandler+0x168>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	801a      	strh	r2, [r3, #0]
			memset(wyraz,0,40); // czyszczenie wyrazu
 80064da:	2228      	movs	r2, #40	; 0x28
 80064dc:	2100      	movs	r1, #0
 80064de:	4818      	ldr	r0, [pc, #96]	; (8006540 <EXTI9_5_IRQHandler+0x178>)
 80064e0:	f000 f8f2 	bl	80066c8 <memset>
			sprintf(wyraz_liczba, "%d", punkty); // int na stringa
 80064e4:	4b12      	ldr	r3, [pc, #72]	; (8006530 <EXTI9_5_IRQHandler+0x168>)
 80064e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064ea:	461a      	mov	r2, r3
 80064ec:	4915      	ldr	r1, [pc, #84]	; (8006544 <EXTI9_5_IRQHandler+0x17c>)
 80064ee:	4816      	ldr	r0, [pc, #88]	; (8006548 <EXTI9_5_IRQHandler+0x180>)
 80064f0:	f000 f8f2 	bl	80066d8 <siprintf>
			strcat(wyraz,wyraz1); // wyraz = "PUNKTY: "
 80064f4:	4916      	ldr	r1, [pc, #88]	; (8006550 <EXTI9_5_IRQHandler+0x188>)
 80064f6:	4812      	ldr	r0, [pc, #72]	; (8006540 <EXTI9_5_IRQHandler+0x178>)
 80064f8:	f000 f90e 	bl	8006718 <strcat>
			strcat(wyraz,wyraz_liczba);// wyraz += wyraz_liczba
 80064fc:	4912      	ldr	r1, [pc, #72]	; (8006548 <EXTI9_5_IRQHandler+0x180>)
 80064fe:	4810      	ldr	r0, [pc, #64]	; (8006540 <EXTI9_5_IRQHandler+0x178>)
 8006500:	f000 f90a 	bl	8006718 <strcat>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)wyraz);// wyswietlenie
 8006504:	490e      	ldr	r1, [pc, #56]	; (8006540 <EXTI9_5_IRQHandler+0x178>)
 8006506:	2001      	movs	r0, #1
 8006508:	f7fa fde8 	bl	80010dc <BSP_LCD_DisplayStringAtLine>
			BSP_LCD_DrawBitmap ( 160,240,obraz2);
 800650c:	4a12      	ldr	r2, [pc, #72]	; (8006558 <EXTI9_5_IRQHandler+0x190>)
 800650e:	21f0      	movs	r1, #240	; 0xf0
 8006510:	20a0      	movs	r0, #160	; 0xa0
 8006512:	f7fa fdfb 	bl	800110c <BSP_LCD_DrawBitmap>
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8006516:	2040      	movs	r0, #64	; 0x40
 8006518:	f7fc fb7e 	bl	8002c18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800651c:	bf00      	nop
 800651e:	bd80      	pop	{r7, pc}
 8006520:	20027828 	.word	0x20027828
 8006524:	200276b4 	.word	0x200276b4
 8006528:	20027450 	.word	0x20027450
 800652c:	200276b8 	.word	0x200276b8
 8006530:	200276b2 	.word	0x200276b2
 8006534:	20027448 	.word	0x20027448
 8006538:	20027446 	.word	0x20027446
 800653c:	2002744a 	.word	0x2002744a
 8006540:	2002782c 	.word	0x2002782c
 8006544:	08006f20 	.word	0x08006f20
 8006548:	20027954 	.word	0x20027954
 800654c:	2002746c 	.word	0x2002746c
 8006550:	20027460 	.word	0x20027460
 8006554:	200228cc 	.word	0x200228cc
 8006558:	20012d48 	.word	0x20012d48

0800655c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006564:	4b11      	ldr	r3, [pc, #68]	; (80065ac <_sbrk+0x50>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d102      	bne.n	8006572 <_sbrk+0x16>
		heap_end = &end;
 800656c:	4b0f      	ldr	r3, [pc, #60]	; (80065ac <_sbrk+0x50>)
 800656e:	4a10      	ldr	r2, [pc, #64]	; (80065b0 <_sbrk+0x54>)
 8006570:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006572:	4b0e      	ldr	r3, [pc, #56]	; (80065ac <_sbrk+0x50>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006578:	4b0c      	ldr	r3, [pc, #48]	; (80065ac <_sbrk+0x50>)
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4413      	add	r3, r2
 8006580:	466a      	mov	r2, sp
 8006582:	4293      	cmp	r3, r2
 8006584:	d907      	bls.n	8006596 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006586:	f000 f875 	bl	8006674 <__errno>
 800658a:	4602      	mov	r2, r0
 800658c:	230c      	movs	r3, #12
 800658e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006590:	f04f 33ff 	mov.w	r3, #4294967295
 8006594:	e006      	b.n	80065a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8006596:	4b05      	ldr	r3, [pc, #20]	; (80065ac <_sbrk+0x50>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4413      	add	r3, r2
 800659e:	4a03      	ldr	r2, [pc, #12]	; (80065ac <_sbrk+0x50>)
 80065a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80065a2:	68fb      	ldr	r3, [r7, #12]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	200276c0 	.word	0x200276c0
 80065b0:	20027998 	.word	0x20027998

080065b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80065b4:	b480      	push	{r7}
 80065b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80065b8:	4b16      	ldr	r3, [pc, #88]	; (8006614 <SystemInit+0x60>)
 80065ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065be:	4a15      	ldr	r2, [pc, #84]	; (8006614 <SystemInit+0x60>)
 80065c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80065c8:	4b13      	ldr	r3, [pc, #76]	; (8006618 <SystemInit+0x64>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a12      	ldr	r2, [pc, #72]	; (8006618 <SystemInit+0x64>)
 80065ce:	f043 0301 	orr.w	r3, r3, #1
 80065d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80065d4:	4b10      	ldr	r3, [pc, #64]	; (8006618 <SystemInit+0x64>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80065da:	4b0f      	ldr	r3, [pc, #60]	; (8006618 <SystemInit+0x64>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a0e      	ldr	r2, [pc, #56]	; (8006618 <SystemInit+0x64>)
 80065e0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80065e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80065ea:	4b0b      	ldr	r3, [pc, #44]	; (8006618 <SystemInit+0x64>)
 80065ec:	4a0b      	ldr	r2, [pc, #44]	; (800661c <SystemInit+0x68>)
 80065ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80065f0:	4b09      	ldr	r3, [pc, #36]	; (8006618 <SystemInit+0x64>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a08      	ldr	r2, [pc, #32]	; (8006618 <SystemInit+0x64>)
 80065f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80065fc:	4b06      	ldr	r3, [pc, #24]	; (8006618 <SystemInit+0x64>)
 80065fe:	2200      	movs	r2, #0
 8006600:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006602:	4b04      	ldr	r3, [pc, #16]	; (8006614 <SystemInit+0x60>)
 8006604:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006608:	609a      	str	r2, [r3, #8]
#endif
}
 800660a:	bf00      	nop
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	e000ed00 	.word	0xe000ed00
 8006618:	40023800 	.word	0x40023800
 800661c:	24003010 	.word	0x24003010

08006620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8006620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006658 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006624:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006626:	e003      	b.n	8006630 <LoopCopyDataInit>

08006628 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006628:	4b0c      	ldr	r3, [pc, #48]	; (800665c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800662a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800662c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800662e:	3104      	adds	r1, #4

08006630 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006630:	480b      	ldr	r0, [pc, #44]	; (8006660 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006632:	4b0c      	ldr	r3, [pc, #48]	; (8006664 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006634:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006636:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006638:	d3f6      	bcc.n	8006628 <CopyDataInit>
  ldr  r2, =_sbss
 800663a:	4a0b      	ldr	r2, [pc, #44]	; (8006668 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800663c:	e002      	b.n	8006644 <LoopFillZerobss>

0800663e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800663e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006640:	f842 3b04 	str.w	r3, [r2], #4

08006644 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006644:	4b09      	ldr	r3, [pc, #36]	; (800666c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006646:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006648:	d3f9      	bcc.n	800663e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800664a:	f7ff ffb3 	bl	80065b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800664e:	f000 f817 	bl	8006680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006652:	f7fe fd63 	bl	800511c <main>
  bx  lr    
 8006656:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8006658:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800665c:	08008a40 	.word	0x08008a40
  ldr  r0, =_sdata
 8006660:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006664:	200274ec 	.word	0x200274ec
  ldr  r2, =_sbss
 8006668:	200274ec 	.word	0x200274ec
  ldr  r3, = _ebss
 800666c:	20027994 	.word	0x20027994

08006670 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006670:	e7fe      	b.n	8006670 <ADC_IRQHandler>
	...

08006674 <__errno>:
 8006674:	4b01      	ldr	r3, [pc, #4]	; (800667c <__errno+0x8>)
 8006676:	6818      	ldr	r0, [r3, #0]
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	20027488 	.word	0x20027488

08006680 <__libc_init_array>:
 8006680:	b570      	push	{r4, r5, r6, lr}
 8006682:	4e0d      	ldr	r6, [pc, #52]	; (80066b8 <__libc_init_array+0x38>)
 8006684:	4c0d      	ldr	r4, [pc, #52]	; (80066bc <__libc_init_array+0x3c>)
 8006686:	1ba4      	subs	r4, r4, r6
 8006688:	10a4      	asrs	r4, r4, #2
 800668a:	2500      	movs	r5, #0
 800668c:	42a5      	cmp	r5, r4
 800668e:	d109      	bne.n	80066a4 <__libc_init_array+0x24>
 8006690:	4e0b      	ldr	r6, [pc, #44]	; (80066c0 <__libc_init_array+0x40>)
 8006692:	4c0c      	ldr	r4, [pc, #48]	; (80066c4 <__libc_init_array+0x44>)
 8006694:	f000 fc36 	bl	8006f04 <_init>
 8006698:	1ba4      	subs	r4, r4, r6
 800669a:	10a4      	asrs	r4, r4, #2
 800669c:	2500      	movs	r5, #0
 800669e:	42a5      	cmp	r5, r4
 80066a0:	d105      	bne.n	80066ae <__libc_init_array+0x2e>
 80066a2:	bd70      	pop	{r4, r5, r6, pc}
 80066a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066a8:	4798      	blx	r3
 80066aa:	3501      	adds	r5, #1
 80066ac:	e7ee      	b.n	800668c <__libc_init_array+0xc>
 80066ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066b2:	4798      	blx	r3
 80066b4:	3501      	adds	r5, #1
 80066b6:	e7f2      	b.n	800669e <__libc_init_array+0x1e>
 80066b8:	08008a38 	.word	0x08008a38
 80066bc:	08008a38 	.word	0x08008a38
 80066c0:	08008a38 	.word	0x08008a38
 80066c4:	08008a3c 	.word	0x08008a3c

080066c8 <memset>:
 80066c8:	4402      	add	r2, r0
 80066ca:	4603      	mov	r3, r0
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d100      	bne.n	80066d2 <memset+0xa>
 80066d0:	4770      	bx	lr
 80066d2:	f803 1b01 	strb.w	r1, [r3], #1
 80066d6:	e7f9      	b.n	80066cc <memset+0x4>

080066d8 <siprintf>:
 80066d8:	b40e      	push	{r1, r2, r3}
 80066da:	b500      	push	{lr}
 80066dc:	b09c      	sub	sp, #112	; 0x70
 80066de:	ab1d      	add	r3, sp, #116	; 0x74
 80066e0:	9002      	str	r0, [sp, #8]
 80066e2:	9006      	str	r0, [sp, #24]
 80066e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066e8:	4809      	ldr	r0, [pc, #36]	; (8006710 <siprintf+0x38>)
 80066ea:	9107      	str	r1, [sp, #28]
 80066ec:	9104      	str	r1, [sp, #16]
 80066ee:	4909      	ldr	r1, [pc, #36]	; (8006714 <siprintf+0x3c>)
 80066f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80066f4:	9105      	str	r1, [sp, #20]
 80066f6:	6800      	ldr	r0, [r0, #0]
 80066f8:	9301      	str	r3, [sp, #4]
 80066fa:	a902      	add	r1, sp, #8
 80066fc:	f000 f876 	bl	80067ec <_svfiprintf_r>
 8006700:	9b02      	ldr	r3, [sp, #8]
 8006702:	2200      	movs	r2, #0
 8006704:	701a      	strb	r2, [r3, #0]
 8006706:	b01c      	add	sp, #112	; 0x70
 8006708:	f85d eb04 	ldr.w	lr, [sp], #4
 800670c:	b003      	add	sp, #12
 800670e:	4770      	bx	lr
 8006710:	20027488 	.word	0x20027488
 8006714:	ffff0208 	.word	0xffff0208

08006718 <strcat>:
 8006718:	b510      	push	{r4, lr}
 800671a:	4603      	mov	r3, r0
 800671c:	781a      	ldrb	r2, [r3, #0]
 800671e:	1c5c      	adds	r4, r3, #1
 8006720:	b93a      	cbnz	r2, 8006732 <strcat+0x1a>
 8006722:	3b01      	subs	r3, #1
 8006724:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006728:	f803 2f01 	strb.w	r2, [r3, #1]!
 800672c:	2a00      	cmp	r2, #0
 800672e:	d1f9      	bne.n	8006724 <strcat+0xc>
 8006730:	bd10      	pop	{r4, pc}
 8006732:	4623      	mov	r3, r4
 8006734:	e7f2      	b.n	800671c <strcat+0x4>

08006736 <__ssputs_r>:
 8006736:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800673a:	688e      	ldr	r6, [r1, #8]
 800673c:	429e      	cmp	r6, r3
 800673e:	4682      	mov	sl, r0
 8006740:	460c      	mov	r4, r1
 8006742:	4690      	mov	r8, r2
 8006744:	4699      	mov	r9, r3
 8006746:	d837      	bhi.n	80067b8 <__ssputs_r+0x82>
 8006748:	898a      	ldrh	r2, [r1, #12]
 800674a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800674e:	d031      	beq.n	80067b4 <__ssputs_r+0x7e>
 8006750:	6825      	ldr	r5, [r4, #0]
 8006752:	6909      	ldr	r1, [r1, #16]
 8006754:	1a6f      	subs	r7, r5, r1
 8006756:	6965      	ldr	r5, [r4, #20]
 8006758:	2302      	movs	r3, #2
 800675a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800675e:	fb95 f5f3 	sdiv	r5, r5, r3
 8006762:	f109 0301 	add.w	r3, r9, #1
 8006766:	443b      	add	r3, r7
 8006768:	429d      	cmp	r5, r3
 800676a:	bf38      	it	cc
 800676c:	461d      	movcc	r5, r3
 800676e:	0553      	lsls	r3, r2, #21
 8006770:	d530      	bpl.n	80067d4 <__ssputs_r+0x9e>
 8006772:	4629      	mov	r1, r5
 8006774:	f000 fb2c 	bl	8006dd0 <_malloc_r>
 8006778:	4606      	mov	r6, r0
 800677a:	b950      	cbnz	r0, 8006792 <__ssputs_r+0x5c>
 800677c:	230c      	movs	r3, #12
 800677e:	f8ca 3000 	str.w	r3, [sl]
 8006782:	89a3      	ldrh	r3, [r4, #12]
 8006784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006788:	81a3      	strh	r3, [r4, #12]
 800678a:	f04f 30ff 	mov.w	r0, #4294967295
 800678e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006792:	463a      	mov	r2, r7
 8006794:	6921      	ldr	r1, [r4, #16]
 8006796:	f000 faa9 	bl	8006cec <memcpy>
 800679a:	89a3      	ldrh	r3, [r4, #12]
 800679c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a4:	81a3      	strh	r3, [r4, #12]
 80067a6:	6126      	str	r6, [r4, #16]
 80067a8:	6165      	str	r5, [r4, #20]
 80067aa:	443e      	add	r6, r7
 80067ac:	1bed      	subs	r5, r5, r7
 80067ae:	6026      	str	r6, [r4, #0]
 80067b0:	60a5      	str	r5, [r4, #8]
 80067b2:	464e      	mov	r6, r9
 80067b4:	454e      	cmp	r6, r9
 80067b6:	d900      	bls.n	80067ba <__ssputs_r+0x84>
 80067b8:	464e      	mov	r6, r9
 80067ba:	4632      	mov	r2, r6
 80067bc:	4641      	mov	r1, r8
 80067be:	6820      	ldr	r0, [r4, #0]
 80067c0:	f000 fa9f 	bl	8006d02 <memmove>
 80067c4:	68a3      	ldr	r3, [r4, #8]
 80067c6:	1b9b      	subs	r3, r3, r6
 80067c8:	60a3      	str	r3, [r4, #8]
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	441e      	add	r6, r3
 80067ce:	6026      	str	r6, [r4, #0]
 80067d0:	2000      	movs	r0, #0
 80067d2:	e7dc      	b.n	800678e <__ssputs_r+0x58>
 80067d4:	462a      	mov	r2, r5
 80067d6:	f000 fb55 	bl	8006e84 <_realloc_r>
 80067da:	4606      	mov	r6, r0
 80067dc:	2800      	cmp	r0, #0
 80067de:	d1e2      	bne.n	80067a6 <__ssputs_r+0x70>
 80067e0:	6921      	ldr	r1, [r4, #16]
 80067e2:	4650      	mov	r0, sl
 80067e4:	f000 faa6 	bl	8006d34 <_free_r>
 80067e8:	e7c8      	b.n	800677c <__ssputs_r+0x46>
	...

080067ec <_svfiprintf_r>:
 80067ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f0:	461d      	mov	r5, r3
 80067f2:	898b      	ldrh	r3, [r1, #12]
 80067f4:	061f      	lsls	r7, r3, #24
 80067f6:	b09d      	sub	sp, #116	; 0x74
 80067f8:	4680      	mov	r8, r0
 80067fa:	460c      	mov	r4, r1
 80067fc:	4616      	mov	r6, r2
 80067fe:	d50f      	bpl.n	8006820 <_svfiprintf_r+0x34>
 8006800:	690b      	ldr	r3, [r1, #16]
 8006802:	b96b      	cbnz	r3, 8006820 <_svfiprintf_r+0x34>
 8006804:	2140      	movs	r1, #64	; 0x40
 8006806:	f000 fae3 	bl	8006dd0 <_malloc_r>
 800680a:	6020      	str	r0, [r4, #0]
 800680c:	6120      	str	r0, [r4, #16]
 800680e:	b928      	cbnz	r0, 800681c <_svfiprintf_r+0x30>
 8006810:	230c      	movs	r3, #12
 8006812:	f8c8 3000 	str.w	r3, [r8]
 8006816:	f04f 30ff 	mov.w	r0, #4294967295
 800681a:	e0c8      	b.n	80069ae <_svfiprintf_r+0x1c2>
 800681c:	2340      	movs	r3, #64	; 0x40
 800681e:	6163      	str	r3, [r4, #20]
 8006820:	2300      	movs	r3, #0
 8006822:	9309      	str	r3, [sp, #36]	; 0x24
 8006824:	2320      	movs	r3, #32
 8006826:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800682a:	2330      	movs	r3, #48	; 0x30
 800682c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006830:	9503      	str	r5, [sp, #12]
 8006832:	f04f 0b01 	mov.w	fp, #1
 8006836:	4637      	mov	r7, r6
 8006838:	463d      	mov	r5, r7
 800683a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800683e:	b10b      	cbz	r3, 8006844 <_svfiprintf_r+0x58>
 8006840:	2b25      	cmp	r3, #37	; 0x25
 8006842:	d13e      	bne.n	80068c2 <_svfiprintf_r+0xd6>
 8006844:	ebb7 0a06 	subs.w	sl, r7, r6
 8006848:	d00b      	beq.n	8006862 <_svfiprintf_r+0x76>
 800684a:	4653      	mov	r3, sl
 800684c:	4632      	mov	r2, r6
 800684e:	4621      	mov	r1, r4
 8006850:	4640      	mov	r0, r8
 8006852:	f7ff ff70 	bl	8006736 <__ssputs_r>
 8006856:	3001      	adds	r0, #1
 8006858:	f000 80a4 	beq.w	80069a4 <_svfiprintf_r+0x1b8>
 800685c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800685e:	4453      	add	r3, sl
 8006860:	9309      	str	r3, [sp, #36]	; 0x24
 8006862:	783b      	ldrb	r3, [r7, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 809d 	beq.w	80069a4 <_svfiprintf_r+0x1b8>
 800686a:	2300      	movs	r3, #0
 800686c:	f04f 32ff 	mov.w	r2, #4294967295
 8006870:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006874:	9304      	str	r3, [sp, #16]
 8006876:	9307      	str	r3, [sp, #28]
 8006878:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800687c:	931a      	str	r3, [sp, #104]	; 0x68
 800687e:	462f      	mov	r7, r5
 8006880:	2205      	movs	r2, #5
 8006882:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006886:	4850      	ldr	r0, [pc, #320]	; (80069c8 <_svfiprintf_r+0x1dc>)
 8006888:	f7f9 fcb2 	bl	80001f0 <memchr>
 800688c:	9b04      	ldr	r3, [sp, #16]
 800688e:	b9d0      	cbnz	r0, 80068c6 <_svfiprintf_r+0xda>
 8006890:	06d9      	lsls	r1, r3, #27
 8006892:	bf44      	itt	mi
 8006894:	2220      	movmi	r2, #32
 8006896:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800689a:	071a      	lsls	r2, r3, #28
 800689c:	bf44      	itt	mi
 800689e:	222b      	movmi	r2, #43	; 0x2b
 80068a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80068a4:	782a      	ldrb	r2, [r5, #0]
 80068a6:	2a2a      	cmp	r2, #42	; 0x2a
 80068a8:	d015      	beq.n	80068d6 <_svfiprintf_r+0xea>
 80068aa:	9a07      	ldr	r2, [sp, #28]
 80068ac:	462f      	mov	r7, r5
 80068ae:	2000      	movs	r0, #0
 80068b0:	250a      	movs	r5, #10
 80068b2:	4639      	mov	r1, r7
 80068b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068b8:	3b30      	subs	r3, #48	; 0x30
 80068ba:	2b09      	cmp	r3, #9
 80068bc:	d94d      	bls.n	800695a <_svfiprintf_r+0x16e>
 80068be:	b1b8      	cbz	r0, 80068f0 <_svfiprintf_r+0x104>
 80068c0:	e00f      	b.n	80068e2 <_svfiprintf_r+0xf6>
 80068c2:	462f      	mov	r7, r5
 80068c4:	e7b8      	b.n	8006838 <_svfiprintf_r+0x4c>
 80068c6:	4a40      	ldr	r2, [pc, #256]	; (80069c8 <_svfiprintf_r+0x1dc>)
 80068c8:	1a80      	subs	r0, r0, r2
 80068ca:	fa0b f000 	lsl.w	r0, fp, r0
 80068ce:	4318      	orrs	r0, r3
 80068d0:	9004      	str	r0, [sp, #16]
 80068d2:	463d      	mov	r5, r7
 80068d4:	e7d3      	b.n	800687e <_svfiprintf_r+0x92>
 80068d6:	9a03      	ldr	r2, [sp, #12]
 80068d8:	1d11      	adds	r1, r2, #4
 80068da:	6812      	ldr	r2, [r2, #0]
 80068dc:	9103      	str	r1, [sp, #12]
 80068de:	2a00      	cmp	r2, #0
 80068e0:	db01      	blt.n	80068e6 <_svfiprintf_r+0xfa>
 80068e2:	9207      	str	r2, [sp, #28]
 80068e4:	e004      	b.n	80068f0 <_svfiprintf_r+0x104>
 80068e6:	4252      	negs	r2, r2
 80068e8:	f043 0302 	orr.w	r3, r3, #2
 80068ec:	9207      	str	r2, [sp, #28]
 80068ee:	9304      	str	r3, [sp, #16]
 80068f0:	783b      	ldrb	r3, [r7, #0]
 80068f2:	2b2e      	cmp	r3, #46	; 0x2e
 80068f4:	d10c      	bne.n	8006910 <_svfiprintf_r+0x124>
 80068f6:	787b      	ldrb	r3, [r7, #1]
 80068f8:	2b2a      	cmp	r3, #42	; 0x2a
 80068fa:	d133      	bne.n	8006964 <_svfiprintf_r+0x178>
 80068fc:	9b03      	ldr	r3, [sp, #12]
 80068fe:	1d1a      	adds	r2, r3, #4
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	9203      	str	r2, [sp, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	bfb8      	it	lt
 8006908:	f04f 33ff 	movlt.w	r3, #4294967295
 800690c:	3702      	adds	r7, #2
 800690e:	9305      	str	r3, [sp, #20]
 8006910:	4d2e      	ldr	r5, [pc, #184]	; (80069cc <_svfiprintf_r+0x1e0>)
 8006912:	7839      	ldrb	r1, [r7, #0]
 8006914:	2203      	movs	r2, #3
 8006916:	4628      	mov	r0, r5
 8006918:	f7f9 fc6a 	bl	80001f0 <memchr>
 800691c:	b138      	cbz	r0, 800692e <_svfiprintf_r+0x142>
 800691e:	2340      	movs	r3, #64	; 0x40
 8006920:	1b40      	subs	r0, r0, r5
 8006922:	fa03 f000 	lsl.w	r0, r3, r0
 8006926:	9b04      	ldr	r3, [sp, #16]
 8006928:	4303      	orrs	r3, r0
 800692a:	3701      	adds	r7, #1
 800692c:	9304      	str	r3, [sp, #16]
 800692e:	7839      	ldrb	r1, [r7, #0]
 8006930:	4827      	ldr	r0, [pc, #156]	; (80069d0 <_svfiprintf_r+0x1e4>)
 8006932:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006936:	2206      	movs	r2, #6
 8006938:	1c7e      	adds	r6, r7, #1
 800693a:	f7f9 fc59 	bl	80001f0 <memchr>
 800693e:	2800      	cmp	r0, #0
 8006940:	d038      	beq.n	80069b4 <_svfiprintf_r+0x1c8>
 8006942:	4b24      	ldr	r3, [pc, #144]	; (80069d4 <_svfiprintf_r+0x1e8>)
 8006944:	bb13      	cbnz	r3, 800698c <_svfiprintf_r+0x1a0>
 8006946:	9b03      	ldr	r3, [sp, #12]
 8006948:	3307      	adds	r3, #7
 800694a:	f023 0307 	bic.w	r3, r3, #7
 800694e:	3308      	adds	r3, #8
 8006950:	9303      	str	r3, [sp, #12]
 8006952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006954:	444b      	add	r3, r9
 8006956:	9309      	str	r3, [sp, #36]	; 0x24
 8006958:	e76d      	b.n	8006836 <_svfiprintf_r+0x4a>
 800695a:	fb05 3202 	mla	r2, r5, r2, r3
 800695e:	2001      	movs	r0, #1
 8006960:	460f      	mov	r7, r1
 8006962:	e7a6      	b.n	80068b2 <_svfiprintf_r+0xc6>
 8006964:	2300      	movs	r3, #0
 8006966:	3701      	adds	r7, #1
 8006968:	9305      	str	r3, [sp, #20]
 800696a:	4619      	mov	r1, r3
 800696c:	250a      	movs	r5, #10
 800696e:	4638      	mov	r0, r7
 8006970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006974:	3a30      	subs	r2, #48	; 0x30
 8006976:	2a09      	cmp	r2, #9
 8006978:	d903      	bls.n	8006982 <_svfiprintf_r+0x196>
 800697a:	2b00      	cmp	r3, #0
 800697c:	d0c8      	beq.n	8006910 <_svfiprintf_r+0x124>
 800697e:	9105      	str	r1, [sp, #20]
 8006980:	e7c6      	b.n	8006910 <_svfiprintf_r+0x124>
 8006982:	fb05 2101 	mla	r1, r5, r1, r2
 8006986:	2301      	movs	r3, #1
 8006988:	4607      	mov	r7, r0
 800698a:	e7f0      	b.n	800696e <_svfiprintf_r+0x182>
 800698c:	ab03      	add	r3, sp, #12
 800698e:	9300      	str	r3, [sp, #0]
 8006990:	4622      	mov	r2, r4
 8006992:	4b11      	ldr	r3, [pc, #68]	; (80069d8 <_svfiprintf_r+0x1ec>)
 8006994:	a904      	add	r1, sp, #16
 8006996:	4640      	mov	r0, r8
 8006998:	f3af 8000 	nop.w
 800699c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80069a0:	4681      	mov	r9, r0
 80069a2:	d1d6      	bne.n	8006952 <_svfiprintf_r+0x166>
 80069a4:	89a3      	ldrh	r3, [r4, #12]
 80069a6:	065b      	lsls	r3, r3, #25
 80069a8:	f53f af35 	bmi.w	8006816 <_svfiprintf_r+0x2a>
 80069ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069ae:	b01d      	add	sp, #116	; 0x74
 80069b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b4:	ab03      	add	r3, sp, #12
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	4622      	mov	r2, r4
 80069ba:	4b07      	ldr	r3, [pc, #28]	; (80069d8 <_svfiprintf_r+0x1ec>)
 80069bc:	a904      	add	r1, sp, #16
 80069be:	4640      	mov	r0, r8
 80069c0:	f000 f882 	bl	8006ac8 <_printf_i>
 80069c4:	e7ea      	b.n	800699c <_svfiprintf_r+0x1b0>
 80069c6:	bf00      	nop
 80069c8:	080089fc 	.word	0x080089fc
 80069cc:	08008a02 	.word	0x08008a02
 80069d0:	08008a06 	.word	0x08008a06
 80069d4:	00000000 	.word	0x00000000
 80069d8:	08006737 	.word	0x08006737

080069dc <_printf_common>:
 80069dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e0:	4691      	mov	r9, r2
 80069e2:	461f      	mov	r7, r3
 80069e4:	688a      	ldr	r2, [r1, #8]
 80069e6:	690b      	ldr	r3, [r1, #16]
 80069e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069ec:	4293      	cmp	r3, r2
 80069ee:	bfb8      	it	lt
 80069f0:	4613      	movlt	r3, r2
 80069f2:	f8c9 3000 	str.w	r3, [r9]
 80069f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069fa:	4606      	mov	r6, r0
 80069fc:	460c      	mov	r4, r1
 80069fe:	b112      	cbz	r2, 8006a06 <_printf_common+0x2a>
 8006a00:	3301      	adds	r3, #1
 8006a02:	f8c9 3000 	str.w	r3, [r9]
 8006a06:	6823      	ldr	r3, [r4, #0]
 8006a08:	0699      	lsls	r1, r3, #26
 8006a0a:	bf42      	ittt	mi
 8006a0c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006a10:	3302      	addmi	r3, #2
 8006a12:	f8c9 3000 	strmi.w	r3, [r9]
 8006a16:	6825      	ldr	r5, [r4, #0]
 8006a18:	f015 0506 	ands.w	r5, r5, #6
 8006a1c:	d107      	bne.n	8006a2e <_printf_common+0x52>
 8006a1e:	f104 0a19 	add.w	sl, r4, #25
 8006a22:	68e3      	ldr	r3, [r4, #12]
 8006a24:	f8d9 2000 	ldr.w	r2, [r9]
 8006a28:	1a9b      	subs	r3, r3, r2
 8006a2a:	42ab      	cmp	r3, r5
 8006a2c:	dc28      	bgt.n	8006a80 <_printf_common+0xa4>
 8006a2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006a32:	6822      	ldr	r2, [r4, #0]
 8006a34:	3300      	adds	r3, #0
 8006a36:	bf18      	it	ne
 8006a38:	2301      	movne	r3, #1
 8006a3a:	0692      	lsls	r2, r2, #26
 8006a3c:	d42d      	bmi.n	8006a9a <_printf_common+0xbe>
 8006a3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a42:	4639      	mov	r1, r7
 8006a44:	4630      	mov	r0, r6
 8006a46:	47c0      	blx	r8
 8006a48:	3001      	adds	r0, #1
 8006a4a:	d020      	beq.n	8006a8e <_printf_common+0xb2>
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	68e5      	ldr	r5, [r4, #12]
 8006a50:	f8d9 2000 	ldr.w	r2, [r9]
 8006a54:	f003 0306 	and.w	r3, r3, #6
 8006a58:	2b04      	cmp	r3, #4
 8006a5a:	bf08      	it	eq
 8006a5c:	1aad      	subeq	r5, r5, r2
 8006a5e:	68a3      	ldr	r3, [r4, #8]
 8006a60:	6922      	ldr	r2, [r4, #16]
 8006a62:	bf0c      	ite	eq
 8006a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a68:	2500      	movne	r5, #0
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	bfc4      	itt	gt
 8006a6e:	1a9b      	subgt	r3, r3, r2
 8006a70:	18ed      	addgt	r5, r5, r3
 8006a72:	f04f 0900 	mov.w	r9, #0
 8006a76:	341a      	adds	r4, #26
 8006a78:	454d      	cmp	r5, r9
 8006a7a:	d11a      	bne.n	8006ab2 <_printf_common+0xd6>
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	e008      	b.n	8006a92 <_printf_common+0xb6>
 8006a80:	2301      	movs	r3, #1
 8006a82:	4652      	mov	r2, sl
 8006a84:	4639      	mov	r1, r7
 8006a86:	4630      	mov	r0, r6
 8006a88:	47c0      	blx	r8
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	d103      	bne.n	8006a96 <_printf_common+0xba>
 8006a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a96:	3501      	adds	r5, #1
 8006a98:	e7c3      	b.n	8006a22 <_printf_common+0x46>
 8006a9a:	18e1      	adds	r1, r4, r3
 8006a9c:	1c5a      	adds	r2, r3, #1
 8006a9e:	2030      	movs	r0, #48	; 0x30
 8006aa0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006aa4:	4422      	add	r2, r4
 8006aa6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006aaa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006aae:	3302      	adds	r3, #2
 8006ab0:	e7c5      	b.n	8006a3e <_printf_common+0x62>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	4622      	mov	r2, r4
 8006ab6:	4639      	mov	r1, r7
 8006ab8:	4630      	mov	r0, r6
 8006aba:	47c0      	blx	r8
 8006abc:	3001      	adds	r0, #1
 8006abe:	d0e6      	beq.n	8006a8e <_printf_common+0xb2>
 8006ac0:	f109 0901 	add.w	r9, r9, #1
 8006ac4:	e7d8      	b.n	8006a78 <_printf_common+0x9c>
	...

08006ac8 <_printf_i>:
 8006ac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006acc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006ad0:	460c      	mov	r4, r1
 8006ad2:	7e09      	ldrb	r1, [r1, #24]
 8006ad4:	b085      	sub	sp, #20
 8006ad6:	296e      	cmp	r1, #110	; 0x6e
 8006ad8:	4617      	mov	r7, r2
 8006ada:	4606      	mov	r6, r0
 8006adc:	4698      	mov	r8, r3
 8006ade:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ae0:	f000 80b3 	beq.w	8006c4a <_printf_i+0x182>
 8006ae4:	d822      	bhi.n	8006b2c <_printf_i+0x64>
 8006ae6:	2963      	cmp	r1, #99	; 0x63
 8006ae8:	d036      	beq.n	8006b58 <_printf_i+0x90>
 8006aea:	d80a      	bhi.n	8006b02 <_printf_i+0x3a>
 8006aec:	2900      	cmp	r1, #0
 8006aee:	f000 80b9 	beq.w	8006c64 <_printf_i+0x19c>
 8006af2:	2958      	cmp	r1, #88	; 0x58
 8006af4:	f000 8083 	beq.w	8006bfe <_printf_i+0x136>
 8006af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006afc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006b00:	e032      	b.n	8006b68 <_printf_i+0xa0>
 8006b02:	2964      	cmp	r1, #100	; 0x64
 8006b04:	d001      	beq.n	8006b0a <_printf_i+0x42>
 8006b06:	2969      	cmp	r1, #105	; 0x69
 8006b08:	d1f6      	bne.n	8006af8 <_printf_i+0x30>
 8006b0a:	6820      	ldr	r0, [r4, #0]
 8006b0c:	6813      	ldr	r3, [r2, #0]
 8006b0e:	0605      	lsls	r5, r0, #24
 8006b10:	f103 0104 	add.w	r1, r3, #4
 8006b14:	d52a      	bpl.n	8006b6c <_printf_i+0xa4>
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6011      	str	r1, [r2, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	da03      	bge.n	8006b26 <_printf_i+0x5e>
 8006b1e:	222d      	movs	r2, #45	; 0x2d
 8006b20:	425b      	negs	r3, r3
 8006b22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006b26:	486f      	ldr	r0, [pc, #444]	; (8006ce4 <_printf_i+0x21c>)
 8006b28:	220a      	movs	r2, #10
 8006b2a:	e039      	b.n	8006ba0 <_printf_i+0xd8>
 8006b2c:	2973      	cmp	r1, #115	; 0x73
 8006b2e:	f000 809d 	beq.w	8006c6c <_printf_i+0x1a4>
 8006b32:	d808      	bhi.n	8006b46 <_printf_i+0x7e>
 8006b34:	296f      	cmp	r1, #111	; 0x6f
 8006b36:	d020      	beq.n	8006b7a <_printf_i+0xb2>
 8006b38:	2970      	cmp	r1, #112	; 0x70
 8006b3a:	d1dd      	bne.n	8006af8 <_printf_i+0x30>
 8006b3c:	6823      	ldr	r3, [r4, #0]
 8006b3e:	f043 0320 	orr.w	r3, r3, #32
 8006b42:	6023      	str	r3, [r4, #0]
 8006b44:	e003      	b.n	8006b4e <_printf_i+0x86>
 8006b46:	2975      	cmp	r1, #117	; 0x75
 8006b48:	d017      	beq.n	8006b7a <_printf_i+0xb2>
 8006b4a:	2978      	cmp	r1, #120	; 0x78
 8006b4c:	d1d4      	bne.n	8006af8 <_printf_i+0x30>
 8006b4e:	2378      	movs	r3, #120	; 0x78
 8006b50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b54:	4864      	ldr	r0, [pc, #400]	; (8006ce8 <_printf_i+0x220>)
 8006b56:	e055      	b.n	8006c04 <_printf_i+0x13c>
 8006b58:	6813      	ldr	r3, [r2, #0]
 8006b5a:	1d19      	adds	r1, r3, #4
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6011      	str	r1, [r2, #0]
 8006b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e08c      	b.n	8006c86 <_printf_i+0x1be>
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6011      	str	r1, [r2, #0]
 8006b70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b74:	bf18      	it	ne
 8006b76:	b21b      	sxthne	r3, r3
 8006b78:	e7cf      	b.n	8006b1a <_printf_i+0x52>
 8006b7a:	6813      	ldr	r3, [r2, #0]
 8006b7c:	6825      	ldr	r5, [r4, #0]
 8006b7e:	1d18      	adds	r0, r3, #4
 8006b80:	6010      	str	r0, [r2, #0]
 8006b82:	0628      	lsls	r0, r5, #24
 8006b84:	d501      	bpl.n	8006b8a <_printf_i+0xc2>
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	e002      	b.n	8006b90 <_printf_i+0xc8>
 8006b8a:	0668      	lsls	r0, r5, #25
 8006b8c:	d5fb      	bpl.n	8006b86 <_printf_i+0xbe>
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	4854      	ldr	r0, [pc, #336]	; (8006ce4 <_printf_i+0x21c>)
 8006b92:	296f      	cmp	r1, #111	; 0x6f
 8006b94:	bf14      	ite	ne
 8006b96:	220a      	movne	r2, #10
 8006b98:	2208      	moveq	r2, #8
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ba0:	6865      	ldr	r5, [r4, #4]
 8006ba2:	60a5      	str	r5, [r4, #8]
 8006ba4:	2d00      	cmp	r5, #0
 8006ba6:	f2c0 8095 	blt.w	8006cd4 <_printf_i+0x20c>
 8006baa:	6821      	ldr	r1, [r4, #0]
 8006bac:	f021 0104 	bic.w	r1, r1, #4
 8006bb0:	6021      	str	r1, [r4, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d13d      	bne.n	8006c32 <_printf_i+0x16a>
 8006bb6:	2d00      	cmp	r5, #0
 8006bb8:	f040 808e 	bne.w	8006cd8 <_printf_i+0x210>
 8006bbc:	4665      	mov	r5, ip
 8006bbe:	2a08      	cmp	r2, #8
 8006bc0:	d10b      	bne.n	8006bda <_printf_i+0x112>
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	07db      	lsls	r3, r3, #31
 8006bc6:	d508      	bpl.n	8006bda <_printf_i+0x112>
 8006bc8:	6923      	ldr	r3, [r4, #16]
 8006bca:	6862      	ldr	r2, [r4, #4]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	bfde      	ittt	le
 8006bd0:	2330      	movle	r3, #48	; 0x30
 8006bd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006bda:	ebac 0305 	sub.w	r3, ip, r5
 8006bde:	6123      	str	r3, [r4, #16]
 8006be0:	f8cd 8000 	str.w	r8, [sp]
 8006be4:	463b      	mov	r3, r7
 8006be6:	aa03      	add	r2, sp, #12
 8006be8:	4621      	mov	r1, r4
 8006bea:	4630      	mov	r0, r6
 8006bec:	f7ff fef6 	bl	80069dc <_printf_common>
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d14d      	bne.n	8006c90 <_printf_i+0x1c8>
 8006bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf8:	b005      	add	sp, #20
 8006bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bfe:	4839      	ldr	r0, [pc, #228]	; (8006ce4 <_printf_i+0x21c>)
 8006c00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006c04:	6813      	ldr	r3, [r2, #0]
 8006c06:	6821      	ldr	r1, [r4, #0]
 8006c08:	1d1d      	adds	r5, r3, #4
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6015      	str	r5, [r2, #0]
 8006c0e:	060a      	lsls	r2, r1, #24
 8006c10:	d50b      	bpl.n	8006c2a <_printf_i+0x162>
 8006c12:	07ca      	lsls	r2, r1, #31
 8006c14:	bf44      	itt	mi
 8006c16:	f041 0120 	orrmi.w	r1, r1, #32
 8006c1a:	6021      	strmi	r1, [r4, #0]
 8006c1c:	b91b      	cbnz	r3, 8006c26 <_printf_i+0x15e>
 8006c1e:	6822      	ldr	r2, [r4, #0]
 8006c20:	f022 0220 	bic.w	r2, r2, #32
 8006c24:	6022      	str	r2, [r4, #0]
 8006c26:	2210      	movs	r2, #16
 8006c28:	e7b7      	b.n	8006b9a <_printf_i+0xd2>
 8006c2a:	064d      	lsls	r5, r1, #25
 8006c2c:	bf48      	it	mi
 8006c2e:	b29b      	uxthmi	r3, r3
 8006c30:	e7ef      	b.n	8006c12 <_printf_i+0x14a>
 8006c32:	4665      	mov	r5, ip
 8006c34:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c38:	fb02 3311 	mls	r3, r2, r1, r3
 8006c3c:	5cc3      	ldrb	r3, [r0, r3]
 8006c3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006c42:	460b      	mov	r3, r1
 8006c44:	2900      	cmp	r1, #0
 8006c46:	d1f5      	bne.n	8006c34 <_printf_i+0x16c>
 8006c48:	e7b9      	b.n	8006bbe <_printf_i+0xf6>
 8006c4a:	6813      	ldr	r3, [r2, #0]
 8006c4c:	6825      	ldr	r5, [r4, #0]
 8006c4e:	6961      	ldr	r1, [r4, #20]
 8006c50:	1d18      	adds	r0, r3, #4
 8006c52:	6010      	str	r0, [r2, #0]
 8006c54:	0628      	lsls	r0, r5, #24
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	d501      	bpl.n	8006c5e <_printf_i+0x196>
 8006c5a:	6019      	str	r1, [r3, #0]
 8006c5c:	e002      	b.n	8006c64 <_printf_i+0x19c>
 8006c5e:	066a      	lsls	r2, r5, #25
 8006c60:	d5fb      	bpl.n	8006c5a <_printf_i+0x192>
 8006c62:	8019      	strh	r1, [r3, #0]
 8006c64:	2300      	movs	r3, #0
 8006c66:	6123      	str	r3, [r4, #16]
 8006c68:	4665      	mov	r5, ip
 8006c6a:	e7b9      	b.n	8006be0 <_printf_i+0x118>
 8006c6c:	6813      	ldr	r3, [r2, #0]
 8006c6e:	1d19      	adds	r1, r3, #4
 8006c70:	6011      	str	r1, [r2, #0]
 8006c72:	681d      	ldr	r5, [r3, #0]
 8006c74:	6862      	ldr	r2, [r4, #4]
 8006c76:	2100      	movs	r1, #0
 8006c78:	4628      	mov	r0, r5
 8006c7a:	f7f9 fab9 	bl	80001f0 <memchr>
 8006c7e:	b108      	cbz	r0, 8006c84 <_printf_i+0x1bc>
 8006c80:	1b40      	subs	r0, r0, r5
 8006c82:	6060      	str	r0, [r4, #4]
 8006c84:	6863      	ldr	r3, [r4, #4]
 8006c86:	6123      	str	r3, [r4, #16]
 8006c88:	2300      	movs	r3, #0
 8006c8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c8e:	e7a7      	b.n	8006be0 <_printf_i+0x118>
 8006c90:	6923      	ldr	r3, [r4, #16]
 8006c92:	462a      	mov	r2, r5
 8006c94:	4639      	mov	r1, r7
 8006c96:	4630      	mov	r0, r6
 8006c98:	47c0      	blx	r8
 8006c9a:	3001      	adds	r0, #1
 8006c9c:	d0aa      	beq.n	8006bf4 <_printf_i+0x12c>
 8006c9e:	6823      	ldr	r3, [r4, #0]
 8006ca0:	079b      	lsls	r3, r3, #30
 8006ca2:	d413      	bmi.n	8006ccc <_printf_i+0x204>
 8006ca4:	68e0      	ldr	r0, [r4, #12]
 8006ca6:	9b03      	ldr	r3, [sp, #12]
 8006ca8:	4298      	cmp	r0, r3
 8006caa:	bfb8      	it	lt
 8006cac:	4618      	movlt	r0, r3
 8006cae:	e7a3      	b.n	8006bf8 <_printf_i+0x130>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	464a      	mov	r2, r9
 8006cb4:	4639      	mov	r1, r7
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	47c0      	blx	r8
 8006cba:	3001      	adds	r0, #1
 8006cbc:	d09a      	beq.n	8006bf4 <_printf_i+0x12c>
 8006cbe:	3501      	adds	r5, #1
 8006cc0:	68e3      	ldr	r3, [r4, #12]
 8006cc2:	9a03      	ldr	r2, [sp, #12]
 8006cc4:	1a9b      	subs	r3, r3, r2
 8006cc6:	42ab      	cmp	r3, r5
 8006cc8:	dcf2      	bgt.n	8006cb0 <_printf_i+0x1e8>
 8006cca:	e7eb      	b.n	8006ca4 <_printf_i+0x1dc>
 8006ccc:	2500      	movs	r5, #0
 8006cce:	f104 0919 	add.w	r9, r4, #25
 8006cd2:	e7f5      	b.n	8006cc0 <_printf_i+0x1f8>
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1ac      	bne.n	8006c32 <_printf_i+0x16a>
 8006cd8:	7803      	ldrb	r3, [r0, #0]
 8006cda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cde:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ce2:	e76c      	b.n	8006bbe <_printf_i+0xf6>
 8006ce4:	08008a0d 	.word	0x08008a0d
 8006ce8:	08008a1e 	.word	0x08008a1e

08006cec <memcpy>:
 8006cec:	b510      	push	{r4, lr}
 8006cee:	1e43      	subs	r3, r0, #1
 8006cf0:	440a      	add	r2, r1
 8006cf2:	4291      	cmp	r1, r2
 8006cf4:	d100      	bne.n	8006cf8 <memcpy+0xc>
 8006cf6:	bd10      	pop	{r4, pc}
 8006cf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d00:	e7f7      	b.n	8006cf2 <memcpy+0x6>

08006d02 <memmove>:
 8006d02:	4288      	cmp	r0, r1
 8006d04:	b510      	push	{r4, lr}
 8006d06:	eb01 0302 	add.w	r3, r1, r2
 8006d0a:	d807      	bhi.n	8006d1c <memmove+0x1a>
 8006d0c:	1e42      	subs	r2, r0, #1
 8006d0e:	4299      	cmp	r1, r3
 8006d10:	d00a      	beq.n	8006d28 <memmove+0x26>
 8006d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d16:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006d1a:	e7f8      	b.n	8006d0e <memmove+0xc>
 8006d1c:	4283      	cmp	r3, r0
 8006d1e:	d9f5      	bls.n	8006d0c <memmove+0xa>
 8006d20:	1881      	adds	r1, r0, r2
 8006d22:	1ad2      	subs	r2, r2, r3
 8006d24:	42d3      	cmn	r3, r2
 8006d26:	d100      	bne.n	8006d2a <memmove+0x28>
 8006d28:	bd10      	pop	{r4, pc}
 8006d2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d2e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006d32:	e7f7      	b.n	8006d24 <memmove+0x22>

08006d34 <_free_r>:
 8006d34:	b538      	push	{r3, r4, r5, lr}
 8006d36:	4605      	mov	r5, r0
 8006d38:	2900      	cmp	r1, #0
 8006d3a:	d045      	beq.n	8006dc8 <_free_r+0x94>
 8006d3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d40:	1f0c      	subs	r4, r1, #4
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	bfb8      	it	lt
 8006d46:	18e4      	addlt	r4, r4, r3
 8006d48:	f000 f8d2 	bl	8006ef0 <__malloc_lock>
 8006d4c:	4a1f      	ldr	r2, [pc, #124]	; (8006dcc <_free_r+0x98>)
 8006d4e:	6813      	ldr	r3, [r2, #0]
 8006d50:	4610      	mov	r0, r2
 8006d52:	b933      	cbnz	r3, 8006d62 <_free_r+0x2e>
 8006d54:	6063      	str	r3, [r4, #4]
 8006d56:	6014      	str	r4, [r2, #0]
 8006d58:	4628      	mov	r0, r5
 8006d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d5e:	f000 b8c8 	b.w	8006ef2 <__malloc_unlock>
 8006d62:	42a3      	cmp	r3, r4
 8006d64:	d90c      	bls.n	8006d80 <_free_r+0x4c>
 8006d66:	6821      	ldr	r1, [r4, #0]
 8006d68:	1862      	adds	r2, r4, r1
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	bf04      	itt	eq
 8006d6e:	681a      	ldreq	r2, [r3, #0]
 8006d70:	685b      	ldreq	r3, [r3, #4]
 8006d72:	6063      	str	r3, [r4, #4]
 8006d74:	bf04      	itt	eq
 8006d76:	1852      	addeq	r2, r2, r1
 8006d78:	6022      	streq	r2, [r4, #0]
 8006d7a:	6004      	str	r4, [r0, #0]
 8006d7c:	e7ec      	b.n	8006d58 <_free_r+0x24>
 8006d7e:	4613      	mov	r3, r2
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	b10a      	cbz	r2, 8006d88 <_free_r+0x54>
 8006d84:	42a2      	cmp	r2, r4
 8006d86:	d9fa      	bls.n	8006d7e <_free_r+0x4a>
 8006d88:	6819      	ldr	r1, [r3, #0]
 8006d8a:	1858      	adds	r0, r3, r1
 8006d8c:	42a0      	cmp	r0, r4
 8006d8e:	d10b      	bne.n	8006da8 <_free_r+0x74>
 8006d90:	6820      	ldr	r0, [r4, #0]
 8006d92:	4401      	add	r1, r0
 8006d94:	1858      	adds	r0, r3, r1
 8006d96:	4282      	cmp	r2, r0
 8006d98:	6019      	str	r1, [r3, #0]
 8006d9a:	d1dd      	bne.n	8006d58 <_free_r+0x24>
 8006d9c:	6810      	ldr	r0, [r2, #0]
 8006d9e:	6852      	ldr	r2, [r2, #4]
 8006da0:	605a      	str	r2, [r3, #4]
 8006da2:	4401      	add	r1, r0
 8006da4:	6019      	str	r1, [r3, #0]
 8006da6:	e7d7      	b.n	8006d58 <_free_r+0x24>
 8006da8:	d902      	bls.n	8006db0 <_free_r+0x7c>
 8006daa:	230c      	movs	r3, #12
 8006dac:	602b      	str	r3, [r5, #0]
 8006dae:	e7d3      	b.n	8006d58 <_free_r+0x24>
 8006db0:	6820      	ldr	r0, [r4, #0]
 8006db2:	1821      	adds	r1, r4, r0
 8006db4:	428a      	cmp	r2, r1
 8006db6:	bf04      	itt	eq
 8006db8:	6811      	ldreq	r1, [r2, #0]
 8006dba:	6852      	ldreq	r2, [r2, #4]
 8006dbc:	6062      	str	r2, [r4, #4]
 8006dbe:	bf04      	itt	eq
 8006dc0:	1809      	addeq	r1, r1, r0
 8006dc2:	6021      	streq	r1, [r4, #0]
 8006dc4:	605c      	str	r4, [r3, #4]
 8006dc6:	e7c7      	b.n	8006d58 <_free_r+0x24>
 8006dc8:	bd38      	pop	{r3, r4, r5, pc}
 8006dca:	bf00      	nop
 8006dcc:	200276c4 	.word	0x200276c4

08006dd0 <_malloc_r>:
 8006dd0:	b570      	push	{r4, r5, r6, lr}
 8006dd2:	1ccd      	adds	r5, r1, #3
 8006dd4:	f025 0503 	bic.w	r5, r5, #3
 8006dd8:	3508      	adds	r5, #8
 8006dda:	2d0c      	cmp	r5, #12
 8006ddc:	bf38      	it	cc
 8006dde:	250c      	movcc	r5, #12
 8006de0:	2d00      	cmp	r5, #0
 8006de2:	4606      	mov	r6, r0
 8006de4:	db01      	blt.n	8006dea <_malloc_r+0x1a>
 8006de6:	42a9      	cmp	r1, r5
 8006de8:	d903      	bls.n	8006df2 <_malloc_r+0x22>
 8006dea:	230c      	movs	r3, #12
 8006dec:	6033      	str	r3, [r6, #0]
 8006dee:	2000      	movs	r0, #0
 8006df0:	bd70      	pop	{r4, r5, r6, pc}
 8006df2:	f000 f87d 	bl	8006ef0 <__malloc_lock>
 8006df6:	4a21      	ldr	r2, [pc, #132]	; (8006e7c <_malloc_r+0xac>)
 8006df8:	6814      	ldr	r4, [r2, #0]
 8006dfa:	4621      	mov	r1, r4
 8006dfc:	b991      	cbnz	r1, 8006e24 <_malloc_r+0x54>
 8006dfe:	4c20      	ldr	r4, [pc, #128]	; (8006e80 <_malloc_r+0xb0>)
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	b91b      	cbnz	r3, 8006e0c <_malloc_r+0x3c>
 8006e04:	4630      	mov	r0, r6
 8006e06:	f000 f863 	bl	8006ed0 <_sbrk_r>
 8006e0a:	6020      	str	r0, [r4, #0]
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	4630      	mov	r0, r6
 8006e10:	f000 f85e 	bl	8006ed0 <_sbrk_r>
 8006e14:	1c43      	adds	r3, r0, #1
 8006e16:	d124      	bne.n	8006e62 <_malloc_r+0x92>
 8006e18:	230c      	movs	r3, #12
 8006e1a:	6033      	str	r3, [r6, #0]
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	f000 f868 	bl	8006ef2 <__malloc_unlock>
 8006e22:	e7e4      	b.n	8006dee <_malloc_r+0x1e>
 8006e24:	680b      	ldr	r3, [r1, #0]
 8006e26:	1b5b      	subs	r3, r3, r5
 8006e28:	d418      	bmi.n	8006e5c <_malloc_r+0x8c>
 8006e2a:	2b0b      	cmp	r3, #11
 8006e2c:	d90f      	bls.n	8006e4e <_malloc_r+0x7e>
 8006e2e:	600b      	str	r3, [r1, #0]
 8006e30:	50cd      	str	r5, [r1, r3]
 8006e32:	18cc      	adds	r4, r1, r3
 8006e34:	4630      	mov	r0, r6
 8006e36:	f000 f85c 	bl	8006ef2 <__malloc_unlock>
 8006e3a:	f104 000b 	add.w	r0, r4, #11
 8006e3e:	1d23      	adds	r3, r4, #4
 8006e40:	f020 0007 	bic.w	r0, r0, #7
 8006e44:	1ac3      	subs	r3, r0, r3
 8006e46:	d0d3      	beq.n	8006df0 <_malloc_r+0x20>
 8006e48:	425a      	negs	r2, r3
 8006e4a:	50e2      	str	r2, [r4, r3]
 8006e4c:	e7d0      	b.n	8006df0 <_malloc_r+0x20>
 8006e4e:	428c      	cmp	r4, r1
 8006e50:	684b      	ldr	r3, [r1, #4]
 8006e52:	bf16      	itet	ne
 8006e54:	6063      	strne	r3, [r4, #4]
 8006e56:	6013      	streq	r3, [r2, #0]
 8006e58:	460c      	movne	r4, r1
 8006e5a:	e7eb      	b.n	8006e34 <_malloc_r+0x64>
 8006e5c:	460c      	mov	r4, r1
 8006e5e:	6849      	ldr	r1, [r1, #4]
 8006e60:	e7cc      	b.n	8006dfc <_malloc_r+0x2c>
 8006e62:	1cc4      	adds	r4, r0, #3
 8006e64:	f024 0403 	bic.w	r4, r4, #3
 8006e68:	42a0      	cmp	r0, r4
 8006e6a:	d005      	beq.n	8006e78 <_malloc_r+0xa8>
 8006e6c:	1a21      	subs	r1, r4, r0
 8006e6e:	4630      	mov	r0, r6
 8006e70:	f000 f82e 	bl	8006ed0 <_sbrk_r>
 8006e74:	3001      	adds	r0, #1
 8006e76:	d0cf      	beq.n	8006e18 <_malloc_r+0x48>
 8006e78:	6025      	str	r5, [r4, #0]
 8006e7a:	e7db      	b.n	8006e34 <_malloc_r+0x64>
 8006e7c:	200276c4 	.word	0x200276c4
 8006e80:	200276c8 	.word	0x200276c8

08006e84 <_realloc_r>:
 8006e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e86:	4607      	mov	r7, r0
 8006e88:	4614      	mov	r4, r2
 8006e8a:	460e      	mov	r6, r1
 8006e8c:	b921      	cbnz	r1, 8006e98 <_realloc_r+0x14>
 8006e8e:	4611      	mov	r1, r2
 8006e90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006e94:	f7ff bf9c 	b.w	8006dd0 <_malloc_r>
 8006e98:	b922      	cbnz	r2, 8006ea4 <_realloc_r+0x20>
 8006e9a:	f7ff ff4b 	bl	8006d34 <_free_r>
 8006e9e:	4625      	mov	r5, r4
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ea4:	f000 f826 	bl	8006ef4 <_malloc_usable_size_r>
 8006ea8:	42a0      	cmp	r0, r4
 8006eaa:	d20f      	bcs.n	8006ecc <_realloc_r+0x48>
 8006eac:	4621      	mov	r1, r4
 8006eae:	4638      	mov	r0, r7
 8006eb0:	f7ff ff8e 	bl	8006dd0 <_malloc_r>
 8006eb4:	4605      	mov	r5, r0
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	d0f2      	beq.n	8006ea0 <_realloc_r+0x1c>
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4622      	mov	r2, r4
 8006ebe:	f7ff ff15 	bl	8006cec <memcpy>
 8006ec2:	4631      	mov	r1, r6
 8006ec4:	4638      	mov	r0, r7
 8006ec6:	f7ff ff35 	bl	8006d34 <_free_r>
 8006eca:	e7e9      	b.n	8006ea0 <_realloc_r+0x1c>
 8006ecc:	4635      	mov	r5, r6
 8006ece:	e7e7      	b.n	8006ea0 <_realloc_r+0x1c>

08006ed0 <_sbrk_r>:
 8006ed0:	b538      	push	{r3, r4, r5, lr}
 8006ed2:	4c06      	ldr	r4, [pc, #24]	; (8006eec <_sbrk_r+0x1c>)
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	4605      	mov	r5, r0
 8006ed8:	4608      	mov	r0, r1
 8006eda:	6023      	str	r3, [r4, #0]
 8006edc:	f7ff fb3e 	bl	800655c <_sbrk>
 8006ee0:	1c43      	adds	r3, r0, #1
 8006ee2:	d102      	bne.n	8006eea <_sbrk_r+0x1a>
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	b103      	cbz	r3, 8006eea <_sbrk_r+0x1a>
 8006ee8:	602b      	str	r3, [r5, #0]
 8006eea:	bd38      	pop	{r3, r4, r5, pc}
 8006eec:	20027990 	.word	0x20027990

08006ef0 <__malloc_lock>:
 8006ef0:	4770      	bx	lr

08006ef2 <__malloc_unlock>:
 8006ef2:	4770      	bx	lr

08006ef4 <_malloc_usable_size_r>:
 8006ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ef8:	1f18      	subs	r0, r3, #4
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	bfbc      	itt	lt
 8006efe:	580b      	ldrlt	r3, [r1, r0]
 8006f00:	18c0      	addlt	r0, r0, r3
 8006f02:	4770      	bx	lr

08006f04 <_init>:
 8006f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f06:	bf00      	nop
 8006f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0a:	bc08      	pop	{r3}
 8006f0c:	469e      	mov	lr, r3
 8006f0e:	4770      	bx	lr

08006f10 <_fini>:
 8006f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f12:	bf00      	nop
 8006f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f16:	bc08      	pop	{r3}
 8006f18:	469e      	mov	lr, r3
 8006f1a:	4770      	bx	lr
